/* automatically generated by rust-bindgen 0.56.0 */

#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(clippy::all)]

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage, Align> {
    storage: Storage,
    align: [Align; 0],
}
impl<Storage, Align> __BindgenBitfieldUnit<Storage, Align> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage, align: [] }
    }
}
impl<Storage, Align> __BindgenBitfieldUnit<Storage, Align>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
pub const _VCRT_COMPILER_PREPROCESSOR: u32 = 1;
pub const _SAL_VERSION: u32 = 20;
pub const __SAL_H_VERSION: u32 = 180000000;
pub const _USE_DECLSPECS_FOR_SAL: u32 = 0;
pub const _USE_ATTRIBUTES_FOR_SAL: u32 = 0;
pub const _CRT_PACKING: u32 = 8;
pub const _HAS_EXCEPTIONS: u32 = 1;
pub const NULL: u32 = 0;
pub const _HAS_CXX17: u32 = 0;
pub const _HAS_CXX20: u32 = 0;
pub const _HAS_NODISCARD: u32 = 1;
pub const _ARGMAX: u32 = 100;
pub const _CRT_INT_MAX: u32 = 2147483647;
pub const _CRT_FUNCTIONS_REQUIRED: u32 = 1;
pub const _CRT_HAS_CXX17: u32 = 0;
pub const _ARM_WINAPI_PARTITION_DESKTOP_SDK_AVAILABLE: u32 = 1;
pub const _CRT_BUILD_DESKTOP_APP: u32 = 1;
pub const _CRT_INTERNAL_NONSTDC_NAMES: u32 = 1;
pub const __STDC_SECURE_LIB__: u32 = 200411;
pub const __GOT_SECURE_LIB__: u32 = 200411;
pub const __STDC_WANT_SECURE_LIB__: u32 = 1;
pub const _SECURECRT_FILL_BUFFER_PATTERN: u32 = 254;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES: u32 = 1;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY: u32 = 0;
pub const FLT_EVAL_METHOD: u32 = 0;
pub const DBL_DECIMAL_DIG: u32 = 17;
pub const DBL_DIG: u32 = 15;
pub const DBL_HAS_SUBNORM: u32 = 1;
pub const DBL_MANT_DIG: u32 = 53;
pub const DBL_MAX_10_EXP: u32 = 308;
pub const DBL_MAX_EXP: u32 = 1024;
pub const DBL_MIN_10_EXP: i32 = -307;
pub const DBL_MIN_EXP: i32 = -1021;
pub const _DBL_RADIX: u32 = 2;
pub const FLT_DECIMAL_DIG: u32 = 9;
pub const FLT_DIG: u32 = 6;
pub const FLT_HAS_SUBNORM: u32 = 1;
pub const FLT_GUARD: u32 = 0;
pub const FLT_MANT_DIG: u32 = 24;
pub const FLT_MAX_10_EXP: u32 = 38;
pub const FLT_MAX_EXP: u32 = 128;
pub const FLT_MIN_10_EXP: i32 = -37;
pub const FLT_MIN_EXP: i32 = -125;
pub const FLT_NORMALIZE: u32 = 0;
pub const FLT_RADIX: u32 = 2;
pub const LDBL_DIG: u32 = 15;
pub const LDBL_HAS_SUBNORM: u32 = 1;
pub const LDBL_MANT_DIG: u32 = 53;
pub const LDBL_MAX_10_EXP: u32 = 308;
pub const LDBL_MAX_EXP: u32 = 1024;
pub const LDBL_MIN_10_EXP: i32 = -307;
pub const LDBL_MIN_EXP: i32 = -1021;
pub const _LDBL_RADIX: u32 = 2;
pub const DECIMAL_DIG: u32 = 17;
pub const _SW_INEXACT: u32 = 1;
pub const _SW_UNDERFLOW: u32 = 2;
pub const _SW_OVERFLOW: u32 = 4;
pub const _SW_ZERODIVIDE: u32 = 8;
pub const _SW_INVALID: u32 = 16;
pub const _SW_DENORMAL: u32 = 524288;
pub const _EM_AMBIGUIOUS: u32 = 2147483648;
pub const _EM_AMBIGUOUS: u32 = 2147483648;
pub const _MCW_EM: u32 = 524319;
pub const _EM_INEXACT: u32 = 1;
pub const _EM_UNDERFLOW: u32 = 2;
pub const _EM_OVERFLOW: u32 = 4;
pub const _EM_ZERODIVIDE: u32 = 8;
pub const _EM_INVALID: u32 = 16;
pub const _EM_DENORMAL: u32 = 524288;
pub const _MCW_RC: u32 = 768;
pub const _RC_NEAR: u32 = 0;
pub const _RC_DOWN: u32 = 256;
pub const _RC_UP: u32 = 512;
pub const _RC_CHOP: u32 = 768;
pub const _MCW_PC: u32 = 196608;
pub const _PC_64: u32 = 0;
pub const _PC_53: u32 = 65536;
pub const _PC_24: u32 = 131072;
pub const _MCW_IC: u32 = 262144;
pub const _IC_AFFINE: u32 = 262144;
pub const _IC_PROJECTIVE: u32 = 0;
pub const _MCW_DN: u32 = 50331648;
pub const _DN_SAVE: u32 = 0;
pub const _DN_FLUSH: u32 = 16777216;
pub const _DN_FLUSH_OPERANDS_SAVE_RESULTS: u32 = 33554432;
pub const _DN_SAVE_OPERANDS_FLUSH_RESULTS: u32 = 50331648;
pub const _SW_UNEMULATED: u32 = 64;
pub const _SW_SQRTNEG: u32 = 128;
pub const _SW_STACKOVERFLOW: u32 = 512;
pub const _SW_STACKUNDERFLOW: u32 = 1024;
pub const _FPE_INVALID: u32 = 129;
pub const _FPE_DENORMAL: u32 = 130;
pub const _FPE_ZERODIVIDE: u32 = 131;
pub const _FPE_OVERFLOW: u32 = 132;
pub const _FPE_UNDERFLOW: u32 = 133;
pub const _FPE_INEXACT: u32 = 134;
pub const _FPE_UNEMULATED: u32 = 135;
pub const _FPE_SQRTNEG: u32 = 136;
pub const _FPE_STACKOVERFLOW: u32 = 138;
pub const _FPE_STACKUNDERFLOW: u32 = 139;
pub const _FPE_EXPLICITGEN: u32 = 140;
pub const _FPE_MULTIPLE_TRAPS: u32 = 141;
pub const _FPE_MULTIPLE_FAULTS: u32 = 142;
pub const _FPCLASS_SNAN: u32 = 1;
pub const _FPCLASS_QNAN: u32 = 2;
pub const _FPCLASS_NINF: u32 = 4;
pub const _FPCLASS_NN: u32 = 8;
pub const _FPCLASS_ND: u32 = 16;
pub const _FPCLASS_NZ: u32 = 32;
pub const _FPCLASS_PZ: u32 = 64;
pub const _FPCLASS_PD: u32 = 128;
pub const _FPCLASS_PN: u32 = 256;
pub const _FPCLASS_PINF: u32 = 512;
pub const _CW_DEFAULT: u32 = 524319;
pub const DBL_RADIX: u32 = 2;
pub const LDBL_RADIX: u32 = 2;
pub const EM_AMBIGUIOUS: u32 = 2147483648;
pub const EM_AMBIGUOUS: u32 = 2147483648;
pub const MCW_EM: u32 = 524319;
pub const EM_INVALID: u32 = 16;
pub const EM_DENORMAL: u32 = 524288;
pub const EM_ZERODIVIDE: u32 = 8;
pub const EM_OVERFLOW: u32 = 4;
pub const EM_UNDERFLOW: u32 = 2;
pub const EM_INEXACT: u32 = 1;
pub const MCW_IC: u32 = 262144;
pub const IC_AFFINE: u32 = 262144;
pub const IC_PROJECTIVE: u32 = 0;
pub const MCW_RC: u32 = 768;
pub const RC_CHOP: u32 = 768;
pub const RC_UP: u32 = 512;
pub const RC_DOWN: u32 = 256;
pub const RC_NEAR: u32 = 0;
pub const MCW_PC: u32 = 196608;
pub const PC_24: u32 = 131072;
pub const PC_53: u32 = 65536;
pub const PC_64: u32 = 0;
pub const CW_DEFAULT: u32 = 524319;
pub const SW_INVALID: u32 = 16;
pub const SW_DENORMAL: u32 = 524288;
pub const SW_ZERODIVIDE: u32 = 8;
pub const SW_OVERFLOW: u32 = 4;
pub const SW_UNDERFLOW: u32 = 2;
pub const SW_INEXACT: u32 = 1;
pub const SW_UNEMULATED: u32 = 64;
pub const SW_SQRTNEG: u32 = 128;
pub const SW_STACKOVERFLOW: u32 = 512;
pub const SW_STACKUNDERFLOW: u32 = 1024;
pub const FPE_INVALID: u32 = 129;
pub const FPE_DENORMAL: u32 = 130;
pub const FPE_ZERODIVIDE: u32 = 131;
pub const FPE_OVERFLOW: u32 = 132;
pub const FPE_UNDERFLOW: u32 = 133;
pub const FPE_INEXACT: u32 = 134;
pub const FPE_UNEMULATED: u32 = 135;
pub const FPE_SQRTNEG: u32 = 136;
pub const FPE_STACKOVERFLOW: u32 = 138;
pub const FPE_STACKUNDERFLOW: u32 = 139;
pub const FPE_EXPLICITGEN: u32 = 140;
pub const EPERM: u32 = 1;
pub const ENOENT: u32 = 2;
pub const ESRCH: u32 = 3;
pub const EINTR: u32 = 4;
pub const EIO: u32 = 5;
pub const ENXIO: u32 = 6;
pub const E2BIG: u32 = 7;
pub const ENOEXEC: u32 = 8;
pub const EBADF: u32 = 9;
pub const ECHILD: u32 = 10;
pub const EAGAIN: u32 = 11;
pub const ENOMEM: u32 = 12;
pub const EACCES: u32 = 13;
pub const EFAULT: u32 = 14;
pub const EBUSY: u32 = 16;
pub const EEXIST: u32 = 17;
pub const EXDEV: u32 = 18;
pub const ENODEV: u32 = 19;
pub const ENOTDIR: u32 = 20;
pub const EISDIR: u32 = 21;
pub const ENFILE: u32 = 23;
pub const EMFILE: u32 = 24;
pub const ENOTTY: u32 = 25;
pub const EFBIG: u32 = 27;
pub const ENOSPC: u32 = 28;
pub const ESPIPE: u32 = 29;
pub const EROFS: u32 = 30;
pub const EMLINK: u32 = 31;
pub const EPIPE: u32 = 32;
pub const EDOM: u32 = 33;
pub const EDEADLK: u32 = 36;
pub const ENAMETOOLONG: u32 = 38;
pub const ENOLCK: u32 = 39;
pub const ENOSYS: u32 = 40;
pub const ENOTEMPTY: u32 = 41;
pub const EINVAL: u32 = 22;
pub const ERANGE: u32 = 34;
pub const EILSEQ: u32 = 42;
pub const STRUNCATE: u32 = 80;
pub const EDEADLOCK: u32 = 36;
pub const EADDRINUSE: u32 = 100;
pub const EADDRNOTAVAIL: u32 = 101;
pub const EAFNOSUPPORT: u32 = 102;
pub const EALREADY: u32 = 103;
pub const EBADMSG: u32 = 104;
pub const ECANCELED: u32 = 105;
pub const ECONNABORTED: u32 = 106;
pub const ECONNREFUSED: u32 = 107;
pub const ECONNRESET: u32 = 108;
pub const EDESTADDRREQ: u32 = 109;
pub const EHOSTUNREACH: u32 = 110;
pub const EIDRM: u32 = 111;
pub const EINPROGRESS: u32 = 112;
pub const EISCONN: u32 = 113;
pub const ELOOP: u32 = 114;
pub const EMSGSIZE: u32 = 115;
pub const ENETDOWN: u32 = 116;
pub const ENETRESET: u32 = 117;
pub const ENETUNREACH: u32 = 118;
pub const ENOBUFS: u32 = 119;
pub const ENODATA: u32 = 120;
pub const ENOLINK: u32 = 121;
pub const ENOMSG: u32 = 122;
pub const ENOPROTOOPT: u32 = 123;
pub const ENOSR: u32 = 124;
pub const ENOSTR: u32 = 125;
pub const ENOTCONN: u32 = 126;
pub const ENOTRECOVERABLE: u32 = 127;
pub const ENOTSOCK: u32 = 128;
pub const ENOTSUP: u32 = 129;
pub const EOPNOTSUPP: u32 = 130;
pub const EOTHER: u32 = 131;
pub const EOVERFLOW: u32 = 132;
pub const EOWNERDEAD: u32 = 133;
pub const EPROTO: u32 = 134;
pub const EPROTONOSUPPORT: u32 = 135;
pub const EPROTOTYPE: u32 = 136;
pub const ETIME: u32 = 137;
pub const ETIMEDOUT: u32 = 138;
pub const ETXTBSY: u32 = 139;
pub const EWOULDBLOCK: u32 = 140;
pub const _NLSCMPERROR: u32 = 2147483647;
pub const IMGUI_VERSION: &'static [u8; 9usize] = b"1.80 WIP\0";
pub const IMGUI_VERSION_NUM: u32 = 17906;
pub const IMGUI_PAYLOAD_TYPE_COLOR_3F: &'static [u8; 7usize] = b"_COL3F\0";
pub const IMGUI_PAYLOAD_TYPE_COLOR_4F: &'static [u8; 7usize] = b"_COL4F\0";
pub const IM_UNICODE_CODEPOINT_INVALID: u32 = 65533;
pub const IM_UNICODE_CODEPOINT_MAX: u32 = 65535;
pub const IM_COL32_R_SHIFT: u32 = 0;
pub const IM_COL32_G_SHIFT: u32 = 8;
pub const IM_COL32_B_SHIFT: u32 = 16;
pub const IM_COL32_A_SHIFT: u32 = 24;
pub const IM_COL32_A_MASK: u32 = 4278190080;
pub const IM_DRAWLIST_TEX_LINES_WIDTH_MAX: u32 = 63;
pub const _CRT_INTERNAL_STDIO_SYMBOL_PREFIX: &'static [u8; 1usize] = b"\0";
pub const _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION: u32 = 1;
pub const _CRT_INTERNAL_PRINTF_STANDARD_SNPRINTF_BEHAVIOR: u32 = 2;
pub const _CRT_INTERNAL_PRINTF_LEGACY_WIDE_SPECIFIERS: u32 = 4;
pub const _CRT_INTERNAL_PRINTF_LEGACY_MSVCRT_COMPATIBILITY: u32 = 8;
pub const _CRT_INTERNAL_PRINTF_LEGACY_THREE_DIGIT_EXPONENTS: u32 = 16;
pub const _CRT_INTERNAL_SCANF_SECURECRT: u32 = 1;
pub const _CRT_INTERNAL_SCANF_LEGACY_WIDE_SPECIFIERS: u32 = 2;
pub const _CRT_INTERNAL_SCANF_LEGACY_MSVCRT_COMPATIBILITY: u32 = 4;
pub const BUFSIZ: u32 = 512;
pub const _NSTREAM_: u32 = 512;
pub const _IOB_ENTRIES: u32 = 3;
pub const EOF: i32 = -1;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 64;
pub const _IONBF: u32 = 4;
pub const L_tmpnam: u32 = 260;
pub const L_tmpnam_s: u32 = 260;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const SEEK_SET: u32 = 0;
pub const FILENAME_MAX: u32 = 260;
pub const FOPEN_MAX: u32 = 20;
pub const _SYS_OPEN: u32 = 20;
pub const TMP_MAX: u32 = 2147483647;
pub const TMP_MAX_S: u32 = 2147483647;
pub const _TMP_MAX_S: u32 = 2147483647;
pub const SYS_OPEN: u32 = 20;
pub const _MAX_ITOSTR_BASE16_COUNT: u32 = 9;
pub const _MAX_ITOSTR_BASE10_COUNT: u32 = 12;
pub const _MAX_ITOSTR_BASE8_COUNT: u32 = 12;
pub const _MAX_ITOSTR_BASE2_COUNT: u32 = 33;
pub const _MAX_LTOSTR_BASE16_COUNT: u32 = 9;
pub const _MAX_LTOSTR_BASE10_COUNT: u32 = 12;
pub const _MAX_LTOSTR_BASE8_COUNT: u32 = 12;
pub const _MAX_LTOSTR_BASE2_COUNT: u32 = 33;
pub const _MAX_ULTOSTR_BASE16_COUNT: u32 = 9;
pub const _MAX_ULTOSTR_BASE10_COUNT: u32 = 11;
pub const _MAX_ULTOSTR_BASE8_COUNT: u32 = 12;
pub const _MAX_ULTOSTR_BASE2_COUNT: u32 = 33;
pub const _MAX_I64TOSTR_BASE16_COUNT: u32 = 17;
pub const _MAX_I64TOSTR_BASE10_COUNT: u32 = 21;
pub const _MAX_I64TOSTR_BASE8_COUNT: u32 = 23;
pub const _MAX_I64TOSTR_BASE2_COUNT: u32 = 65;
pub const _MAX_U64TOSTR_BASE16_COUNT: u32 = 17;
pub const _MAX_U64TOSTR_BASE10_COUNT: u32 = 21;
pub const _MAX_U64TOSTR_BASE8_COUNT: u32 = 23;
pub const _MAX_U64TOSTR_BASE2_COUNT: u32 = 65;
pub const CHAR_BIT: u32 = 8;
pub const SCHAR_MIN: i32 = -128;
pub const SCHAR_MAX: u32 = 127;
pub const UCHAR_MAX: u32 = 255;
pub const CHAR_MIN: i32 = -128;
pub const CHAR_MAX: u32 = 127;
pub const MB_LEN_MAX: u32 = 5;
pub const SHRT_MIN: i32 = -32768;
pub const SHRT_MAX: u32 = 32767;
pub const USHRT_MAX: u32 = 65535;
pub const INT_MIN: i32 = -2147483648;
pub const INT_MAX: u32 = 2147483647;
pub const UINT_MAX: u32 = 4294967295;
pub const LONG_MIN: i32 = -2147483648;
pub const LONG_MAX: u32 = 2147483647;
pub const ULONG_MAX: u32 = 4294967295;
pub const EXIT_SUCCESS: u32 = 0;
pub const EXIT_FAILURE: u32 = 1;
pub const _WRITE_ABORT_MSG: u32 = 1;
pub const _CALL_REPORTFAULT: u32 = 2;
pub const _OUT_TO_DEFAULT: u32 = 0;
pub const _OUT_TO_STDERR: u32 = 1;
pub const _OUT_TO_MSGBOX: u32 = 2;
pub const _REPORT_ERRMODE: u32 = 3;
pub const RAND_MAX: u32 = 32767;
pub const _CVTBUFSIZE: u32 = 349;
pub const _MAX_PATH: u32 = 260;
pub const _MAX_DRIVE: u32 = 3;
pub const _MAX_DIR: u32 = 256;
pub const _MAX_FNAME: u32 = 256;
pub const _MAX_EXT: u32 = 256;
pub const _MAX_ENV: u32 = 32767;
pub const _DOMAIN: u32 = 1;
pub const _SING: u32 = 2;
pub const _OVERFLOW: u32 = 3;
pub const _UNDERFLOW: u32 = 4;
pub const _TLOSS: u32 = 5;
pub const _PLOSS: u32 = 6;
pub const _HUGE_ENUF : f64 = 1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 ;
pub const _DENORM: i32 = -2;
pub const _FINITE: i32 = -1;
pub const _INFCODE: u32 = 1;
pub const _NANCODE: u32 = 2;
pub const FP_INFINITE: u32 = 1;
pub const FP_NAN: u32 = 2;
pub const FP_NORMAL: i32 = -1;
pub const FP_SUBNORMAL: i32 = -2;
pub const FP_ZERO: u32 = 0;
pub const _C2: u32 = 1;
pub const FP_ILOGB0: i32 = -2147483648;
pub const FP_ILOGBNAN: u32 = 2147483647;
pub const MATH_ERRNO: u32 = 1;
pub const MATH_ERREXCEPT: u32 = 2;
pub const math_errhandling: u32 = 3;
pub const _FE_DIVBYZERO: u32 = 4;
pub const _FE_INEXACT: u32 = 32;
pub const _FE_INVALID: u32 = 1;
pub const _FE_OVERFLOW: u32 = 8;
pub const _FE_UNDERFLOW: u32 = 16;
pub const _D0_C: u32 = 3;
pub const _D1_C: u32 = 2;
pub const _D2_C: u32 = 1;
pub const _D3_C: u32 = 0;
pub const _DBIAS: u32 = 1022;
pub const _DOFF: u32 = 4;
pub const _F0_C: u32 = 1;
pub const _F1_C: u32 = 0;
pub const _FBIAS: u32 = 126;
pub const _FOFF: u32 = 7;
pub const _FRND: u32 = 1;
pub const _L0_C: u32 = 3;
pub const _L1_C: u32 = 2;
pub const _L2_C: u32 = 1;
pub const _L3_C: u32 = 0;
pub const _LBIAS: u32 = 1022;
pub const _LOFF: u32 = 4;
pub const _FP_LT: u32 = 1;
pub const _FP_EQ: u32 = 2;
pub const _FP_GT: u32 = 4;
pub const DOMAIN: u32 = 1;
pub const SING: u32 = 2;
pub const OVERFLOW: u32 = 3;
pub const UNDERFLOW: u32 = 4;
pub const TLOSS: u32 = 5;
pub const PLOSS: u32 = 6;
pub const STB_TEXTEDIT_GETWIDTH_NEWLINE: f64 = -1.0;
pub const STB_TEXTEDIT_UNDOSTATECOUNT: u32 = 99;
pub const STB_TEXTEDIT_UNDOCHARCOUNT: u32 = 999;
pub const IM_PI: f64 = 3.141592653589793;
pub const IM_NEWLINE: &'static [u8; 3usize] = b"\r\n\0";
pub const IM_TABSIZE: u32 = 4;
pub const IM_DRAWLIST_CIRCLE_AUTO_SEGMENT_MIN: u32 = 12;
pub const IM_DRAWLIST_CIRCLE_AUTO_SEGMENT_MAX: u32 = 512;
pub const IM_DRAWLIST_ARCFAST_TESSELLATION_MULTIPLIER: u32 = 1;
pub type va_list = *mut ::std::os::raw::c_char;
extern "C" {
    pub fn __va_start(arg1: *mut va_list, ...);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __vcrt_va_list_is_reference {
    pub _address: u8,
}
pub const __the_value: bool = false;
pub type __vcrt_va_list_is_reference__bindgen_ty_1 = bool;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __vcrt_assert_va_start_is_not_reference {
    pub _address: u8,
}
pub type size_t = ::std::os::raw::c_ulonglong;
pub type __vcrt_bool = bool;
extern "C" {
    pub fn __security_init_cookie();
}
extern "C" {
    pub fn __security_check_cookie(_StackCookie: usize);
}
extern "C" {
    pub fn __report_gsfailure(_StackCookie: usize);
}
extern "C" {
    pub static mut __security_cookie: usize;
}
pub type __crt_bool = bool;
extern "C" {
    pub fn _invalid_parameter_noinfo();
}
extern "C" {
    pub fn _invalid_parameter_noinfo_noreturn();
}
extern "C" {
    pub fn _invoke_watson(
        _Expression: *const u16,
        _FunctionName: *const u16,
        _FileName: *const u16,
        _LineNo: ::std::os::raw::c_uint,
        _Reserved: usize,
    );
}
pub type errno_t = ::std::os::raw::c_int;
pub type wint_t = ::std::os::raw::c_ushort;
pub type wctype_t = ::std::os::raw::c_ushort;
pub type __time32_t = ::std::os::raw::c_long;
pub type __time64_t = ::std::os::raw::c_longlong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_data_public {
    pub _locale_pctype: *const ::std::os::raw::c_ushort,
    pub _locale_mb_cur_max: ::std::os::raw::c_int,
    pub _locale_lc_codepage: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___crt_locale_data_public() {
    assert_eq!(
        ::std::mem::size_of::<__crt_locale_data_public>(),
        16usize,
        concat!("Size of: ", stringify!(__crt_locale_data_public))
    );
    assert_eq!(
        ::std::mem::align_of::<__crt_locale_data_public>(),
        8usize,
        concat!("Alignment of ", stringify!(__crt_locale_data_public))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__crt_locale_data_public>()))._locale_pctype as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_data_public),
            "::",
            stringify!(_locale_pctype)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__crt_locale_data_public>()))._locale_mb_cur_max as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_data_public),
            "::",
            stringify!(_locale_mb_cur_max)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__crt_locale_data_public>()))._locale_lc_codepage as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_data_public),
            "::",
            stringify!(_locale_lc_codepage)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_pointers {
    pub locinfo: *mut __crt_locale_data,
    pub mbcinfo: *mut __crt_multibyte_data,
}
#[test]
fn bindgen_test_layout___crt_locale_pointers() {
    assert_eq!(
        ::std::mem::size_of::<__crt_locale_pointers>(),
        16usize,
        concat!("Size of: ", stringify!(__crt_locale_pointers))
    );
    assert_eq!(
        ::std::mem::align_of::<__crt_locale_pointers>(),
        8usize,
        concat!("Alignment of ", stringify!(__crt_locale_pointers))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__crt_locale_pointers>())).locinfo as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_pointers),
            "::",
            stringify!(locinfo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__crt_locale_pointers>())).mbcinfo as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_pointers),
            "::",
            stringify!(mbcinfo)
        )
    );
}
pub type _locale_t = *mut __crt_locale_pointers;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _Mbstatet {
    pub _Wchar: ::std::os::raw::c_ulong,
    pub _Byte: ::std::os::raw::c_ushort,
    pub _State: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout__Mbstatet() {
    assert_eq!(
        ::std::mem::size_of::<_Mbstatet>(),
        8usize,
        concat!("Size of: ", stringify!(_Mbstatet))
    );
    assert_eq!(
        ::std::mem::align_of::<_Mbstatet>(),
        4usize,
        concat!("Alignment of ", stringify!(_Mbstatet))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Mbstatet>()))._Wchar as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_Mbstatet),
            "::",
            stringify!(_Wchar)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Mbstatet>()))._Byte as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_Mbstatet),
            "::",
            stringify!(_Byte)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Mbstatet>()))._State as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_Mbstatet),
            "::",
            stringify!(_State)
        )
    );
}
pub type mbstate_t = _Mbstatet;
pub type time_t = __time64_t;
pub type rsize_t = size_t;
extern "C" {
    pub fn _clearfp() -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _controlfp(
        _NewValue: ::std::os::raw::c_uint,
        _Mask: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _set_controlfp(_NewValue: ::std::os::raw::c_uint, _Mask: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn _controlfp_s(
        _CurrentState: *mut ::std::os::raw::c_uint,
        _NewValue: ::std::os::raw::c_uint,
        _Mask: ::std::os::raw::c_uint,
    ) -> errno_t;
}
extern "C" {
    pub fn _statusfp() -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _fpreset();
}
extern "C" {
    pub fn _control87(
        _NewValue: ::std::os::raw::c_uint,
        _Mask: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn __fpecode() -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn __fpe_flt_rounds() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _copysign(_Number: f64, _Sign: f64) -> f64;
}
extern "C" {
    pub fn _chgsign(_X: f64) -> f64;
}
extern "C" {
    pub fn _scalb(_X: f64, _Y: ::std::os::raw::c_long) -> f64;
}
extern "C" {
    pub fn _logb(_X: f64) -> f64;
}
extern "C" {
    pub fn _nextafter(_X: f64, _Y: f64) -> f64;
}
extern "C" {
    pub fn _finite(_X: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _isnan(_X: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fpclass(_X: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _scalbf(_X: f32, _Y: ::std::os::raw::c_long) -> f32;
}
extern "C" {
    pub fn fpreset();
}
pub type std_nullptr_t = *const ::std::os::raw::c_void;
extern "C" {
    pub fn _errno() -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn _set_errno(_Value: ::std::os::raw::c_int) -> errno_t;
}
extern "C" {
    pub fn _get_errno(_Value: *mut ::std::os::raw::c_int) -> errno_t;
}
extern "C" {
    pub fn __threadid() -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn __threadhandle() -> usize;
}
extern "C" {
    pub fn __doserrno() -> *mut ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn _set_doserrno(_Value: ::std::os::raw::c_ulong) -> errno_t;
}
extern "C" {
    pub fn _get_doserrno(_Value: *mut ::std::os::raw::c_ulong) -> errno_t;
}
extern "C" {
    pub fn memchr(
        _Buf: *const ::std::os::raw::c_void,
        _Val: ::std::os::raw::c_int,
        _MaxCount: size_t,
    ) -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn memcmp(
        _Buf1: *const ::std::os::raw::c_void,
        _Buf2: *const ::std::os::raw::c_void,
        _Size: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn memcpy(
        _Dst: *mut ::std::os::raw::c_void,
        _Src: *const ::std::os::raw::c_void,
        _Size: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memmove(
        _Dst: *mut ::std::os::raw::c_void,
        _Src: *const ::std::os::raw::c_void,
        _Size: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memset(
        _Dst: *mut ::std::os::raw::c_void,
        _Val: ::std::os::raw::c_int,
        _Size: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn strchr(
        _Str: *const ::std::os::raw::c_char,
        _Val: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn strrchr(
        _Str: *const ::std::os::raw::c_char,
        _Ch: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn strstr(
        _Str: *const ::std::os::raw::c_char,
        _SubStr: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn wcschr(_Str: *const u16, _Ch: u16) -> *const u16;
}
extern "C" {
    pub fn wcsrchr(_Str: *const u16, _Ch: u16) -> *const u16;
}
extern "C" {
    pub fn wcsstr(_Str: *const u16, _SubStr: *const u16) -> *const u16;
}
extern "C" {
    pub fn _memicmp(
        _Buf1: *const ::std::os::raw::c_void,
        _Buf2: *const ::std::os::raw::c_void,
        _Size: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _memicmp_l(
        _Buf1: *const ::std::os::raw::c_void,
        _Buf2: *const ::std::os::raw::c_void,
        _Size: size_t,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn memccpy(
        _Dst: *mut ::std::os::raw::c_void,
        _Src: *const ::std::os::raw::c_void,
        _Val: ::std::os::raw::c_int,
        _Size: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memicmp(
        _Buf1: *const ::std::os::raw::c_void,
        _Buf2: *const ::std::os::raw::c_void,
        _Size: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcscat_s(_Destination: *mut u16, _SizeInWords: rsize_t, _Source: *const u16) -> errno_t;
}
extern "C" {
    pub fn wcscpy_s(_Destination: *mut u16, _SizeInWords: rsize_t, _Source: *const u16) -> errno_t;
}
extern "C" {
    pub fn wcsncat_s(
        _Destination: *mut u16,
        _SizeInWords: rsize_t,
        _Source: *const u16,
        _MaxCount: rsize_t,
    ) -> errno_t;
}
extern "C" {
    pub fn wcsncpy_s(
        _Destination: *mut u16,
        _SizeInWords: rsize_t,
        _Source: *const u16,
        _MaxCount: rsize_t,
    ) -> errno_t;
}
extern "C" {
    pub fn wcstok_s(_String: *mut u16, _Delimiter: *const u16, _Context: *mut *mut u16)
        -> *mut u16;
}
extern "C" {
    pub fn _wcsdup(_String: *const u16) -> *mut u16;
}
extern "C" {
    pub fn wcscat(_Destination: *mut u16, _Source: *const u16) -> *mut u16;
}
extern "C" {
    pub fn wcscmp(_String1: *const u16, _String2: *const u16) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcscpy(_Destination: *mut u16, _Source: *const u16) -> *mut u16;
}
extern "C" {
    pub fn wcscspn(_String: *const u16, _Control: *const u16) -> size_t;
}
extern "C" {
    pub fn wcslen(_String: *const u16) -> size_t;
}
extern "C" {
    pub fn wcsnlen(_Source: *const u16, _MaxCount: size_t) -> size_t;
}
extern "C" {
    pub fn wcsncat(_Destination: *mut u16, _Source: *const u16, _Count: size_t) -> *mut u16;
}
extern "C" {
    pub fn wcsncmp(
        _String1: *const u16,
        _String2: *const u16,
        _MaxCount: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsncpy(_Destination: *mut u16, _Source: *const u16, _Count: size_t) -> *mut u16;
}
extern "C" {
    pub fn wcspbrk(_String: *const u16, _Control: *const u16) -> *const u16;
}
extern "C" {
    pub fn wcsspn(_String: *const u16, _Control: *const u16) -> size_t;
}
extern "C" {
    pub fn wcstok(_String: *mut u16, _Delimiter: *const u16, _Context: *mut *mut u16) -> *mut u16;
}
extern "C" {
    pub fn _wcserror(_ErrorNumber: ::std::os::raw::c_int) -> *mut u16;
}
extern "C" {
    pub fn _wcserror_s(
        _Buffer: *mut u16,
        _SizeInWords: size_t,
        _ErrorNumber: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn __wcserror(_String: *const u16) -> *mut u16;
}
extern "C" {
    pub fn __wcserror_s(
        _Buffer: *mut u16,
        _SizeInWords: size_t,
        _ErrorMessage: *const u16,
    ) -> errno_t;
}
extern "C" {
    pub fn _wcsicmp(_String1: *const u16, _String2: *const u16) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wcsicmp_l(
        _String1: *const u16,
        _String2: *const u16,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wcsnicmp(
        _String1: *const u16,
        _String2: *const u16,
        _MaxCount: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wcsnicmp_l(
        _String1: *const u16,
        _String2: *const u16,
        _MaxCount: size_t,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wcsnset_s(
        _Destination: *mut u16,
        _SizeInWords: size_t,
        _Value: u16,
        _MaxCount: size_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wcsnset(_String: *mut u16, _Value: u16, _MaxCount: size_t) -> *mut u16;
}
extern "C" {
    pub fn _wcsrev(_String: *mut u16) -> *mut u16;
}
extern "C" {
    pub fn _wcsset_s(_Destination: *mut u16, _SizeInWords: size_t, _Value: u16) -> errno_t;
}
extern "C" {
    pub fn _wcsset(_String: *mut u16, _Value: u16) -> *mut u16;
}
extern "C" {
    pub fn _wcslwr_s(_String: *mut u16, _SizeInWords: size_t) -> errno_t;
}
extern "C" {
    pub fn _wcslwr(_String: *mut u16) -> *mut u16;
}
extern "C" {
    pub fn _wcslwr_s_l(_String: *mut u16, _SizeInWords: size_t, _Locale: _locale_t) -> errno_t;
}
extern "C" {
    pub fn _wcslwr_l(_String: *mut u16, _Locale: _locale_t) -> *mut u16;
}
extern "C" {
    pub fn _wcsupr_s(_String: *mut u16, _Size: size_t) -> errno_t;
}
extern "C" {
    pub fn _wcsupr(_String: *mut u16) -> *mut u16;
}
extern "C" {
    pub fn _wcsupr_s_l(_String: *mut u16, _Size: size_t, _Locale: _locale_t) -> errno_t;
}
extern "C" {
    pub fn _wcsupr_l(_String: *mut u16, _Locale: _locale_t) -> *mut u16;
}
extern "C" {
    pub fn wcsxfrm(_Destination: *mut u16, _Source: *const u16, _MaxCount: size_t) -> size_t;
}
extern "C" {
    pub fn _wcsxfrm_l(
        _Destination: *mut u16,
        _Source: *const u16,
        _MaxCount: size_t,
        _Locale: _locale_t,
    ) -> size_t;
}
extern "C" {
    pub fn wcscoll(_String1: *const u16, _String2: *const u16) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wcscoll_l(
        _String1: *const u16,
        _String2: *const u16,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wcsicoll(_String1: *const u16, _String2: *const u16) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wcsicoll_l(
        _String1: *const u16,
        _String2: *const u16,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wcsncoll(
        _String1: *const u16,
        _String2: *const u16,
        _MaxCount: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wcsncoll_l(
        _String1: *const u16,
        _String2: *const u16,
        _MaxCount: size_t,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wcsnicoll(
        _String1: *const u16,
        _String2: *const u16,
        _MaxCount: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wcsnicoll_l(
        _String1: *const u16,
        _String2: *const u16,
        _MaxCount: size_t,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsdup(_String: *const u16) -> *mut u16;
}
extern "C" {
    pub fn wcsicmp(_String1: *const u16, _String2: *const u16) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsnicmp(
        _String1: *const u16,
        _String2: *const u16,
        _MaxCount: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsnset(_String: *mut u16, _Value: u16, _MaxCount: size_t) -> *mut u16;
}
extern "C" {
    pub fn wcsrev(_String: *mut u16) -> *mut u16;
}
extern "C" {
    pub fn wcsset(_String: *mut u16, _Value: u16) -> *mut u16;
}
extern "C" {
    pub fn wcslwr(_String: *mut u16) -> *mut u16;
}
extern "C" {
    pub fn wcsupr(_String: *mut u16) -> *mut u16;
}
extern "C" {
    pub fn wcsicoll(_String1: *const u16, _String2: *const u16) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcpy_s(
        _Destination: *mut ::std::os::raw::c_char,
        _SizeInBytes: rsize_t,
        _Source: *const ::std::os::raw::c_char,
    ) -> errno_t;
}
extern "C" {
    pub fn strcat_s(
        _Destination: *mut ::std::os::raw::c_char,
        _SizeInBytes: rsize_t,
        _Source: *const ::std::os::raw::c_char,
    ) -> errno_t;
}
extern "C" {
    pub fn strerror_s(
        _Buffer: *mut ::std::os::raw::c_char,
        _SizeInBytes: size_t,
        _ErrorNumber: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn strncat_s(
        _Destination: *mut ::std::os::raw::c_char,
        _SizeInBytes: rsize_t,
        _Source: *const ::std::os::raw::c_char,
        _MaxCount: rsize_t,
    ) -> errno_t;
}
extern "C" {
    pub fn strncpy_s(
        _Destination: *mut ::std::os::raw::c_char,
        _SizeInBytes: rsize_t,
        _Source: *const ::std::os::raw::c_char,
        _MaxCount: rsize_t,
    ) -> errno_t;
}
extern "C" {
    pub fn strtok_s(
        _String: *mut ::std::os::raw::c_char,
        _Delimiter: *const ::std::os::raw::c_char,
        _Context: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _memccpy(
        _Dst: *mut ::std::os::raw::c_void,
        _Src: *const ::std::os::raw::c_void,
        _Val: ::std::os::raw::c_int,
        _MaxCount: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn strcat(
        _Destination: *mut ::std::os::raw::c_char,
        _Source: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcmp(
        _Str1: *const ::std::os::raw::c_char,
        _Str2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _strcmpi(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcoll(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _strcoll_l(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcpy(
        _Destination: *mut ::std::os::raw::c_char,
        _Source: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcspn(
        _Str: *const ::std::os::raw::c_char,
        _Control: *const ::std::os::raw::c_char,
    ) -> size_t;
}
extern "C" {
    pub fn _strdup(_Source: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _strerror(_ErrorMessage: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _strerror_s(
        _Buffer: *mut ::std::os::raw::c_char,
        _SizeInBytes: size_t,
        _ErrorMessage: *const ::std::os::raw::c_char,
    ) -> errno_t;
}
extern "C" {
    pub fn strerror(_ErrorMessage: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _stricmp(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _stricoll(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _stricoll_l(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _stricmp_l(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strlen(_Str: *const ::std::os::raw::c_char) -> size_t;
}
extern "C" {
    pub fn _strlwr_s(_String: *mut ::std::os::raw::c_char, _Size: size_t) -> errno_t;
}
extern "C" {
    pub fn _strlwr(_String: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _strlwr_s_l(
        _String: *mut ::std::os::raw::c_char,
        _Size: size_t,
        _Locale: _locale_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _strlwr_l(
        _String: *mut ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncat(
        _Destination: *mut ::std::os::raw::c_char,
        _Source: *const ::std::os::raw::c_char,
        _Count: size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncmp(
        _Str1: *const ::std::os::raw::c_char,
        _Str2: *const ::std::os::raw::c_char,
        _MaxCount: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _strnicmp(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
        _MaxCount: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _strnicmp_l(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
        _MaxCount: size_t,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _strnicoll(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
        _MaxCount: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _strnicoll_l(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
        _MaxCount: size_t,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _strncoll(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
        _MaxCount: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _strncoll_l(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
        _MaxCount: size_t,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __strncnt(_String: *const ::std::os::raw::c_char, _Count: size_t) -> size_t;
}
extern "C" {
    pub fn strncpy(
        _Destination: *mut ::std::os::raw::c_char,
        _Source: *const ::std::os::raw::c_char,
        _Count: size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strnlen(_String: *const ::std::os::raw::c_char, _MaxCount: size_t) -> size_t;
}
extern "C" {
    pub fn _strnset_s(
        _String: *mut ::std::os::raw::c_char,
        _SizeInBytes: size_t,
        _Value: ::std::os::raw::c_int,
        _MaxCount: size_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _strnset(
        _Destination: *mut ::std::os::raw::c_char,
        _Value: ::std::os::raw::c_int,
        _Count: size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strpbrk(
        _Str: *const ::std::os::raw::c_char,
        _Control: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn _strrev(_Str: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _strset_s(
        _Destination: *mut ::std::os::raw::c_char,
        _DestinationSize: size_t,
        _Value: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _strset(
        _Destination: *mut ::std::os::raw::c_char,
        _Value: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strspn(
        _Str: *const ::std::os::raw::c_char,
        _Control: *const ::std::os::raw::c_char,
    ) -> size_t;
}
extern "C" {
    pub fn strtok(
        _String: *mut ::std::os::raw::c_char,
        _Delimiter: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _strupr_s(_String: *mut ::std::os::raw::c_char, _Size: size_t) -> errno_t;
}
extern "C" {
    pub fn _strupr(_String: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _strupr_s_l(
        _String: *mut ::std::os::raw::c_char,
        _Size: size_t,
        _Locale: _locale_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _strupr_l(
        _String: *mut ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strxfrm(
        _Destination: *mut ::std::os::raw::c_char,
        _Source: *const ::std::os::raw::c_char,
        _MaxCount: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn _strxfrm_l(
        _Destination: *mut ::std::os::raw::c_char,
        _Source: *const ::std::os::raw::c_char,
        _MaxCount: size_t,
        _Locale: _locale_t,
    ) -> size_t;
}
extern "C" {
    pub fn strdup(_String: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcmpi(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn stricmp(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strlwr(_String: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strnicmp(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
        _MaxCount: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strnset(
        _String: *mut ::std::os::raw::c_char,
        _Value: ::std::os::raw::c_int,
        _MaxCount: size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strrev(_String: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strset(
        _String: *mut ::std::os::raw::c_char,
        _Value: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strupr(_String: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _wassert(_Message: *const u16, _File: *const u16, _Line: ::std::os::raw::c_uint);
}
pub type ImGuiCol = ::std::os::raw::c_int;
pub type ImGuiCond = ::std::os::raw::c_int;
pub type ImGuiDataType = ::std::os::raw::c_int;
pub type ImGuiDir = ::std::os::raw::c_int;
pub type ImGuiKey = ::std::os::raw::c_int;
pub type ImGuiNavInput = ::std::os::raw::c_int;
pub type ImGuiMouseButton = ::std::os::raw::c_int;
pub type ImGuiMouseCursor = ::std::os::raw::c_int;
pub type ImGuiStyleVar = ::std::os::raw::c_int;
pub type ImDrawCornerFlags = ::std::os::raw::c_int;
pub type ImDrawListFlags = ::std::os::raw::c_int;
pub type ImFontAtlasFlags = ::std::os::raw::c_int;
pub type ImGuiBackendFlags = ::std::os::raw::c_int;
pub type ImGuiButtonFlags = ::std::os::raw::c_int;
pub type ImGuiColorEditFlags = ::std::os::raw::c_int;
pub type ImGuiConfigFlags = ::std::os::raw::c_int;
pub type ImGuiComboFlags = ::std::os::raw::c_int;
pub type ImGuiDragDropFlags = ::std::os::raw::c_int;
pub type ImGuiFocusedFlags = ::std::os::raw::c_int;
pub type ImGuiHoveredFlags = ::std::os::raw::c_int;
pub type ImGuiInputTextFlags = ::std::os::raw::c_int;
pub type ImGuiKeyModFlags = ::std::os::raw::c_int;
pub type ImGuiPopupFlags = ::std::os::raw::c_int;
pub type ImGuiSelectableFlags = ::std::os::raw::c_int;
pub type ImGuiSliderFlags = ::std::os::raw::c_int;
pub type ImGuiTabBarFlags = ::std::os::raw::c_int;
pub type ImGuiTabItemFlags = ::std::os::raw::c_int;
pub type ImGuiTreeNodeFlags = ::std::os::raw::c_int;
pub type ImGuiWindowFlags = ::std::os::raw::c_int;
pub type ImTextureID = *mut ::std::os::raw::c_void;
pub type ImGuiID = ::std::os::raw::c_uint;
pub type ImGuiInputTextCallback = ::std::option::Option<
    unsafe extern "C" fn(data: *mut ImGuiInputTextCallbackData) -> ::std::os::raw::c_int,
>;
pub type ImGuiSizeCallback =
    ::std::option::Option<unsafe extern "C" fn(data: *mut ImGuiSizeCallbackData)>;
pub type ImWchar16 = ::std::os::raw::c_ushort;
pub type ImWchar32 = ::std::os::raw::c_uint;
pub type ImWchar = ImWchar16;
pub type ImS8 = ::std::os::raw::c_schar;
pub type ImU8 = ::std::os::raw::c_uchar;
pub type ImS16 = ::std::os::raw::c_short;
pub type ImU16 = ::std::os::raw::c_ushort;
pub type ImS32 = ::std::os::raw::c_int;
pub type ImU32 = ::std::os::raw::c_uint;
pub type ImS64 = ::std::os::raw::c_longlong;
pub type ImU64 = ::std::os::raw::c_ulonglong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVec2 {
    pub x: f32,
    pub y: f32,
}
#[test]
fn bindgen_test_layout_ImVec2() {
    assert_eq!(
        ::std::mem::size_of::<ImVec2>(),
        8usize,
        concat!("Size of: ", stringify!(ImVec2))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVec2>(),
        4usize,
        concat!("Alignment of ", stringify!(ImVec2))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVec2>())).x as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(ImVec2), "::", stringify!(x))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVec2>())).y as *const _ as usize },
        4usize,
        concat!("Offset of field: ", stringify!(ImVec2), "::", stringify!(y))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVec4 {
    pub x: f32,
    pub y: f32,
    pub z: f32,
    pub w: f32,
}
#[test]
fn bindgen_test_layout_ImVec4() {
    assert_eq!(
        ::std::mem::size_of::<ImVec4>(),
        16usize,
        concat!("Size of: ", stringify!(ImVec4))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVec4>(),
        4usize,
        concat!("Alignment of ", stringify!(ImVec4))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVec4>())).x as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(ImVec4), "::", stringify!(x))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVec4>())).y as *const _ as usize },
        4usize,
        concat!("Offset of field: ", stringify!(ImVec4), "::", stringify!(y))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVec4>())).z as *const _ as usize },
        8usize,
        concat!("Offset of field: ", stringify!(ImVec4), "::", stringify!(z))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVec4>())).w as *const _ as usize },
        12usize,
        concat!("Offset of field: ", stringify!(ImVec4), "::", stringify!(w))
    );
}
extern "C" {
    #[link_name = "\u{1}?CreateContext@ImGui@@YAPEAUImGuiContext@@PEAUImFontAtlas@@@Z"]
    pub fn ImGui_CreateContext(shared_font_atlas: *mut ImFontAtlas) -> *mut ImGuiContext;
}
extern "C" {
    #[link_name = "\u{1}?DestroyContext@ImGui@@YAXPEAUImGuiContext@@@Z"]
    pub fn ImGui_DestroyContext(ctx: *mut ImGuiContext);
}
extern "C" {
    #[link_name = "\u{1}?GetCurrentContext@ImGui@@YAPEAUImGuiContext@@XZ"]
    pub fn ImGui_GetCurrentContext() -> *mut ImGuiContext;
}
extern "C" {
    #[link_name = "\u{1}?SetCurrentContext@ImGui@@YAXPEAUImGuiContext@@@Z"]
    pub fn ImGui_SetCurrentContext(ctx: *mut ImGuiContext);
}
extern "C" {
    #[link_name = "\u{1}?GetIO@ImGui@@YAAEAUImGuiIO@@XZ"]
    pub fn ImGui_GetIO() -> *mut ImGuiIO;
}
extern "C" {
    #[link_name = "\u{1}?GetStyle@ImGui@@YAAEAUImGuiStyle@@XZ"]
    pub fn ImGui_GetStyle() -> *mut ImGuiStyle;
}
extern "C" {
    #[link_name = "\u{1}?NewFrame@ImGui@@YAXXZ"]
    pub fn ImGui_NewFrame();
}
extern "C" {
    #[link_name = "\u{1}?EndFrame@ImGui@@YAXXZ"]
    pub fn ImGui_EndFrame();
}
extern "C" {
    #[link_name = "\u{1}?Render@ImGui@@YAXXZ"]
    pub fn ImGui_Render();
}
extern "C" {
    #[link_name = "\u{1}?GetDrawData@ImGui@@YAPEAUImDrawData@@XZ"]
    pub fn ImGui_GetDrawData() -> *mut ImDrawData;
}
extern "C" {
    #[link_name = "\u{1}?ShowDemoWindow@ImGui@@YAXPEA_N@Z"]
    pub fn ImGui_ShowDemoWindow(p_open: *mut bool);
}
extern "C" {
    #[link_name = "\u{1}?ShowAboutWindow@ImGui@@YAXPEA_N@Z"]
    pub fn ImGui_ShowAboutWindow(p_open: *mut bool);
}
extern "C" {
    #[link_name = "\u{1}?ShowMetricsWindow@ImGui@@YAXPEA_N@Z"]
    pub fn ImGui_ShowMetricsWindow(p_open: *mut bool);
}
extern "C" {
    #[link_name = "\u{1}?ShowStyleEditor@ImGui@@YAXPEAUImGuiStyle@@@Z"]
    pub fn ImGui_ShowStyleEditor(ref_: *mut ImGuiStyle);
}
extern "C" {
    #[link_name = "\u{1}?ShowStyleSelector@ImGui@@YA_NPEBD@Z"]
    pub fn ImGui_ShowStyleSelector(label: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?ShowFontSelector@ImGui@@YAXPEBD@Z"]
    pub fn ImGui_ShowFontSelector(label: *const ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "\u{1}?ShowUserGuide@ImGui@@YAXXZ"]
    pub fn ImGui_ShowUserGuide();
}
extern "C" {
    #[link_name = "\u{1}?GetVersion@ImGui@@YAPEBDXZ"]
    pub fn ImGui_GetVersion() -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}?StyleColorsDark@ImGui@@YAXPEAUImGuiStyle@@@Z"]
    pub fn ImGui_StyleColorsDark(dst: *mut ImGuiStyle);
}
extern "C" {
    #[link_name = "\u{1}?StyleColorsClassic@ImGui@@YAXPEAUImGuiStyle@@@Z"]
    pub fn ImGui_StyleColorsClassic(dst: *mut ImGuiStyle);
}
extern "C" {
    #[link_name = "\u{1}?StyleColorsLight@ImGui@@YAXPEAUImGuiStyle@@@Z"]
    pub fn ImGui_StyleColorsLight(dst: *mut ImGuiStyle);
}
extern "C" {
    #[link_name = "\u{1}?Begin@ImGui@@YA_NPEBDPEA_NH@Z"]
    pub fn ImGui_Begin(
        name: *const ::std::os::raw::c_char,
        p_open: *mut bool,
        flags: ImGuiWindowFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?End@ImGui@@YAXXZ"]
    pub fn ImGui_End();
}
extern "C" {
    #[link_name = "\u{1}?BeginChild@ImGui@@YA_NPEBDAEBUImVec2@@_NH@Z"]
    pub fn ImGui_BeginChild(
        str_id: *const ::std::os::raw::c_char,
        size: *const ImVec2,
        border: bool,
        flags: ImGuiWindowFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?BeginChild@ImGui@@YA_NIAEBUImVec2@@_NH@Z"]
    pub fn ImGui_BeginChild1(
        id: ImGuiID,
        size: *const ImVec2,
        border: bool,
        flags: ImGuiWindowFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?EndChild@ImGui@@YAXXZ"]
    pub fn ImGui_EndChild();
}
extern "C" {
    #[link_name = "\u{1}?IsWindowAppearing@ImGui@@YA_NXZ"]
    pub fn ImGui_IsWindowAppearing() -> bool;
}
extern "C" {
    #[link_name = "\u{1}?IsWindowCollapsed@ImGui@@YA_NXZ"]
    pub fn ImGui_IsWindowCollapsed() -> bool;
}
extern "C" {
    #[link_name = "\u{1}?IsWindowFocused@ImGui@@YA_NH@Z"]
    pub fn ImGui_IsWindowFocused(flags: ImGuiFocusedFlags) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?IsWindowHovered@ImGui@@YA_NH@Z"]
    pub fn ImGui_IsWindowHovered(flags: ImGuiHoveredFlags) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?GetWindowDrawList@ImGui@@YAPEAUImDrawList@@XZ"]
    pub fn ImGui_GetWindowDrawList() -> *mut ImDrawList;
}
extern "C" {
    #[link_name = "\u{1}?GetWindowPos@ImGui@@YA?AUImVec2@@XZ"]
    pub fn ImGui_GetWindowPos() -> ImVec2;
}
extern "C" {
    #[link_name = "\u{1}?GetWindowSize@ImGui@@YA?AUImVec2@@XZ"]
    pub fn ImGui_GetWindowSize() -> ImVec2;
}
extern "C" {
    #[link_name = "\u{1}?GetWindowWidth@ImGui@@YAMXZ"]
    pub fn ImGui_GetWindowWidth() -> f32;
}
extern "C" {
    #[link_name = "\u{1}?GetWindowHeight@ImGui@@YAMXZ"]
    pub fn ImGui_GetWindowHeight() -> f32;
}
extern "C" {
    #[link_name = "\u{1}?SetNextWindowPos@ImGui@@YAXAEBUImVec2@@H0@Z"]
    pub fn ImGui_SetNextWindowPos(pos: *const ImVec2, cond: ImGuiCond, pivot: *const ImVec2);
}
extern "C" {
    #[link_name = "\u{1}?SetNextWindowSize@ImGui@@YAXAEBUImVec2@@H@Z"]
    pub fn ImGui_SetNextWindowSize(size: *const ImVec2, cond: ImGuiCond);
}
extern "C" {
    #[link_name = "\u{1}?SetNextWindowSizeConstraints@ImGui@@YAXAEBUImVec2@@0P6AXPEAUImGuiSizeCallbackData@@@ZPEAX@Z"]
    pub fn ImGui_SetNextWindowSizeConstraints(
        size_min: *const ImVec2,
        size_max: *const ImVec2,
        custom_callback: ImGuiSizeCallback,
        custom_callback_data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    #[link_name = "\u{1}?SetNextWindowContentSize@ImGui@@YAXAEBUImVec2@@@Z"]
    pub fn ImGui_SetNextWindowContentSize(size: *const ImVec2);
}
extern "C" {
    #[link_name = "\u{1}?SetNextWindowCollapsed@ImGui@@YAX_NH@Z"]
    pub fn ImGui_SetNextWindowCollapsed(collapsed: bool, cond: ImGuiCond);
}
extern "C" {
    #[link_name = "\u{1}?SetNextWindowFocus@ImGui@@YAXXZ"]
    pub fn ImGui_SetNextWindowFocus();
}
extern "C" {
    #[link_name = "\u{1}?SetNextWindowBgAlpha@ImGui@@YAXM@Z"]
    pub fn ImGui_SetNextWindowBgAlpha(alpha: f32);
}
extern "C" {
    #[link_name = "\u{1}?SetWindowPos@ImGui@@YAXAEBUImVec2@@H@Z"]
    pub fn ImGui_SetWindowPos(pos: *const ImVec2, cond: ImGuiCond);
}
extern "C" {
    #[link_name = "\u{1}?SetWindowSize@ImGui@@YAXAEBUImVec2@@H@Z"]
    pub fn ImGui_SetWindowSize(size: *const ImVec2, cond: ImGuiCond);
}
extern "C" {
    #[link_name = "\u{1}?SetWindowCollapsed@ImGui@@YAX_NH@Z"]
    pub fn ImGui_SetWindowCollapsed(collapsed: bool, cond: ImGuiCond);
}
extern "C" {
    #[link_name = "\u{1}?SetWindowFocus@ImGui@@YAXXZ"]
    pub fn ImGui_SetWindowFocus();
}
extern "C" {
    #[link_name = "\u{1}?SetWindowFontScale@ImGui@@YAXM@Z"]
    pub fn ImGui_SetWindowFontScale(scale: f32);
}
extern "C" {
    #[link_name = "\u{1}?SetWindowPos@ImGui@@YAXPEBDAEBUImVec2@@H@Z"]
    pub fn ImGui_SetWindowPos1(
        name: *const ::std::os::raw::c_char,
        pos: *const ImVec2,
        cond: ImGuiCond,
    );
}
extern "C" {
    #[link_name = "\u{1}?SetWindowSize@ImGui@@YAXPEBDAEBUImVec2@@H@Z"]
    pub fn ImGui_SetWindowSize1(
        name: *const ::std::os::raw::c_char,
        size: *const ImVec2,
        cond: ImGuiCond,
    );
}
extern "C" {
    #[link_name = "\u{1}?SetWindowCollapsed@ImGui@@YAXPEBD_NH@Z"]
    pub fn ImGui_SetWindowCollapsed1(
        name: *const ::std::os::raw::c_char,
        collapsed: bool,
        cond: ImGuiCond,
    );
}
extern "C" {
    #[link_name = "\u{1}?SetWindowFocus@ImGui@@YAXPEBD@Z"]
    pub fn ImGui_SetWindowFocus1(name: *const ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "\u{1}?GetContentRegionMax@ImGui@@YA?AUImVec2@@XZ"]
    pub fn ImGui_GetContentRegionMax() -> ImVec2;
}
extern "C" {
    #[link_name = "\u{1}?GetContentRegionAvail@ImGui@@YA?AUImVec2@@XZ"]
    pub fn ImGui_GetContentRegionAvail() -> ImVec2;
}
extern "C" {
    #[link_name = "\u{1}?GetWindowContentRegionMin@ImGui@@YA?AUImVec2@@XZ"]
    pub fn ImGui_GetWindowContentRegionMin() -> ImVec2;
}
extern "C" {
    #[link_name = "\u{1}?GetWindowContentRegionMax@ImGui@@YA?AUImVec2@@XZ"]
    pub fn ImGui_GetWindowContentRegionMax() -> ImVec2;
}
extern "C" {
    #[link_name = "\u{1}?GetWindowContentRegionWidth@ImGui@@YAMXZ"]
    pub fn ImGui_GetWindowContentRegionWidth() -> f32;
}
extern "C" {
    #[link_name = "\u{1}?GetScrollX@ImGui@@YAMXZ"]
    pub fn ImGui_GetScrollX() -> f32;
}
extern "C" {
    #[link_name = "\u{1}?GetScrollY@ImGui@@YAMXZ"]
    pub fn ImGui_GetScrollY() -> f32;
}
extern "C" {
    #[link_name = "\u{1}?GetScrollMaxX@ImGui@@YAMXZ"]
    pub fn ImGui_GetScrollMaxX() -> f32;
}
extern "C" {
    #[link_name = "\u{1}?GetScrollMaxY@ImGui@@YAMXZ"]
    pub fn ImGui_GetScrollMaxY() -> f32;
}
extern "C" {
    #[link_name = "\u{1}?SetScrollX@ImGui@@YAXM@Z"]
    pub fn ImGui_SetScrollX(scroll_x: f32);
}
extern "C" {
    #[link_name = "\u{1}?SetScrollY@ImGui@@YAXM@Z"]
    pub fn ImGui_SetScrollY(scroll_y: f32);
}
extern "C" {
    #[link_name = "\u{1}?SetScrollHereX@ImGui@@YAXM@Z"]
    pub fn ImGui_SetScrollHereX(center_x_ratio: f32);
}
extern "C" {
    #[link_name = "\u{1}?SetScrollHereY@ImGui@@YAXM@Z"]
    pub fn ImGui_SetScrollHereY(center_y_ratio: f32);
}
extern "C" {
    #[link_name = "\u{1}?SetScrollFromPosX@ImGui@@YAXMM@Z"]
    pub fn ImGui_SetScrollFromPosX(local_x: f32, center_x_ratio: f32);
}
extern "C" {
    #[link_name = "\u{1}?SetScrollFromPosY@ImGui@@YAXMM@Z"]
    pub fn ImGui_SetScrollFromPosY(local_y: f32, center_y_ratio: f32);
}
extern "C" {
    #[link_name = "\u{1}?PushFont@ImGui@@YAXPEAUImFont@@@Z"]
    pub fn ImGui_PushFont(font: *mut ImFont);
}
extern "C" {
    #[link_name = "\u{1}?PopFont@ImGui@@YAXXZ"]
    pub fn ImGui_PopFont();
}
extern "C" {
    #[link_name = "\u{1}?PushStyleColor@ImGui@@YAXHI@Z"]
    pub fn ImGui_PushStyleColor(idx: ImGuiCol, col: ImU32);
}
extern "C" {
    #[link_name = "\u{1}?PushStyleColor@ImGui@@YAXHAEBUImVec4@@@Z"]
    pub fn ImGui_PushStyleColor1(idx: ImGuiCol, col: *const ImVec4);
}
extern "C" {
    #[link_name = "\u{1}?PopStyleColor@ImGui@@YAXH@Z"]
    pub fn ImGui_PopStyleColor(count: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}?PushStyleVar@ImGui@@YAXHM@Z"]
    pub fn ImGui_PushStyleVar(idx: ImGuiStyleVar, val: f32);
}
extern "C" {
    #[link_name = "\u{1}?PushStyleVar@ImGui@@YAXHAEBUImVec2@@@Z"]
    pub fn ImGui_PushStyleVar1(idx: ImGuiStyleVar, val: *const ImVec2);
}
extern "C" {
    #[link_name = "\u{1}?PopStyleVar@ImGui@@YAXH@Z"]
    pub fn ImGui_PopStyleVar(count: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}?PushAllowKeyboardFocus@ImGui@@YAX_N@Z"]
    pub fn ImGui_PushAllowKeyboardFocus(allow_keyboard_focus: bool);
}
extern "C" {
    #[link_name = "\u{1}?PopAllowKeyboardFocus@ImGui@@YAXXZ"]
    pub fn ImGui_PopAllowKeyboardFocus();
}
extern "C" {
    #[link_name = "\u{1}?PushButtonRepeat@ImGui@@YAX_N@Z"]
    pub fn ImGui_PushButtonRepeat(repeat: bool);
}
extern "C" {
    #[link_name = "\u{1}?PopButtonRepeat@ImGui@@YAXXZ"]
    pub fn ImGui_PopButtonRepeat();
}
extern "C" {
    #[link_name = "\u{1}?GetStyleColorVec4@ImGui@@YAAEBUImVec4@@H@Z"]
    pub fn ImGui_GetStyleColorVec4(idx: ImGuiCol) -> *const ImVec4;
}
extern "C" {
    #[link_name = "\u{1}?GetFont@ImGui@@YAPEAUImFont@@XZ"]
    pub fn ImGui_GetFont() -> *mut ImFont;
}
extern "C" {
    #[link_name = "\u{1}?GetFontSize@ImGui@@YAMXZ"]
    pub fn ImGui_GetFontSize() -> f32;
}
extern "C" {
    #[link_name = "\u{1}?GetFontTexUvWhitePixel@ImGui@@YA?AUImVec2@@XZ"]
    pub fn ImGui_GetFontTexUvWhitePixel() -> ImVec2;
}
extern "C" {
    #[link_name = "\u{1}?GetColorU32@ImGui@@YAIHM@Z"]
    pub fn ImGui_GetColorU32(idx: ImGuiCol, alpha_mul: f32) -> ImU32;
}
extern "C" {
    #[link_name = "\u{1}?GetColorU32@ImGui@@YAIAEBUImVec4@@@Z"]
    pub fn ImGui_GetColorU321(col: *const ImVec4) -> ImU32;
}
extern "C" {
    #[link_name = "\u{1}?GetColorU32@ImGui@@YAII@Z"]
    pub fn ImGui_GetColorU322(col: ImU32) -> ImU32;
}
extern "C" {
    #[link_name = "\u{1}?PushItemWidth@ImGui@@YAXM@Z"]
    pub fn ImGui_PushItemWidth(item_width: f32);
}
extern "C" {
    #[link_name = "\u{1}?PopItemWidth@ImGui@@YAXXZ"]
    pub fn ImGui_PopItemWidth();
}
extern "C" {
    #[link_name = "\u{1}?SetNextItemWidth@ImGui@@YAXM@Z"]
    pub fn ImGui_SetNextItemWidth(item_width: f32);
}
extern "C" {
    #[link_name = "\u{1}?CalcItemWidth@ImGui@@YAMXZ"]
    pub fn ImGui_CalcItemWidth() -> f32;
}
extern "C" {
    #[link_name = "\u{1}?PushTextWrapPos@ImGui@@YAXM@Z"]
    pub fn ImGui_PushTextWrapPos(wrap_local_pos_x: f32);
}
extern "C" {
    #[link_name = "\u{1}?PopTextWrapPos@ImGui@@YAXXZ"]
    pub fn ImGui_PopTextWrapPos();
}
extern "C" {
    #[link_name = "\u{1}?Separator@ImGui@@YAXXZ"]
    pub fn ImGui_Separator();
}
extern "C" {
    #[link_name = "\u{1}?SameLine@ImGui@@YAXMM@Z"]
    pub fn ImGui_SameLine(offset_from_start_x: f32, spacing: f32);
}
extern "C" {
    #[link_name = "\u{1}?NewLine@ImGui@@YAXXZ"]
    pub fn ImGui_NewLine();
}
extern "C" {
    #[link_name = "\u{1}?Spacing@ImGui@@YAXXZ"]
    pub fn ImGui_Spacing();
}
extern "C" {
    #[link_name = "\u{1}?Dummy@ImGui@@YAXAEBUImVec2@@@Z"]
    pub fn ImGui_Dummy(size: *const ImVec2);
}
extern "C" {
    #[link_name = "\u{1}?Indent@ImGui@@YAXM@Z"]
    pub fn ImGui_Indent(indent_w: f32);
}
extern "C" {
    #[link_name = "\u{1}?Unindent@ImGui@@YAXM@Z"]
    pub fn ImGui_Unindent(indent_w: f32);
}
extern "C" {
    #[link_name = "\u{1}?BeginGroup@ImGui@@YAXXZ"]
    pub fn ImGui_BeginGroup();
}
extern "C" {
    #[link_name = "\u{1}?EndGroup@ImGui@@YAXXZ"]
    pub fn ImGui_EndGroup();
}
extern "C" {
    #[link_name = "\u{1}?GetCursorPos@ImGui@@YA?AUImVec2@@XZ"]
    pub fn ImGui_GetCursorPos() -> ImVec2;
}
extern "C" {
    #[link_name = "\u{1}?GetCursorPosX@ImGui@@YAMXZ"]
    pub fn ImGui_GetCursorPosX() -> f32;
}
extern "C" {
    #[link_name = "\u{1}?GetCursorPosY@ImGui@@YAMXZ"]
    pub fn ImGui_GetCursorPosY() -> f32;
}
extern "C" {
    #[link_name = "\u{1}?SetCursorPos@ImGui@@YAXAEBUImVec2@@@Z"]
    pub fn ImGui_SetCursorPos(local_pos: *const ImVec2);
}
extern "C" {
    #[link_name = "\u{1}?SetCursorPosX@ImGui@@YAXM@Z"]
    pub fn ImGui_SetCursorPosX(local_x: f32);
}
extern "C" {
    #[link_name = "\u{1}?SetCursorPosY@ImGui@@YAXM@Z"]
    pub fn ImGui_SetCursorPosY(local_y: f32);
}
extern "C" {
    #[link_name = "\u{1}?GetCursorStartPos@ImGui@@YA?AUImVec2@@XZ"]
    pub fn ImGui_GetCursorStartPos() -> ImVec2;
}
extern "C" {
    #[link_name = "\u{1}?GetCursorScreenPos@ImGui@@YA?AUImVec2@@XZ"]
    pub fn ImGui_GetCursorScreenPos() -> ImVec2;
}
extern "C" {
    #[link_name = "\u{1}?SetCursorScreenPos@ImGui@@YAXAEBUImVec2@@@Z"]
    pub fn ImGui_SetCursorScreenPos(pos: *const ImVec2);
}
extern "C" {
    #[link_name = "\u{1}?AlignTextToFramePadding@ImGui@@YAXXZ"]
    pub fn ImGui_AlignTextToFramePadding();
}
extern "C" {
    #[link_name = "\u{1}?GetTextLineHeight@ImGui@@YAMXZ"]
    pub fn ImGui_GetTextLineHeight() -> f32;
}
extern "C" {
    #[link_name = "\u{1}?GetTextLineHeightWithSpacing@ImGui@@YAMXZ"]
    pub fn ImGui_GetTextLineHeightWithSpacing() -> f32;
}
extern "C" {
    #[link_name = "\u{1}?GetFrameHeight@ImGui@@YAMXZ"]
    pub fn ImGui_GetFrameHeight() -> f32;
}
extern "C" {
    #[link_name = "\u{1}?GetFrameHeightWithSpacing@ImGui@@YAMXZ"]
    pub fn ImGui_GetFrameHeightWithSpacing() -> f32;
}
extern "C" {
    #[link_name = "\u{1}?PushID@ImGui@@YAXPEBD@Z"]
    pub fn ImGui_PushID(str_id: *const ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "\u{1}?PushID@ImGui@@YAXPEBD0@Z"]
    pub fn ImGui_PushID1(
        str_id_begin: *const ::std::os::raw::c_char,
        str_id_end: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    #[link_name = "\u{1}?PushID@ImGui@@YAXPEBX@Z"]
    pub fn ImGui_PushID2(ptr_id: *const ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "\u{1}?PushID@ImGui@@YAXH@Z"]
    pub fn ImGui_PushID3(int_id: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}?PopID@ImGui@@YAXXZ"]
    pub fn ImGui_PopID();
}
extern "C" {
    #[link_name = "\u{1}?GetID@ImGui@@YAIPEBD@Z"]
    pub fn ImGui_GetID(str_id: *const ::std::os::raw::c_char) -> ImGuiID;
}
extern "C" {
    #[link_name = "\u{1}?GetID@ImGui@@YAIPEBD0@Z"]
    pub fn ImGui_GetID1(
        str_id_begin: *const ::std::os::raw::c_char,
        str_id_end: *const ::std::os::raw::c_char,
    ) -> ImGuiID;
}
extern "C" {
    #[link_name = "\u{1}?GetID@ImGui@@YAIPEBX@Z"]
    pub fn ImGui_GetID2(ptr_id: *const ::std::os::raw::c_void) -> ImGuiID;
}
extern "C" {
    #[link_name = "\u{1}?TextUnformatted@ImGui@@YAXPEBD0@Z"]
    pub fn ImGui_TextUnformatted(
        text: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    #[link_name = "\u{1}?Text@ImGui@@YAXPEBDZZ"]
    pub fn ImGui_Text(fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    #[link_name = "\u{1}?TextV@ImGui@@YAXPEBDPEAD@Z"]
    pub fn ImGui_TextV(fmt: *const ::std::os::raw::c_char, args: va_list);
}
extern "C" {
    #[link_name = "\u{1}?TextColored@ImGui@@YAXAEBUImVec4@@PEBDZZ"]
    pub fn ImGui_TextColored(col: *const ImVec4, fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    #[link_name = "\u{1}?TextColoredV@ImGui@@YAXAEBUImVec4@@PEBDPEAD@Z"]
    pub fn ImGui_TextColoredV(
        col: *const ImVec4,
        fmt: *const ::std::os::raw::c_char,
        args: va_list,
    );
}
extern "C" {
    #[link_name = "\u{1}?TextDisabled@ImGui@@YAXPEBDZZ"]
    pub fn ImGui_TextDisabled(fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    #[link_name = "\u{1}?TextDisabledV@ImGui@@YAXPEBDPEAD@Z"]
    pub fn ImGui_TextDisabledV(fmt: *const ::std::os::raw::c_char, args: va_list);
}
extern "C" {
    #[link_name = "\u{1}?TextWrapped@ImGui@@YAXPEBDZZ"]
    pub fn ImGui_TextWrapped(fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    #[link_name = "\u{1}?TextWrappedV@ImGui@@YAXPEBDPEAD@Z"]
    pub fn ImGui_TextWrappedV(fmt: *const ::std::os::raw::c_char, args: va_list);
}
extern "C" {
    #[link_name = "\u{1}?LabelText@ImGui@@YAXPEBD0ZZ"]
    pub fn ImGui_LabelText(
        label: *const ::std::os::raw::c_char,
        fmt: *const ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    #[link_name = "\u{1}?LabelTextV@ImGui@@YAXPEBD0PEAD@Z"]
    pub fn ImGui_LabelTextV(
        label: *const ::std::os::raw::c_char,
        fmt: *const ::std::os::raw::c_char,
        args: va_list,
    );
}
extern "C" {
    #[link_name = "\u{1}?BulletText@ImGui@@YAXPEBDZZ"]
    pub fn ImGui_BulletText(fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    #[link_name = "\u{1}?BulletTextV@ImGui@@YAXPEBDPEAD@Z"]
    pub fn ImGui_BulletTextV(fmt: *const ::std::os::raw::c_char, args: va_list);
}
extern "C" {
    #[link_name = "\u{1}?Button@ImGui@@YA_NPEBDAEBUImVec2@@@Z"]
    pub fn ImGui_Button(label: *const ::std::os::raw::c_char, size: *const ImVec2) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?SmallButton@ImGui@@YA_NPEBD@Z"]
    pub fn ImGui_SmallButton(label: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?InvisibleButton@ImGui@@YA_NPEBDAEBUImVec2@@H@Z"]
    pub fn ImGui_InvisibleButton(
        str_id: *const ::std::os::raw::c_char,
        size: *const ImVec2,
        flags: ImGuiButtonFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?ArrowButton@ImGui@@YA_NPEBDH@Z"]
    pub fn ImGui_ArrowButton(str_id: *const ::std::os::raw::c_char, dir: ImGuiDir) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?Image@ImGui@@YAXPEAXAEBUImVec2@@11AEBUImVec4@@2@Z"]
    pub fn ImGui_Image(
        user_texture_id: ImTextureID,
        size: *const ImVec2,
        uv0: *const ImVec2,
        uv1: *const ImVec2,
        tint_col: *const ImVec4,
        border_col: *const ImVec4,
    );
}
extern "C" {
    #[link_name = "\u{1}?ImageButton@ImGui@@YA_NPEAXAEBUImVec2@@11HAEBUImVec4@@2@Z"]
    pub fn ImGui_ImageButton(
        user_texture_id: ImTextureID,
        size: *const ImVec2,
        uv0: *const ImVec2,
        uv1: *const ImVec2,
        frame_padding: ::std::os::raw::c_int,
        bg_col: *const ImVec4,
        tint_col: *const ImVec4,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?Checkbox@ImGui@@YA_NPEBDPEA_N@Z"]
    pub fn ImGui_Checkbox(label: *const ::std::os::raw::c_char, v: *mut bool) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z"]
    pub fn ImGui_CheckboxFlags(
        label: *const ::std::os::raw::c_char,
        flags: *mut ::std::os::raw::c_int,
        flags_value: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?CheckboxFlags@ImGui@@YA_NPEBDPEAII@Z"]
    pub fn ImGui_CheckboxFlags1(
        label: *const ::std::os::raw::c_char,
        flags: *mut ::std::os::raw::c_uint,
        flags_value: ::std::os::raw::c_uint,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?RadioButton@ImGui@@YA_NPEBD_N@Z"]
    pub fn ImGui_RadioButton(label: *const ::std::os::raw::c_char, active: bool) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?RadioButton@ImGui@@YA_NPEBDPEAHH@Z"]
    pub fn ImGui_RadioButton1(
        label: *const ::std::os::raw::c_char,
        v: *mut ::std::os::raw::c_int,
        v_button: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?ProgressBar@ImGui@@YAXMAEBUImVec2@@PEBD@Z"]
    pub fn ImGui_ProgressBar(
        fraction: f32,
        size_arg: *const ImVec2,
        overlay: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    #[link_name = "\u{1}?Bullet@ImGui@@YAXXZ"]
    pub fn ImGui_Bullet();
}
extern "C" {
    #[link_name = "\u{1}?BeginCombo@ImGui@@YA_NPEBD0H@Z"]
    pub fn ImGui_BeginCombo(
        label: *const ::std::os::raw::c_char,
        preview_value: *const ::std::os::raw::c_char,
        flags: ImGuiComboFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?EndCombo@ImGui@@YAXXZ"]
    pub fn ImGui_EndCombo();
}
extern "C" {
    #[link_name = "\u{1}?Combo@ImGui@@YA_NPEBDPEAHQEBQEBDHH@Z"]
    pub fn ImGui_Combo(
        label: *const ::std::os::raw::c_char,
        current_item: *mut ::std::os::raw::c_int,
        items: *const *const ::std::os::raw::c_char,
        items_count: ::std::os::raw::c_int,
        popup_max_height_in_items: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?Combo@ImGui@@YA_NPEBDPEAH0H@Z"]
    pub fn ImGui_Combo1(
        label: *const ::std::os::raw::c_char,
        current_item: *mut ::std::os::raw::c_int,
        items_separated_by_zeros: *const ::std::os::raw::c_char,
        popup_max_height_in_items: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?Combo@ImGui@@YA_NPEBDPEAHP6A_NPEAXHPEAPEBD@Z2HH@Z"]
    pub fn ImGui_Combo2(
        label: *const ::std::os::raw::c_char,
        current_item: *mut ::std::os::raw::c_int,
        items_getter: ::std::option::Option<
            unsafe extern "C" fn(
                data: *mut ::std::os::raw::c_void,
                idx: ::std::os::raw::c_int,
                out_text: *mut *const ::std::os::raw::c_char,
            ) -> bool,
        >,
        data: *mut ::std::os::raw::c_void,
        items_count: ::std::os::raw::c_int,
        popup_max_height_in_items: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?DragFloat@ImGui@@YA_NPEBDPEAMMMM0H@Z"]
    pub fn ImGui_DragFloat(
        label: *const ::std::os::raw::c_char,
        v: *mut f32,
        v_speed: f32,
        v_min: f32,
        v_max: f32,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?DragFloat2@ImGui@@YA_NPEBDQEAMMMM0H@Z"]
    pub fn ImGui_DragFloat2(
        label: *const ::std::os::raw::c_char,
        v: *mut f32,
        v_speed: f32,
        v_min: f32,
        v_max: f32,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?DragFloat3@ImGui@@YA_NPEBDQEAMMMM0H@Z"]
    pub fn ImGui_DragFloat3(
        label: *const ::std::os::raw::c_char,
        v: *mut f32,
        v_speed: f32,
        v_min: f32,
        v_max: f32,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?DragFloat4@ImGui@@YA_NPEBDQEAMMMM0H@Z"]
    pub fn ImGui_DragFloat4(
        label: *const ::std::os::raw::c_char,
        v: *mut f32,
        v_speed: f32,
        v_min: f32,
        v_max: f32,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?DragFloatRange2@ImGui@@YA_NPEBDPEAM1MMM00H@Z"]
    pub fn ImGui_DragFloatRange2(
        label: *const ::std::os::raw::c_char,
        v_current_min: *mut f32,
        v_current_max: *mut f32,
        v_speed: f32,
        v_min: f32,
        v_max: f32,
        format: *const ::std::os::raw::c_char,
        format_max: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?DragInt@ImGui@@YA_NPEBDPEAHMHH0H@Z"]
    pub fn ImGui_DragInt(
        label: *const ::std::os::raw::c_char,
        v: *mut ::std::os::raw::c_int,
        v_speed: f32,
        v_min: ::std::os::raw::c_int,
        v_max: ::std::os::raw::c_int,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?DragInt2@ImGui@@YA_NPEBDQEAHMHH0H@Z"]
    pub fn ImGui_DragInt2(
        label: *const ::std::os::raw::c_char,
        v: *mut ::std::os::raw::c_int,
        v_speed: f32,
        v_min: ::std::os::raw::c_int,
        v_max: ::std::os::raw::c_int,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?DragInt3@ImGui@@YA_NPEBDQEAHMHH0H@Z"]
    pub fn ImGui_DragInt3(
        label: *const ::std::os::raw::c_char,
        v: *mut ::std::os::raw::c_int,
        v_speed: f32,
        v_min: ::std::os::raw::c_int,
        v_max: ::std::os::raw::c_int,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?DragInt4@ImGui@@YA_NPEBDQEAHMHH0H@Z"]
    pub fn ImGui_DragInt4(
        label: *const ::std::os::raw::c_char,
        v: *mut ::std::os::raw::c_int,
        v_speed: f32,
        v_min: ::std::os::raw::c_int,
        v_max: ::std::os::raw::c_int,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?DragIntRange2@ImGui@@YA_NPEBDPEAH1MHH00H@Z"]
    pub fn ImGui_DragIntRange2(
        label: *const ::std::os::raw::c_char,
        v_current_min: *mut ::std::os::raw::c_int,
        v_current_max: *mut ::std::os::raw::c_int,
        v_speed: f32,
        v_min: ::std::os::raw::c_int,
        v_max: ::std::os::raw::c_int,
        format: *const ::std::os::raw::c_char,
        format_max: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?DragScalar@ImGui@@YA_NPEBDHPEAXMPEBX20H@Z"]
    pub fn ImGui_DragScalar(
        label: *const ::std::os::raw::c_char,
        data_type: ImGuiDataType,
        p_data: *mut ::std::os::raw::c_void,
        v_speed: f32,
        p_min: *const ::std::os::raw::c_void,
        p_max: *const ::std::os::raw::c_void,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?DragScalarN@ImGui@@YA_NPEBDHPEAXHMPEBX20H@Z"]
    pub fn ImGui_DragScalarN(
        label: *const ::std::os::raw::c_char,
        data_type: ImGuiDataType,
        p_data: *mut ::std::os::raw::c_void,
        components: ::std::os::raw::c_int,
        v_speed: f32,
        p_min: *const ::std::os::raw::c_void,
        p_max: *const ::std::os::raw::c_void,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?SliderFloat@ImGui@@YA_NPEBDPEAMMM0H@Z"]
    pub fn ImGui_SliderFloat(
        label: *const ::std::os::raw::c_char,
        v: *mut f32,
        v_min: f32,
        v_max: f32,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?SliderFloat2@ImGui@@YA_NPEBDQEAMMM0H@Z"]
    pub fn ImGui_SliderFloat2(
        label: *const ::std::os::raw::c_char,
        v: *mut f32,
        v_min: f32,
        v_max: f32,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?SliderFloat3@ImGui@@YA_NPEBDQEAMMM0H@Z"]
    pub fn ImGui_SliderFloat3(
        label: *const ::std::os::raw::c_char,
        v: *mut f32,
        v_min: f32,
        v_max: f32,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?SliderFloat4@ImGui@@YA_NPEBDQEAMMM0H@Z"]
    pub fn ImGui_SliderFloat4(
        label: *const ::std::os::raw::c_char,
        v: *mut f32,
        v_min: f32,
        v_max: f32,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?SliderAngle@ImGui@@YA_NPEBDPEAMMM0H@Z"]
    pub fn ImGui_SliderAngle(
        label: *const ::std::os::raw::c_char,
        v_rad: *mut f32,
        v_degrees_min: f32,
        v_degrees_max: f32,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?SliderInt@ImGui@@YA_NPEBDPEAHHH0H@Z"]
    pub fn ImGui_SliderInt(
        label: *const ::std::os::raw::c_char,
        v: *mut ::std::os::raw::c_int,
        v_min: ::std::os::raw::c_int,
        v_max: ::std::os::raw::c_int,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?SliderInt2@ImGui@@YA_NPEBDQEAHHH0H@Z"]
    pub fn ImGui_SliderInt2(
        label: *const ::std::os::raw::c_char,
        v: *mut ::std::os::raw::c_int,
        v_min: ::std::os::raw::c_int,
        v_max: ::std::os::raw::c_int,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?SliderInt3@ImGui@@YA_NPEBDQEAHHH0H@Z"]
    pub fn ImGui_SliderInt3(
        label: *const ::std::os::raw::c_char,
        v: *mut ::std::os::raw::c_int,
        v_min: ::std::os::raw::c_int,
        v_max: ::std::os::raw::c_int,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?SliderInt4@ImGui@@YA_NPEBDQEAHHH0H@Z"]
    pub fn ImGui_SliderInt4(
        label: *const ::std::os::raw::c_char,
        v: *mut ::std::os::raw::c_int,
        v_min: ::std::os::raw::c_int,
        v_max: ::std::os::raw::c_int,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?SliderScalar@ImGui@@YA_NPEBDHPEAXPEBX20H@Z"]
    pub fn ImGui_SliderScalar(
        label: *const ::std::os::raw::c_char,
        data_type: ImGuiDataType,
        p_data: *mut ::std::os::raw::c_void,
        p_min: *const ::std::os::raw::c_void,
        p_max: *const ::std::os::raw::c_void,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?SliderScalarN@ImGui@@YA_NPEBDHPEAXHPEBX20H@Z"]
    pub fn ImGui_SliderScalarN(
        label: *const ::std::os::raw::c_char,
        data_type: ImGuiDataType,
        p_data: *mut ::std::os::raw::c_void,
        components: ::std::os::raw::c_int,
        p_min: *const ::std::os::raw::c_void,
        p_max: *const ::std::os::raw::c_void,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?VSliderFloat@ImGui@@YA_NPEBDAEBUImVec2@@PEAMMM0H@Z"]
    pub fn ImGui_VSliderFloat(
        label: *const ::std::os::raw::c_char,
        size: *const ImVec2,
        v: *mut f32,
        v_min: f32,
        v_max: f32,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?VSliderInt@ImGui@@YA_NPEBDAEBUImVec2@@PEAHHH0H@Z"]
    pub fn ImGui_VSliderInt(
        label: *const ::std::os::raw::c_char,
        size: *const ImVec2,
        v: *mut ::std::os::raw::c_int,
        v_min: ::std::os::raw::c_int,
        v_max: ::std::os::raw::c_int,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?VSliderScalar@ImGui@@YA_NPEBDAEBUImVec2@@HPEAXPEBX30H@Z"]
    pub fn ImGui_VSliderScalar(
        label: *const ::std::os::raw::c_char,
        size: *const ImVec2,
        data_type: ImGuiDataType,
        p_data: *mut ::std::os::raw::c_void,
        p_min: *const ::std::os::raw::c_void,
        p_max: *const ::std::os::raw::c_void,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?InputText@ImGui@@YA_NPEBDPEAD_KHP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z"]
    pub fn ImGui_InputText(
        label: *const ::std::os::raw::c_char,
        buf: *mut ::std::os::raw::c_char,
        buf_size: size_t,
        flags: ImGuiInputTextFlags,
        callback: ImGuiInputTextCallback,
        user_data: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?InputTextMultiline@ImGui@@YA_NPEBDPEAD_KAEBUImVec2@@HP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z"]
    pub fn ImGui_InputTextMultiline(
        label: *const ::std::os::raw::c_char,
        buf: *mut ::std::os::raw::c_char,
        buf_size: size_t,
        size: *const ImVec2,
        flags: ImGuiInputTextFlags,
        callback: ImGuiInputTextCallback,
        user_data: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?InputTextWithHint@ImGui@@YA_NPEBD0PEAD_KHP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z"]
    pub fn ImGui_InputTextWithHint(
        label: *const ::std::os::raw::c_char,
        hint: *const ::std::os::raw::c_char,
        buf: *mut ::std::os::raw::c_char,
        buf_size: size_t,
        flags: ImGuiInputTextFlags,
        callback: ImGuiInputTextCallback,
        user_data: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?InputFloat@ImGui@@YA_NPEBDPEAMMM0H@Z"]
    pub fn ImGui_InputFloat(
        label: *const ::std::os::raw::c_char,
        v: *mut f32,
        step: f32,
        step_fast: f32,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiInputTextFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?InputFloat2@ImGui@@YA_NPEBDQEAM0H@Z"]
    pub fn ImGui_InputFloat2(
        label: *const ::std::os::raw::c_char,
        v: *mut f32,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiInputTextFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?InputFloat3@ImGui@@YA_NPEBDQEAM0H@Z"]
    pub fn ImGui_InputFloat3(
        label: *const ::std::os::raw::c_char,
        v: *mut f32,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiInputTextFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?InputFloat4@ImGui@@YA_NPEBDQEAM0H@Z"]
    pub fn ImGui_InputFloat4(
        label: *const ::std::os::raw::c_char,
        v: *mut f32,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiInputTextFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?InputInt@ImGui@@YA_NPEBDPEAHHHH@Z"]
    pub fn ImGui_InputInt(
        label: *const ::std::os::raw::c_char,
        v: *mut ::std::os::raw::c_int,
        step: ::std::os::raw::c_int,
        step_fast: ::std::os::raw::c_int,
        flags: ImGuiInputTextFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?InputInt2@ImGui@@YA_NPEBDQEAHH@Z"]
    pub fn ImGui_InputInt2(
        label: *const ::std::os::raw::c_char,
        v: *mut ::std::os::raw::c_int,
        flags: ImGuiInputTextFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?InputInt3@ImGui@@YA_NPEBDQEAHH@Z"]
    pub fn ImGui_InputInt3(
        label: *const ::std::os::raw::c_char,
        v: *mut ::std::os::raw::c_int,
        flags: ImGuiInputTextFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?InputInt4@ImGui@@YA_NPEBDQEAHH@Z"]
    pub fn ImGui_InputInt4(
        label: *const ::std::os::raw::c_char,
        v: *mut ::std::os::raw::c_int,
        flags: ImGuiInputTextFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?InputDouble@ImGui@@YA_NPEBDPEANNN0H@Z"]
    pub fn ImGui_InputDouble(
        label: *const ::std::os::raw::c_char,
        v: *mut f64,
        step: f64,
        step_fast: f64,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiInputTextFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?InputScalar@ImGui@@YA_NPEBDHPEAXPEBX20H@Z"]
    pub fn ImGui_InputScalar(
        label: *const ::std::os::raw::c_char,
        data_type: ImGuiDataType,
        p_data: *mut ::std::os::raw::c_void,
        p_step: *const ::std::os::raw::c_void,
        p_step_fast: *const ::std::os::raw::c_void,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiInputTextFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?InputScalarN@ImGui@@YA_NPEBDHPEAXHPEBX20H@Z"]
    pub fn ImGui_InputScalarN(
        label: *const ::std::os::raw::c_char,
        data_type: ImGuiDataType,
        p_data: *mut ::std::os::raw::c_void,
        components: ::std::os::raw::c_int,
        p_step: *const ::std::os::raw::c_void,
        p_step_fast: *const ::std::os::raw::c_void,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiInputTextFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?ColorEdit3@ImGui@@YA_NPEBDQEAMH@Z"]
    pub fn ImGui_ColorEdit3(
        label: *const ::std::os::raw::c_char,
        col: *mut f32,
        flags: ImGuiColorEditFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?ColorEdit4@ImGui@@YA_NPEBDQEAMH@Z"]
    pub fn ImGui_ColorEdit4(
        label: *const ::std::os::raw::c_char,
        col: *mut f32,
        flags: ImGuiColorEditFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?ColorPicker3@ImGui@@YA_NPEBDQEAMH@Z"]
    pub fn ImGui_ColorPicker3(
        label: *const ::std::os::raw::c_char,
        col: *mut f32,
        flags: ImGuiColorEditFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?ColorPicker4@ImGui@@YA_NPEBDQEAMHPEBM@Z"]
    pub fn ImGui_ColorPicker4(
        label: *const ::std::os::raw::c_char,
        col: *mut f32,
        flags: ImGuiColorEditFlags,
        ref_col: *const f32,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?ColorButton@ImGui@@YA_NPEBDAEBUImVec4@@HUImVec2@@@Z"]
    pub fn ImGui_ColorButton(
        desc_id: *const ::std::os::raw::c_char,
        col: *const ImVec4,
        flags: ImGuiColorEditFlags,
        size: ImVec2,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?SetColorEditOptions@ImGui@@YAXH@Z"]
    pub fn ImGui_SetColorEditOptions(flags: ImGuiColorEditFlags);
}
extern "C" {
    #[link_name = "\u{1}?TreeNode@ImGui@@YA_NPEBD@Z"]
    pub fn ImGui_TreeNode(label: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?TreeNode@ImGui@@YA_NPEBD0ZZ"]
    pub fn ImGui_TreeNode1(
        str_id: *const ::std::os::raw::c_char,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?TreeNode@ImGui@@YA_NPEBXPEBDZZ"]
    pub fn ImGui_TreeNode2(
        ptr_id: *const ::std::os::raw::c_void,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?TreeNodeV@ImGui@@YA_NPEBD0PEAD@Z"]
    pub fn ImGui_TreeNodeV(
        str_id: *const ::std::os::raw::c_char,
        fmt: *const ::std::os::raw::c_char,
        args: va_list,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?TreeNodeV@ImGui@@YA_NPEBXPEBDPEAD@Z"]
    pub fn ImGui_TreeNodeV1(
        ptr_id: *const ::std::os::raw::c_void,
        fmt: *const ::std::os::raw::c_char,
        args: va_list,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?TreeNodeEx@ImGui@@YA_NPEBDH@Z"]
    pub fn ImGui_TreeNodeEx(
        label: *const ::std::os::raw::c_char,
        flags: ImGuiTreeNodeFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?TreeNodeEx@ImGui@@YA_NPEBDH0ZZ"]
    pub fn ImGui_TreeNodeEx1(
        str_id: *const ::std::os::raw::c_char,
        flags: ImGuiTreeNodeFlags,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?TreeNodeEx@ImGui@@YA_NPEBXHPEBDZZ"]
    pub fn ImGui_TreeNodeEx2(
        ptr_id: *const ::std::os::raw::c_void,
        flags: ImGuiTreeNodeFlags,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?TreeNodeExV@ImGui@@YA_NPEBDH0PEAD@Z"]
    pub fn ImGui_TreeNodeExV(
        str_id: *const ::std::os::raw::c_char,
        flags: ImGuiTreeNodeFlags,
        fmt: *const ::std::os::raw::c_char,
        args: va_list,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?TreeNodeExV@ImGui@@YA_NPEBXHPEBDPEAD@Z"]
    pub fn ImGui_TreeNodeExV1(
        ptr_id: *const ::std::os::raw::c_void,
        flags: ImGuiTreeNodeFlags,
        fmt: *const ::std::os::raw::c_char,
        args: va_list,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?TreePush@ImGui@@YAXPEBD@Z"]
    pub fn ImGui_TreePush(str_id: *const ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "\u{1}?TreePush@ImGui@@YAXPEBX@Z"]
    pub fn ImGui_TreePush1(ptr_id: *const ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "\u{1}?TreePop@ImGui@@YAXXZ"]
    pub fn ImGui_TreePop();
}
extern "C" {
    #[link_name = "\u{1}?GetTreeNodeToLabelSpacing@ImGui@@YAMXZ"]
    pub fn ImGui_GetTreeNodeToLabelSpacing() -> f32;
}
extern "C" {
    #[link_name = "\u{1}?CollapsingHeader@ImGui@@YA_NPEBDH@Z"]
    pub fn ImGui_CollapsingHeader(
        label: *const ::std::os::raw::c_char,
        flags: ImGuiTreeNodeFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?CollapsingHeader@ImGui@@YA_NPEBDPEA_NH@Z"]
    pub fn ImGui_CollapsingHeader1(
        label: *const ::std::os::raw::c_char,
        p_open: *mut bool,
        flags: ImGuiTreeNodeFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?SetNextItemOpen@ImGui@@YAX_NH@Z"]
    pub fn ImGui_SetNextItemOpen(is_open: bool, cond: ImGuiCond);
}
extern "C" {
    #[link_name = "\u{1}?Selectable@ImGui@@YA_NPEBD_NHAEBUImVec2@@@Z"]
    pub fn ImGui_Selectable(
        label: *const ::std::os::raw::c_char,
        selected: bool,
        flags: ImGuiSelectableFlags,
        size: *const ImVec2,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?Selectable@ImGui@@YA_NPEBDPEA_NHAEBUImVec2@@@Z"]
    pub fn ImGui_Selectable1(
        label: *const ::std::os::raw::c_char,
        p_selected: *mut bool,
        flags: ImGuiSelectableFlags,
        size: *const ImVec2,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?ListBox@ImGui@@YA_NPEBDPEAHQEBQEBDHH@Z"]
    pub fn ImGui_ListBox(
        label: *const ::std::os::raw::c_char,
        current_item: *mut ::std::os::raw::c_int,
        items: *const *const ::std::os::raw::c_char,
        items_count: ::std::os::raw::c_int,
        height_in_items: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?ListBox@ImGui@@YA_NPEBDPEAHP6A_NPEAXHPEAPEBD@Z2HH@Z"]
    pub fn ImGui_ListBox1(
        label: *const ::std::os::raw::c_char,
        current_item: *mut ::std::os::raw::c_int,
        items_getter: ::std::option::Option<
            unsafe extern "C" fn(
                data: *mut ::std::os::raw::c_void,
                idx: ::std::os::raw::c_int,
                out_text: *mut *const ::std::os::raw::c_char,
            ) -> bool,
        >,
        data: *mut ::std::os::raw::c_void,
        items_count: ::std::os::raw::c_int,
        height_in_items: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?ListBoxHeader@ImGui@@YA_NPEBDAEBUImVec2@@@Z"]
    pub fn ImGui_ListBoxHeader(label: *const ::std::os::raw::c_char, size: *const ImVec2) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?ListBoxHeader@ImGui@@YA_NPEBDHH@Z"]
    pub fn ImGui_ListBoxHeader1(
        label: *const ::std::os::raw::c_char,
        items_count: ::std::os::raw::c_int,
        height_in_items: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?ListBoxFooter@ImGui@@YAXXZ"]
    pub fn ImGui_ListBoxFooter();
}
extern "C" {
    #[link_name = "\u{1}?PlotLines@ImGui@@YAXPEBDPEBMHH0MMUImVec2@@H@Z"]
    pub fn ImGui_PlotLines(
        label: *const ::std::os::raw::c_char,
        values: *const f32,
        values_count: ::std::os::raw::c_int,
        values_offset: ::std::os::raw::c_int,
        overlay_text: *const ::std::os::raw::c_char,
        scale_min: f32,
        scale_max: f32,
        graph_size: ImVec2,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}?PlotLines@ImGui@@YAXPEBDP6AMPEAXH@Z1HH0MMUImVec2@@@Z"]
    pub fn ImGui_PlotLines1(
        label: *const ::std::os::raw::c_char,
        values_getter: ::std::option::Option<
            unsafe extern "C" fn(
                data: *mut ::std::os::raw::c_void,
                idx: ::std::os::raw::c_int,
            ) -> f32,
        >,
        data: *mut ::std::os::raw::c_void,
        values_count: ::std::os::raw::c_int,
        values_offset: ::std::os::raw::c_int,
        overlay_text: *const ::std::os::raw::c_char,
        scale_min: f32,
        scale_max: f32,
        graph_size: ImVec2,
    );
}
extern "C" {
    #[link_name = "\u{1}?PlotHistogram@ImGui@@YAXPEBDPEBMHH0MMUImVec2@@H@Z"]
    pub fn ImGui_PlotHistogram(
        label: *const ::std::os::raw::c_char,
        values: *const f32,
        values_count: ::std::os::raw::c_int,
        values_offset: ::std::os::raw::c_int,
        overlay_text: *const ::std::os::raw::c_char,
        scale_min: f32,
        scale_max: f32,
        graph_size: ImVec2,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}?PlotHistogram@ImGui@@YAXPEBDP6AMPEAXH@Z1HH0MMUImVec2@@@Z"]
    pub fn ImGui_PlotHistogram1(
        label: *const ::std::os::raw::c_char,
        values_getter: ::std::option::Option<
            unsafe extern "C" fn(
                data: *mut ::std::os::raw::c_void,
                idx: ::std::os::raw::c_int,
            ) -> f32,
        >,
        data: *mut ::std::os::raw::c_void,
        values_count: ::std::os::raw::c_int,
        values_offset: ::std::os::raw::c_int,
        overlay_text: *const ::std::os::raw::c_char,
        scale_min: f32,
        scale_max: f32,
        graph_size: ImVec2,
    );
}
extern "C" {
    #[link_name = "\u{1}?Value@ImGui@@YAXPEBD_N@Z"]
    pub fn ImGui_Value(prefix: *const ::std::os::raw::c_char, b: bool);
}
extern "C" {
    #[link_name = "\u{1}?Value@ImGui@@YAXPEBDH@Z"]
    pub fn ImGui_Value1(prefix: *const ::std::os::raw::c_char, v: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}?Value@ImGui@@YAXPEBDI@Z"]
    pub fn ImGui_Value2(prefix: *const ::std::os::raw::c_char, v: ::std::os::raw::c_uint);
}
extern "C" {
    #[link_name = "\u{1}?Value@ImGui@@YAXPEBDM0@Z"]
    pub fn ImGui_Value3(
        prefix: *const ::std::os::raw::c_char,
        v: f32,
        float_format: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    #[link_name = "\u{1}?BeginMenuBar@ImGui@@YA_NXZ"]
    pub fn ImGui_BeginMenuBar() -> bool;
}
extern "C" {
    #[link_name = "\u{1}?EndMenuBar@ImGui@@YAXXZ"]
    pub fn ImGui_EndMenuBar();
}
extern "C" {
    #[link_name = "\u{1}?BeginMainMenuBar@ImGui@@YA_NXZ"]
    pub fn ImGui_BeginMainMenuBar() -> bool;
}
extern "C" {
    #[link_name = "\u{1}?EndMainMenuBar@ImGui@@YAXXZ"]
    pub fn ImGui_EndMainMenuBar();
}
extern "C" {
    #[link_name = "\u{1}?BeginMenu@ImGui@@YA_NPEBD_N@Z"]
    pub fn ImGui_BeginMenu(label: *const ::std::os::raw::c_char, enabled: bool) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?EndMenu@ImGui@@YAXXZ"]
    pub fn ImGui_EndMenu();
}
extern "C" {
    #[link_name = "\u{1}?MenuItem@ImGui@@YA_NPEBD0_N1@Z"]
    pub fn ImGui_MenuItem(
        label: *const ::std::os::raw::c_char,
        shortcut: *const ::std::os::raw::c_char,
        selected: bool,
        enabled: bool,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?MenuItem@ImGui@@YA_NPEBD0PEA_N_N@Z"]
    pub fn ImGui_MenuItem1(
        label: *const ::std::os::raw::c_char,
        shortcut: *const ::std::os::raw::c_char,
        p_selected: *mut bool,
        enabled: bool,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?BeginTooltip@ImGui@@YAXXZ"]
    pub fn ImGui_BeginTooltip();
}
extern "C" {
    #[link_name = "\u{1}?EndTooltip@ImGui@@YAXXZ"]
    pub fn ImGui_EndTooltip();
}
extern "C" {
    #[link_name = "\u{1}?SetTooltip@ImGui@@YAXPEBDZZ"]
    pub fn ImGui_SetTooltip(fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    #[link_name = "\u{1}?SetTooltipV@ImGui@@YAXPEBDPEAD@Z"]
    pub fn ImGui_SetTooltipV(fmt: *const ::std::os::raw::c_char, args: va_list);
}
extern "C" {
    #[link_name = "\u{1}?BeginPopup@ImGui@@YA_NPEBDH@Z"]
    pub fn ImGui_BeginPopup(str_id: *const ::std::os::raw::c_char, flags: ImGuiWindowFlags)
        -> bool;
}
extern "C" {
    #[link_name = "\u{1}?BeginPopupModal@ImGui@@YA_NPEBDPEA_NH@Z"]
    pub fn ImGui_BeginPopupModal(
        name: *const ::std::os::raw::c_char,
        p_open: *mut bool,
        flags: ImGuiWindowFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?EndPopup@ImGui@@YAXXZ"]
    pub fn ImGui_EndPopup();
}
extern "C" {
    #[link_name = "\u{1}?OpenPopup@ImGui@@YAXPEBDH@Z"]
    pub fn ImGui_OpenPopup(str_id: *const ::std::os::raw::c_char, popup_flags: ImGuiPopupFlags);
}
extern "C" {
    #[link_name = "\u{1}?OpenPopupOnItemClick@ImGui@@YAXPEBDH@Z"]
    pub fn ImGui_OpenPopupOnItemClick(
        str_id: *const ::std::os::raw::c_char,
        popup_flags: ImGuiPopupFlags,
    );
}
extern "C" {
    #[link_name = "\u{1}?CloseCurrentPopup@ImGui@@YAXXZ"]
    pub fn ImGui_CloseCurrentPopup();
}
extern "C" {
    #[link_name = "\u{1}?BeginPopupContextItem@ImGui@@YA_NPEBDH@Z"]
    pub fn ImGui_BeginPopupContextItem(
        str_id: *const ::std::os::raw::c_char,
        popup_flags: ImGuiPopupFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?BeginPopupContextWindow@ImGui@@YA_NPEBDH@Z"]
    pub fn ImGui_BeginPopupContextWindow(
        str_id: *const ::std::os::raw::c_char,
        popup_flags: ImGuiPopupFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?BeginPopupContextVoid@ImGui@@YA_NPEBDH@Z"]
    pub fn ImGui_BeginPopupContextVoid(
        str_id: *const ::std::os::raw::c_char,
        popup_flags: ImGuiPopupFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?IsPopupOpen@ImGui@@YA_NPEBDH@Z"]
    pub fn ImGui_IsPopupOpen(str_id: *const ::std::os::raw::c_char, flags: ImGuiPopupFlags)
        -> bool;
}
extern "C" {
    #[link_name = "\u{1}?Columns@ImGui@@YAXHPEBD_N@Z"]
    pub fn ImGui_Columns(
        count: ::std::os::raw::c_int,
        id: *const ::std::os::raw::c_char,
        border: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?NextColumn@ImGui@@YAXXZ"]
    pub fn ImGui_NextColumn();
}
extern "C" {
    #[link_name = "\u{1}?GetColumnIndex@ImGui@@YAHXZ"]
    pub fn ImGui_GetColumnIndex() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?GetColumnWidth@ImGui@@YAMH@Z"]
    pub fn ImGui_GetColumnWidth(column_index: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    #[link_name = "\u{1}?SetColumnWidth@ImGui@@YAXHM@Z"]
    pub fn ImGui_SetColumnWidth(column_index: ::std::os::raw::c_int, width: f32);
}
extern "C" {
    #[link_name = "\u{1}?GetColumnOffset@ImGui@@YAMH@Z"]
    pub fn ImGui_GetColumnOffset(column_index: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    #[link_name = "\u{1}?SetColumnOffset@ImGui@@YAXHM@Z"]
    pub fn ImGui_SetColumnOffset(column_index: ::std::os::raw::c_int, offset_x: f32);
}
extern "C" {
    #[link_name = "\u{1}?GetColumnsCount@ImGui@@YAHXZ"]
    pub fn ImGui_GetColumnsCount() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?BeginTabBar@ImGui@@YA_NPEBDH@Z"]
    pub fn ImGui_BeginTabBar(
        str_id: *const ::std::os::raw::c_char,
        flags: ImGuiTabBarFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?EndTabBar@ImGui@@YAXXZ"]
    pub fn ImGui_EndTabBar();
}
extern "C" {
    #[link_name = "\u{1}?BeginTabItem@ImGui@@YA_NPEBDPEA_NH@Z"]
    pub fn ImGui_BeginTabItem(
        label: *const ::std::os::raw::c_char,
        p_open: *mut bool,
        flags: ImGuiTabItemFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?EndTabItem@ImGui@@YAXXZ"]
    pub fn ImGui_EndTabItem();
}
extern "C" {
    #[link_name = "\u{1}?TabItemButton@ImGui@@YA_NPEBDH@Z"]
    pub fn ImGui_TabItemButton(
        label: *const ::std::os::raw::c_char,
        flags: ImGuiTabItemFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?SetTabItemClosed@ImGui@@YAXPEBD@Z"]
    pub fn ImGui_SetTabItemClosed(tab_or_docked_window_label: *const ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "\u{1}?LogToTTY@ImGui@@YAXH@Z"]
    pub fn ImGui_LogToTTY(auto_open_depth: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}?LogToFile@ImGui@@YAXHPEBD@Z"]
    pub fn ImGui_LogToFile(
        auto_open_depth: ::std::os::raw::c_int,
        filename: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    #[link_name = "\u{1}?LogToClipboard@ImGui@@YAXH@Z"]
    pub fn ImGui_LogToClipboard(auto_open_depth: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}?LogFinish@ImGui@@YAXXZ"]
    pub fn ImGui_LogFinish();
}
extern "C" {
    #[link_name = "\u{1}?LogButtons@ImGui@@YAXXZ"]
    pub fn ImGui_LogButtons();
}
extern "C" {
    #[link_name = "\u{1}?LogText@ImGui@@YAXPEBDZZ"]
    pub fn ImGui_LogText(fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    #[link_name = "\u{1}?BeginDragDropSource@ImGui@@YA_NH@Z"]
    pub fn ImGui_BeginDragDropSource(flags: ImGuiDragDropFlags) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?SetDragDropPayload@ImGui@@YA_NPEBDPEBX_KH@Z"]
    pub fn ImGui_SetDragDropPayload(
        type_: *const ::std::os::raw::c_char,
        data: *const ::std::os::raw::c_void,
        sz: size_t,
        cond: ImGuiCond,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?EndDragDropSource@ImGui@@YAXXZ"]
    pub fn ImGui_EndDragDropSource();
}
extern "C" {
    #[link_name = "\u{1}?BeginDragDropTarget@ImGui@@YA_NXZ"]
    pub fn ImGui_BeginDragDropTarget() -> bool;
}
extern "C" {
    #[link_name = "\u{1}?AcceptDragDropPayload@ImGui@@YAPEBUImGuiPayload@@PEBDH@Z"]
    pub fn ImGui_AcceptDragDropPayload(
        type_: *const ::std::os::raw::c_char,
        flags: ImGuiDragDropFlags,
    ) -> *const ImGuiPayload;
}
extern "C" {
    #[link_name = "\u{1}?EndDragDropTarget@ImGui@@YAXXZ"]
    pub fn ImGui_EndDragDropTarget();
}
extern "C" {
    #[link_name = "\u{1}?GetDragDropPayload@ImGui@@YAPEBUImGuiPayload@@XZ"]
    pub fn ImGui_GetDragDropPayload() -> *const ImGuiPayload;
}
extern "C" {
    #[link_name = "\u{1}?PushClipRect@ImGui@@YAXAEBUImVec2@@0_N@Z"]
    pub fn ImGui_PushClipRect(
        clip_rect_min: *const ImVec2,
        clip_rect_max: *const ImVec2,
        intersect_with_current_clip_rect: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?PopClipRect@ImGui@@YAXXZ"]
    pub fn ImGui_PopClipRect();
}
extern "C" {
    #[link_name = "\u{1}?SetItemDefaultFocus@ImGui@@YAXXZ"]
    pub fn ImGui_SetItemDefaultFocus();
}
extern "C" {
    #[link_name = "\u{1}?SetKeyboardFocusHere@ImGui@@YAXH@Z"]
    pub fn ImGui_SetKeyboardFocusHere(offset: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}?IsItemHovered@ImGui@@YA_NH@Z"]
    pub fn ImGui_IsItemHovered(flags: ImGuiHoveredFlags) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?IsItemActive@ImGui@@YA_NXZ"]
    pub fn ImGui_IsItemActive() -> bool;
}
extern "C" {
    #[link_name = "\u{1}?IsItemFocused@ImGui@@YA_NXZ"]
    pub fn ImGui_IsItemFocused() -> bool;
}
extern "C" {
    #[link_name = "\u{1}?IsItemClicked@ImGui@@YA_NH@Z"]
    pub fn ImGui_IsItemClicked(mouse_button: ImGuiMouseButton) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?IsItemVisible@ImGui@@YA_NXZ"]
    pub fn ImGui_IsItemVisible() -> bool;
}
extern "C" {
    #[link_name = "\u{1}?IsItemEdited@ImGui@@YA_NXZ"]
    pub fn ImGui_IsItemEdited() -> bool;
}
extern "C" {
    #[link_name = "\u{1}?IsItemActivated@ImGui@@YA_NXZ"]
    pub fn ImGui_IsItemActivated() -> bool;
}
extern "C" {
    #[link_name = "\u{1}?IsItemDeactivated@ImGui@@YA_NXZ"]
    pub fn ImGui_IsItemDeactivated() -> bool;
}
extern "C" {
    #[link_name = "\u{1}?IsItemDeactivatedAfterEdit@ImGui@@YA_NXZ"]
    pub fn ImGui_IsItemDeactivatedAfterEdit() -> bool;
}
extern "C" {
    #[link_name = "\u{1}?IsItemToggledOpen@ImGui@@YA_NXZ"]
    pub fn ImGui_IsItemToggledOpen() -> bool;
}
extern "C" {
    #[link_name = "\u{1}?IsAnyItemHovered@ImGui@@YA_NXZ"]
    pub fn ImGui_IsAnyItemHovered() -> bool;
}
extern "C" {
    #[link_name = "\u{1}?IsAnyItemActive@ImGui@@YA_NXZ"]
    pub fn ImGui_IsAnyItemActive() -> bool;
}
extern "C" {
    #[link_name = "\u{1}?IsAnyItemFocused@ImGui@@YA_NXZ"]
    pub fn ImGui_IsAnyItemFocused() -> bool;
}
extern "C" {
    #[link_name = "\u{1}?GetItemRectMin@ImGui@@YA?AUImVec2@@XZ"]
    pub fn ImGui_GetItemRectMin() -> ImVec2;
}
extern "C" {
    #[link_name = "\u{1}?GetItemRectMax@ImGui@@YA?AUImVec2@@XZ"]
    pub fn ImGui_GetItemRectMax() -> ImVec2;
}
extern "C" {
    #[link_name = "\u{1}?GetItemRectSize@ImGui@@YA?AUImVec2@@XZ"]
    pub fn ImGui_GetItemRectSize() -> ImVec2;
}
extern "C" {
    #[link_name = "\u{1}?SetItemAllowOverlap@ImGui@@YAXXZ"]
    pub fn ImGui_SetItemAllowOverlap();
}
extern "C" {
    #[link_name = "\u{1}?IsRectVisible@ImGui@@YA_NAEBUImVec2@@@Z"]
    pub fn ImGui_IsRectVisible(size: *const ImVec2) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?IsRectVisible@ImGui@@YA_NAEBUImVec2@@0@Z"]
    pub fn ImGui_IsRectVisible1(rect_min: *const ImVec2, rect_max: *const ImVec2) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?GetTime@ImGui@@YANXZ"]
    pub fn ImGui_GetTime() -> f64;
}
extern "C" {
    #[link_name = "\u{1}?GetFrameCount@ImGui@@YAHXZ"]
    pub fn ImGui_GetFrameCount() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?GetBackgroundDrawList@ImGui@@YAPEAUImDrawList@@XZ"]
    pub fn ImGui_GetBackgroundDrawList() -> *mut ImDrawList;
}
extern "C" {
    #[link_name = "\u{1}?GetForegroundDrawList@ImGui@@YAPEAUImDrawList@@XZ"]
    pub fn ImGui_GetForegroundDrawList() -> *mut ImDrawList;
}
extern "C" {
    #[link_name = "\u{1}?GetDrawListSharedData@ImGui@@YAPEAUImDrawListSharedData@@XZ"]
    pub fn ImGui_GetDrawListSharedData() -> *mut ImDrawListSharedData;
}
extern "C" {
    #[link_name = "\u{1}?GetStyleColorName@ImGui@@YAPEBDH@Z"]
    pub fn ImGui_GetStyleColorName(idx: ImGuiCol) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}?SetStateStorage@ImGui@@YAXPEAUImGuiStorage@@@Z"]
    pub fn ImGui_SetStateStorage(storage: *mut ImGuiStorage);
}
extern "C" {
    #[link_name = "\u{1}?GetStateStorage@ImGui@@YAPEAUImGuiStorage@@XZ"]
    pub fn ImGui_GetStateStorage() -> *mut ImGuiStorage;
}
extern "C" {
    #[link_name = "\u{1}?CalcListClipping@ImGui@@YAXHMPEAH0@Z"]
    pub fn ImGui_CalcListClipping(
        items_count: ::std::os::raw::c_int,
        items_height: f32,
        out_items_display_start: *mut ::std::os::raw::c_int,
        out_items_display_end: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}?BeginChildFrame@ImGui@@YA_NIAEBUImVec2@@H@Z"]
    pub fn ImGui_BeginChildFrame(id: ImGuiID, size: *const ImVec2, flags: ImGuiWindowFlags)
        -> bool;
}
extern "C" {
    #[link_name = "\u{1}?EndChildFrame@ImGui@@YAXXZ"]
    pub fn ImGui_EndChildFrame();
}
extern "C" {
    #[link_name = "\u{1}?CalcTextSize@ImGui@@YA?AUImVec2@@PEBD0_NM@Z"]
    pub fn ImGui_CalcTextSize(
        text: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
        hide_text_after_double_hash: bool,
        wrap_width: f32,
    ) -> ImVec2;
}
extern "C" {
    #[link_name = "\u{1}?ColorConvertU32ToFloat4@ImGui@@YA?AUImVec4@@I@Z"]
    pub fn ImGui_ColorConvertU32ToFloat4(in_: ImU32) -> ImVec4;
}
extern "C" {
    #[link_name = "\u{1}?ColorConvertFloat4ToU32@ImGui@@YAIAEBUImVec4@@@Z"]
    pub fn ImGui_ColorConvertFloat4ToU32(in_: *const ImVec4) -> ImU32;
}
extern "C" {
    #[link_name = "\u{1}?ColorConvertRGBtoHSV@ImGui@@YAXMMMAEAM00@Z"]
    pub fn ImGui_ColorConvertRGBtoHSV(
        r: f32,
        g: f32,
        b: f32,
        out_h: *mut f32,
        out_s: *mut f32,
        out_v: *mut f32,
    );
}
extern "C" {
    #[link_name = "\u{1}?ColorConvertHSVtoRGB@ImGui@@YAXMMMAEAM00@Z"]
    pub fn ImGui_ColorConvertHSVtoRGB(
        h: f32,
        s: f32,
        v: f32,
        out_r: *mut f32,
        out_g: *mut f32,
        out_b: *mut f32,
    );
}
extern "C" {
    #[link_name = "\u{1}?GetKeyIndex@ImGui@@YAHH@Z"]
    pub fn ImGui_GetKeyIndex(imgui_key: ImGuiKey) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?IsKeyDown@ImGui@@YA_NH@Z"]
    pub fn ImGui_IsKeyDown(user_key_index: ::std::os::raw::c_int) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?IsKeyPressed@ImGui@@YA_NH_N@Z"]
    pub fn ImGui_IsKeyPressed(user_key_index: ::std::os::raw::c_int, repeat: bool) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?IsKeyReleased@ImGui@@YA_NH@Z"]
    pub fn ImGui_IsKeyReleased(user_key_index: ::std::os::raw::c_int) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?GetKeyPressedAmount@ImGui@@YAHHMM@Z"]
    pub fn ImGui_GetKeyPressedAmount(
        key_index: ::std::os::raw::c_int,
        repeat_delay: f32,
        rate: f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?CaptureKeyboardFromApp@ImGui@@YAX_N@Z"]
    pub fn ImGui_CaptureKeyboardFromApp(want_capture_keyboard_value: bool);
}
extern "C" {
    #[link_name = "\u{1}?IsMouseDown@ImGui@@YA_NH@Z"]
    pub fn ImGui_IsMouseDown(button: ImGuiMouseButton) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?IsMouseClicked@ImGui@@YA_NH_N@Z"]
    pub fn ImGui_IsMouseClicked(button: ImGuiMouseButton, repeat: bool) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?IsMouseReleased@ImGui@@YA_NH@Z"]
    pub fn ImGui_IsMouseReleased(button: ImGuiMouseButton) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?IsMouseDoubleClicked@ImGui@@YA_NH@Z"]
    pub fn ImGui_IsMouseDoubleClicked(button: ImGuiMouseButton) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?IsMouseHoveringRect@ImGui@@YA_NAEBUImVec2@@0_N@Z"]
    pub fn ImGui_IsMouseHoveringRect(
        r_min: *const ImVec2,
        r_max: *const ImVec2,
        clip: bool,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?IsMousePosValid@ImGui@@YA_NPEBUImVec2@@@Z"]
    pub fn ImGui_IsMousePosValid(mouse_pos: *const ImVec2) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?IsAnyMouseDown@ImGui@@YA_NXZ"]
    pub fn ImGui_IsAnyMouseDown() -> bool;
}
extern "C" {
    #[link_name = "\u{1}?GetMousePos@ImGui@@YA?AUImVec2@@XZ"]
    pub fn ImGui_GetMousePos() -> ImVec2;
}
extern "C" {
    #[link_name = "\u{1}?GetMousePosOnOpeningCurrentPopup@ImGui@@YA?AUImVec2@@XZ"]
    pub fn ImGui_GetMousePosOnOpeningCurrentPopup() -> ImVec2;
}
extern "C" {
    #[link_name = "\u{1}?IsMouseDragging@ImGui@@YA_NHM@Z"]
    pub fn ImGui_IsMouseDragging(button: ImGuiMouseButton, lock_threshold: f32) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?GetMouseDragDelta@ImGui@@YA?AUImVec2@@HM@Z"]
    pub fn ImGui_GetMouseDragDelta(button: ImGuiMouseButton, lock_threshold: f32) -> ImVec2;
}
extern "C" {
    #[link_name = "\u{1}?ResetMouseDragDelta@ImGui@@YAXH@Z"]
    pub fn ImGui_ResetMouseDragDelta(button: ImGuiMouseButton);
}
extern "C" {
    #[link_name = "\u{1}?GetMouseCursor@ImGui@@YAHXZ"]
    pub fn ImGui_GetMouseCursor() -> ImGuiMouseCursor;
}
extern "C" {
    #[link_name = "\u{1}?SetMouseCursor@ImGui@@YAXH@Z"]
    pub fn ImGui_SetMouseCursor(cursor_type: ImGuiMouseCursor);
}
extern "C" {
    #[link_name = "\u{1}?CaptureMouseFromApp@ImGui@@YAX_N@Z"]
    pub fn ImGui_CaptureMouseFromApp(want_capture_mouse_value: bool);
}
extern "C" {
    #[link_name = "\u{1}?GetClipboardText@ImGui@@YAPEBDXZ"]
    pub fn ImGui_GetClipboardText() -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}?SetClipboardText@ImGui@@YAXPEBD@Z"]
    pub fn ImGui_SetClipboardText(text: *const ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "\u{1}?LoadIniSettingsFromDisk@ImGui@@YAXPEBD@Z"]
    pub fn ImGui_LoadIniSettingsFromDisk(ini_filename: *const ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "\u{1}?LoadIniSettingsFromMemory@ImGui@@YAXPEBD_K@Z"]
    pub fn ImGui_LoadIniSettingsFromMemory(
        ini_data: *const ::std::os::raw::c_char,
        ini_size: size_t,
    );
}
extern "C" {
    #[link_name = "\u{1}?SaveIniSettingsToDisk@ImGui@@YAXPEBD@Z"]
    pub fn ImGui_SaveIniSettingsToDisk(ini_filename: *const ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "\u{1}?SaveIniSettingsToMemory@ImGui@@YAPEBDPEA_K@Z"]
    pub fn ImGui_SaveIniSettingsToMemory(
        out_ini_size: *mut size_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}?DebugCheckVersionAndDataLayout@ImGui@@YA_NPEBD_K11111@Z"]
    pub fn ImGui_DebugCheckVersionAndDataLayout(
        version_str: *const ::std::os::raw::c_char,
        sz_io: size_t,
        sz_style: size_t,
        sz_vec2: size_t,
        sz_vec4: size_t,
        sz_drawvert: size_t,
        sz_drawidx: size_t,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?SetAllocatorFunctions@ImGui@@YAXP6APEAX_KPEAX@ZP6AX11@Z1@Z"]
    pub fn ImGui_SetAllocatorFunctions(
        alloc_func: ::std::option::Option<
            unsafe extern "C" fn(
                sz: size_t,
                user_data: *mut ::std::os::raw::c_void,
            ) -> *mut ::std::os::raw::c_void,
        >,
        free_func: ::std::option::Option<
            unsafe extern "C" fn(
                ptr: *mut ::std::os::raw::c_void,
                user_data: *mut ::std::os::raw::c_void,
            ),
        >,
        user_data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    #[link_name = "\u{1}?MemAlloc@ImGui@@YAPEAX_K@Z"]
    pub fn ImGui_MemAlloc(size: size_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}?MemFree@ImGui@@YAXPEAX@Z"]
    pub fn ImGui_MemFree(ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "\u{1}?DragScalar@ImGui@@YA_NPEBDHPEAXMPEBX20M@Z"]
    pub fn ImGui_DragScalar1(
        label: *const ::std::os::raw::c_char,
        data_type: ImGuiDataType,
        p_data: *mut ::std::os::raw::c_void,
        v_speed: f32,
        p_min: *const ::std::os::raw::c_void,
        p_max: *const ::std::os::raw::c_void,
        format: *const ::std::os::raw::c_char,
        power: f32,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?DragScalarN@ImGui@@YA_NPEBDHPEAXHMPEBX20M@Z"]
    pub fn ImGui_DragScalarN1(
        label: *const ::std::os::raw::c_char,
        data_type: ImGuiDataType,
        p_data: *mut ::std::os::raw::c_void,
        components: ::std::os::raw::c_int,
        v_speed: f32,
        p_min: *const ::std::os::raw::c_void,
        p_max: *const ::std::os::raw::c_void,
        format: *const ::std::os::raw::c_char,
        power: f32,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?SliderScalar@ImGui@@YA_NPEBDHPEAXPEBX20M@Z"]
    pub fn ImGui_SliderScalar1(
        label: *const ::std::os::raw::c_char,
        data_type: ImGuiDataType,
        p_data: *mut ::std::os::raw::c_void,
        p_min: *const ::std::os::raw::c_void,
        p_max: *const ::std::os::raw::c_void,
        format: *const ::std::os::raw::c_char,
        power: f32,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?SliderScalarN@ImGui@@YA_NPEBDHPEAXHPEBX20M@Z"]
    pub fn ImGui_SliderScalarN1(
        label: *const ::std::os::raw::c_char,
        data_type: ImGuiDataType,
        p_data: *mut ::std::os::raw::c_void,
        components: ::std::os::raw::c_int,
        p_min: *const ::std::os::raw::c_void,
        p_max: *const ::std::os::raw::c_void,
        format: *const ::std::os::raw::c_char,
        power: f32,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?FindWindowByID@ImGui@@YAPEAUImGuiWindow@@I@Z"]
    pub fn ImGui_FindWindowByID(id: ImGuiID) -> *mut ImGuiWindow;
}
extern "C" {
    #[link_name = "\u{1}?FindWindowByName@ImGui@@YAPEAUImGuiWindow@@PEBD@Z"]
    pub fn ImGui_FindWindowByName(name: *const ::std::os::raw::c_char) -> *mut ImGuiWindow;
}
extern "C" {
    #[link_name = "\u{1}?UpdateWindowParentAndRootLinks@ImGui@@YAXPEAUImGuiWindow@@H0@Z"]
    pub fn ImGui_UpdateWindowParentAndRootLinks(
        window: *mut ImGuiWindow,
        flags: ImGuiWindowFlags,
        parent_window: *mut ImGuiWindow,
    );
}
extern "C" {
    #[link_name = "\u{1}?CalcWindowExpectedSize@ImGui@@YA?AUImVec2@@PEAUImGuiWindow@@@Z"]
    pub fn ImGui_CalcWindowExpectedSize(window: *mut ImGuiWindow) -> ImVec2;
}
extern "C" {
    #[link_name = "\u{1}?IsWindowChildOf@ImGui@@YA_NPEAUImGuiWindow@@0@Z"]
    pub fn ImGui_IsWindowChildOf(
        window: *mut ImGuiWindow,
        potential_parent: *mut ImGuiWindow,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?IsWindowAbove@ImGui@@YA_NPEAUImGuiWindow@@0@Z"]
    pub fn ImGui_IsWindowAbove(
        potential_above: *mut ImGuiWindow,
        potential_below: *mut ImGuiWindow,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?IsWindowNavFocusable@ImGui@@YA_NPEAUImGuiWindow@@@Z"]
    pub fn ImGui_IsWindowNavFocusable(window: *mut ImGuiWindow) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?GetWindowAllowedExtentRect@ImGui@@YA?AUImRect@@PEAUImGuiWindow@@@Z"]
    pub fn ImGui_GetWindowAllowedExtentRect(window: *mut ImGuiWindow) -> ImRect;
}
extern "C" {
    #[link_name = "\u{1}?SetWindowPos@ImGui@@YAXPEAUImGuiWindow@@AEBUImVec2@@H@Z"]
    pub fn ImGui_SetWindowPos2(window: *mut ImGuiWindow, pos: *const ImVec2, cond: ImGuiCond);
}
extern "C" {
    #[link_name = "\u{1}?SetWindowSize@ImGui@@YAXPEAUImGuiWindow@@AEBUImVec2@@H@Z"]
    pub fn ImGui_SetWindowSize2(window: *mut ImGuiWindow, size: *const ImVec2, cond: ImGuiCond);
}
extern "C" {
    #[link_name = "\u{1}?SetWindowCollapsed@ImGui@@YAXPEAUImGuiWindow@@_NH@Z"]
    pub fn ImGui_SetWindowCollapsed2(window: *mut ImGuiWindow, collapsed: bool, cond: ImGuiCond);
}
extern "C" {
    #[link_name = "\u{1}?SetWindowHitTestHole@ImGui@@YAXPEAUImGuiWindow@@AEBUImVec2@@1@Z"]
    pub fn ImGui_SetWindowHitTestHole(
        window: *mut ImGuiWindow,
        pos: *const ImVec2,
        size: *const ImVec2,
    );
}
extern "C" {
    #[link_name = "\u{1}?FocusWindow@ImGui@@YAXPEAUImGuiWindow@@@Z"]
    pub fn ImGui_FocusWindow(window: *mut ImGuiWindow);
}
extern "C" {
    #[link_name = "\u{1}?FocusTopMostWindowUnderOne@ImGui@@YAXPEAUImGuiWindow@@0@Z"]
    pub fn ImGui_FocusTopMostWindowUnderOne(
        under_this_window: *mut ImGuiWindow,
        ignore_window: *mut ImGuiWindow,
    );
}
extern "C" {
    #[link_name = "\u{1}?BringWindowToFocusFront@ImGui@@YAXPEAUImGuiWindow@@@Z"]
    pub fn ImGui_BringWindowToFocusFront(window: *mut ImGuiWindow);
}
extern "C" {
    #[link_name = "\u{1}?BringWindowToDisplayFront@ImGui@@YAXPEAUImGuiWindow@@@Z"]
    pub fn ImGui_BringWindowToDisplayFront(window: *mut ImGuiWindow);
}
extern "C" {
    #[link_name = "\u{1}?BringWindowToDisplayBack@ImGui@@YAXPEAUImGuiWindow@@@Z"]
    pub fn ImGui_BringWindowToDisplayBack(window: *mut ImGuiWindow);
}
extern "C" {
    #[link_name = "\u{1}?SetCurrentFont@ImGui@@YAXPEAUImFont@@@Z"]
    pub fn ImGui_SetCurrentFont(font: *mut ImFont);
}
extern "C" {
    #[link_name = "\u{1}?Initialize@ImGui@@YAXPEAUImGuiContext@@@Z"]
    pub fn ImGui_Initialize(context: *mut ImGuiContext);
}
extern "C" {
    #[link_name = "\u{1}?Shutdown@ImGui@@YAXPEAUImGuiContext@@@Z"]
    pub fn ImGui_Shutdown(context: *mut ImGuiContext);
}
extern "C" {
    #[link_name = "\u{1}?UpdateHoveredWindowAndCaptureFlags@ImGui@@YAXXZ"]
    pub fn ImGui_UpdateHoveredWindowAndCaptureFlags();
}
extern "C" {
    #[link_name = "\u{1}?StartMouseMovingWindow@ImGui@@YAXPEAUImGuiWindow@@@Z"]
    pub fn ImGui_StartMouseMovingWindow(window: *mut ImGuiWindow);
}
extern "C" {
    #[link_name = "\u{1}?UpdateMouseMovingWindowNewFrame@ImGui@@YAXXZ"]
    pub fn ImGui_UpdateMouseMovingWindowNewFrame();
}
extern "C" {
    #[link_name = "\u{1}?UpdateMouseMovingWindowEndFrame@ImGui@@YAXXZ"]
    pub fn ImGui_UpdateMouseMovingWindowEndFrame();
}
extern "C" {
    #[link_name = "\u{1}?AddContextHook@ImGui@@YAXPEAUImGuiContext@@PEBUImGuiContextHook@@@Z"]
    pub fn ImGui_AddContextHook(context: *mut ImGuiContext, hook: *const ImGuiContextHook);
}
extern "C" {
    #[link_name = "\u{1}?CallContextHooks@ImGui@@YAXPEAUImGuiContext@@W4ImGuiContextHookType@@@Z"]
    pub fn ImGui_CallContextHooks(context: *mut ImGuiContext, type_: ImGuiContextHookType);
}
extern "C" {
    #[link_name = "\u{1}?MarkIniSettingsDirty@ImGui@@YAXXZ"]
    pub fn ImGui_MarkIniSettingsDirty();
}
extern "C" {
    #[link_name = "\u{1}?MarkIniSettingsDirty@ImGui@@YAXPEAUImGuiWindow@@@Z"]
    pub fn ImGui_MarkIniSettingsDirty1(window: *mut ImGuiWindow);
}
extern "C" {
    #[link_name = "\u{1}?ClearIniSettings@ImGui@@YAXXZ"]
    pub fn ImGui_ClearIniSettings();
}
extern "C" {
    #[link_name = "\u{1}?CreateNewWindowSettings@ImGui@@YAPEAUImGuiWindowSettings@@PEBD@Z"]
    pub fn ImGui_CreateNewWindowSettings(
        name: *const ::std::os::raw::c_char,
    ) -> *mut ImGuiWindowSettings;
}
extern "C" {
    #[link_name = "\u{1}?FindWindowSettings@ImGui@@YAPEAUImGuiWindowSettings@@I@Z"]
    pub fn ImGui_FindWindowSettings(id: ImGuiID) -> *mut ImGuiWindowSettings;
}
extern "C" {
    #[link_name = "\u{1}?FindOrCreateWindowSettings@ImGui@@YAPEAUImGuiWindowSettings@@PEBD@Z"]
    pub fn ImGui_FindOrCreateWindowSettings(
        name: *const ::std::os::raw::c_char,
    ) -> *mut ImGuiWindowSettings;
}
extern "C" {
    #[link_name = "\u{1}?FindSettingsHandler@ImGui@@YAPEAUImGuiSettingsHandler@@PEBD@Z"]
    pub fn ImGui_FindSettingsHandler(
        type_name: *const ::std::os::raw::c_char,
    ) -> *mut ImGuiSettingsHandler;
}
extern "C" {
    #[link_name = "\u{1}?SetNextWindowScroll@ImGui@@YAXAEBUImVec2@@@Z"]
    pub fn ImGui_SetNextWindowScroll(scroll: *const ImVec2);
}
extern "C" {
    #[link_name = "\u{1}?SetScrollX@ImGui@@YAXPEAUImGuiWindow@@M@Z"]
    pub fn ImGui_SetScrollX1(window: *mut ImGuiWindow, scroll_x: f32);
}
extern "C" {
    #[link_name = "\u{1}?SetScrollY@ImGui@@YAXPEAUImGuiWindow@@M@Z"]
    pub fn ImGui_SetScrollY1(window: *mut ImGuiWindow, scroll_y: f32);
}
extern "C" {
    #[link_name = "\u{1}?SetScrollFromPosX@ImGui@@YAXPEAUImGuiWindow@@MM@Z"]
    pub fn ImGui_SetScrollFromPosX1(window: *mut ImGuiWindow, local_x: f32, center_x_ratio: f32);
}
extern "C" {
    #[link_name = "\u{1}?SetScrollFromPosY@ImGui@@YAXPEAUImGuiWindow@@MM@Z"]
    pub fn ImGui_SetScrollFromPosY1(window: *mut ImGuiWindow, local_y: f32, center_y_ratio: f32);
}
extern "C" {
    #[link_name = "\u{1}?ScrollToBringRectIntoView@ImGui@@YA?AUImVec2@@PEAUImGuiWindow@@AEBUImRect@@@Z"]
    pub fn ImGui_ScrollToBringRectIntoView(
        window: *mut ImGuiWindow,
        item_rect: *const ImRect,
    ) -> ImVec2;
}
extern "C" {
    #[link_name = "\u{1}?SetActiveID@ImGui@@YAXIPEAUImGuiWindow@@@Z"]
    pub fn ImGui_SetActiveID(id: ImGuiID, window: *mut ImGuiWindow);
}
extern "C" {
    #[link_name = "\u{1}?SetFocusID@ImGui@@YAXIPEAUImGuiWindow@@@Z"]
    pub fn ImGui_SetFocusID(id: ImGuiID, window: *mut ImGuiWindow);
}
extern "C" {
    #[link_name = "\u{1}?ClearActiveID@ImGui@@YAXXZ"]
    pub fn ImGui_ClearActiveID();
}
extern "C" {
    #[link_name = "\u{1}?GetHoveredID@ImGui@@YAIXZ"]
    pub fn ImGui_GetHoveredID() -> ImGuiID;
}
extern "C" {
    #[link_name = "\u{1}?SetHoveredID@ImGui@@YAXI@Z"]
    pub fn ImGui_SetHoveredID(id: ImGuiID);
}
extern "C" {
    #[link_name = "\u{1}?KeepAliveID@ImGui@@YAXI@Z"]
    pub fn ImGui_KeepAliveID(id: ImGuiID);
}
extern "C" {
    #[link_name = "\u{1}?MarkItemEdited@ImGui@@YAXI@Z"]
    pub fn ImGui_MarkItemEdited(id: ImGuiID);
}
extern "C" {
    #[link_name = "\u{1}?PushOverrideID@ImGui@@YAXI@Z"]
    pub fn ImGui_PushOverrideID(id: ImGuiID);
}
extern "C" {
    #[link_name = "\u{1}?GetIDWithSeed@ImGui@@YAIPEBD0I@Z"]
    pub fn ImGui_GetIDWithSeed(
        str_id_begin: *const ::std::os::raw::c_char,
        str_id_end: *const ::std::os::raw::c_char,
        seed: ImGuiID,
    ) -> ImGuiID;
}
extern "C" {
    #[link_name = "\u{1}?ItemSize@ImGui@@YAXAEBUImVec2@@M@Z"]
    pub fn ImGui_ItemSize(size: *const ImVec2, text_baseline_y: f32);
}
extern "C" {
    #[link_name = "\u{1}?ItemSize@ImGui@@YAXAEBUImRect@@M@Z"]
    pub fn ImGui_ItemSize1(bb: *const ImRect, text_baseline_y: f32);
}
extern "C" {
    #[link_name = "\u{1}?ItemAdd@ImGui@@YA_NAEBUImRect@@IPEBU2@@Z"]
    pub fn ImGui_ItemAdd(bb: *const ImRect, id: ImGuiID, nav_bb: *const ImRect) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?ItemHoverable@ImGui@@YA_NAEBUImRect@@I@Z"]
    pub fn ImGui_ItemHoverable(bb: *const ImRect, id: ImGuiID) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?IsClippedEx@ImGui@@YA_NAEBUImRect@@I_N@Z"]
    pub fn ImGui_IsClippedEx(bb: *const ImRect, id: ImGuiID, clip_even_when_logged: bool) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?SetLastItemData@ImGui@@YAXPEAUImGuiWindow@@IHAEBUImRect@@@Z"]
    pub fn ImGui_SetLastItemData(
        window: *mut ImGuiWindow,
        item_id: ImGuiID,
        status_flags: ImGuiItemStatusFlags,
        item_rect: *const ImRect,
    );
}
extern "C" {
    #[link_name = "\u{1}?FocusableItemRegister@ImGui@@YA_NPEAUImGuiWindow@@I@Z"]
    pub fn ImGui_FocusableItemRegister(window: *mut ImGuiWindow, id: ImGuiID) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?FocusableItemUnregister@ImGui@@YAXPEAUImGuiWindow@@@Z"]
    pub fn ImGui_FocusableItemUnregister(window: *mut ImGuiWindow);
}
extern "C" {
    #[link_name = "\u{1}?CalcItemSize@ImGui@@YA?AUImVec2@@U2@MM@Z"]
    pub fn ImGui_CalcItemSize(size: ImVec2, default_w: f32, default_h: f32) -> ImVec2;
}
extern "C" {
    #[link_name = "\u{1}?CalcWrapWidthForPos@ImGui@@YAMAEBUImVec2@@M@Z"]
    pub fn ImGui_CalcWrapWidthForPos(pos: *const ImVec2, wrap_pos_x: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}?PushMultiItemsWidths@ImGui@@YAXHM@Z"]
    pub fn ImGui_PushMultiItemsWidths(components: ::std::os::raw::c_int, width_full: f32);
}
extern "C" {
    #[link_name = "\u{1}?PushItemFlag@ImGui@@YAXH_N@Z"]
    pub fn ImGui_PushItemFlag(option: ImGuiItemFlags, enabled: bool);
}
extern "C" {
    #[link_name = "\u{1}?PopItemFlag@ImGui@@YAXXZ"]
    pub fn ImGui_PopItemFlag();
}
extern "C" {
    #[link_name = "\u{1}?IsItemToggledSelection@ImGui@@YA_NXZ"]
    pub fn ImGui_IsItemToggledSelection() -> bool;
}
extern "C" {
    #[link_name = "\u{1}?GetContentRegionMaxAbs@ImGui@@YA?AUImVec2@@XZ"]
    pub fn ImGui_GetContentRegionMaxAbs() -> ImVec2;
}
extern "C" {
    #[link_name = "\u{1}?ShrinkWidths@ImGui@@YAXPEAUImGuiShrinkWidthItem@@HM@Z"]
    pub fn ImGui_ShrinkWidths(
        items: *mut ImGuiShrinkWidthItem,
        count: ::std::os::raw::c_int,
        width_excess: f32,
    );
}
extern "C" {
    #[link_name = "\u{1}?LogBegin@ImGui@@YAXW4ImGuiLogType@@H@Z"]
    pub fn ImGui_LogBegin(type_: ImGuiLogType, auto_open_depth: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}?LogToBuffer@ImGui@@YAXH@Z"]
    pub fn ImGui_LogToBuffer(auto_open_depth: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}?BeginChildEx@ImGui@@YA_NPEBDIAEBUImVec2@@_NH@Z"]
    pub fn ImGui_BeginChildEx(
        name: *const ::std::os::raw::c_char,
        id: ImGuiID,
        size_arg: *const ImVec2,
        border: bool,
        flags: ImGuiWindowFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?OpenPopupEx@ImGui@@YAXIH@Z"]
    pub fn ImGui_OpenPopupEx(id: ImGuiID, popup_flags: ImGuiPopupFlags);
}
extern "C" {
    #[link_name = "\u{1}?ClosePopupToLevel@ImGui@@YAXH_N@Z"]
    pub fn ImGui_ClosePopupToLevel(
        remaining: ::std::os::raw::c_int,
        restore_focus_to_window_under_popup: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?ClosePopupsOverWindow@ImGui@@YAXPEAUImGuiWindow@@_N@Z"]
    pub fn ImGui_ClosePopupsOverWindow(
        ref_window: *mut ImGuiWindow,
        restore_focus_to_window_under_popup: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?IsPopupOpen@ImGui@@YA_NIH@Z"]
    pub fn ImGui_IsPopupOpen1(id: ImGuiID, popup_flags: ImGuiPopupFlags) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?BeginPopupEx@ImGui@@YA_NIH@Z"]
    pub fn ImGui_BeginPopupEx(id: ImGuiID, extra_flags: ImGuiWindowFlags) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?BeginTooltipEx@ImGui@@YAXHH@Z"]
    pub fn ImGui_BeginTooltipEx(extra_flags: ImGuiWindowFlags, tooltip_flags: ImGuiTooltipFlags);
}
extern "C" {
    #[link_name = "\u{1}?GetTopMostPopupModal@ImGui@@YAPEAUImGuiWindow@@XZ"]
    pub fn ImGui_GetTopMostPopupModal() -> *mut ImGuiWindow;
}
extern "C" {
    #[link_name = "\u{1}?FindBestWindowPosForPopup@ImGui@@YA?AUImVec2@@PEAUImGuiWindow@@@Z"]
    pub fn ImGui_FindBestWindowPosForPopup(window: *mut ImGuiWindow) -> ImVec2;
}
extern "C" {
    #[link_name = "\u{1}?FindBestWindowPosForPopupEx@ImGui@@YA?AUImVec2@@AEBU2@0PEAHAEBUImRect@@2W4ImGuiPopupPositionPolicy@@@Z"]
    pub fn ImGui_FindBestWindowPosForPopupEx(
        ref_pos: *const ImVec2,
        size: *const ImVec2,
        last_dir: *mut ImGuiDir,
        r_outer: *const ImRect,
        r_avoid: *const ImRect,
        policy: ImGuiPopupPositionPolicy,
    ) -> ImVec2;
}
extern "C" {
    #[link_name = "\u{1}?NavInitWindow@ImGui@@YAXPEAUImGuiWindow@@_N@Z"]
    pub fn ImGui_NavInitWindow(window: *mut ImGuiWindow, force_reinit: bool);
}
extern "C" {
    #[link_name = "\u{1}?NavMoveRequestButNoResultYet@ImGui@@YA_NXZ"]
    pub fn ImGui_NavMoveRequestButNoResultYet() -> bool;
}
extern "C" {
    #[link_name = "\u{1}?NavMoveRequestCancel@ImGui@@YAXXZ"]
    pub fn ImGui_NavMoveRequestCancel();
}
extern "C" {
    #[link_name = "\u{1}?NavMoveRequestForward@ImGui@@YAXHHAEBUImRect@@H@Z"]
    pub fn ImGui_NavMoveRequestForward(
        move_dir: ImGuiDir,
        clip_dir: ImGuiDir,
        bb_rel: *const ImRect,
        move_flags: ImGuiNavMoveFlags,
    );
}
extern "C" {
    #[link_name = "\u{1}?NavMoveRequestTryWrapping@ImGui@@YAXPEAUImGuiWindow@@H@Z"]
    pub fn ImGui_NavMoveRequestTryWrapping(window: *mut ImGuiWindow, move_flags: ImGuiNavMoveFlags);
}
extern "C" {
    #[link_name = "\u{1}?GetNavInputAmount@ImGui@@YAMHW4ImGuiInputReadMode@@@Z"]
    pub fn ImGui_GetNavInputAmount(n: ImGuiNavInput, mode: ImGuiInputReadMode) -> f32;
}
extern "C" {
    #[link_name = "\u{1}?GetNavInputAmount2d@ImGui@@YA?AUImVec2@@HW4ImGuiInputReadMode@@MM@Z"]
    pub fn ImGui_GetNavInputAmount2d(
        dir_sources: ImGuiNavDirSourceFlags,
        mode: ImGuiInputReadMode,
        slow_factor: f32,
        fast_factor: f32,
    ) -> ImVec2;
}
extern "C" {
    #[link_name = "\u{1}?CalcTypematicRepeatAmount@ImGui@@YAHMMMM@Z"]
    pub fn ImGui_CalcTypematicRepeatAmount(
        t0: f32,
        t1: f32,
        repeat_delay: f32,
        repeat_rate: f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ActivateItem@ImGui@@YAXI@Z"]
    pub fn ImGui_ActivateItem(id: ImGuiID);
}
extern "C" {
    #[link_name = "\u{1}?SetNavID@ImGui@@YAXIHI@Z"]
    pub fn ImGui_SetNavID(id: ImGuiID, nav_layer: ::std::os::raw::c_int, focus_scope_id: ImGuiID);
}
extern "C" {
    #[link_name = "\u{1}?SetNavIDWithRectRel@ImGui@@YAXIHIAEBUImRect@@@Z"]
    pub fn ImGui_SetNavIDWithRectRel(
        id: ImGuiID,
        nav_layer: ::std::os::raw::c_int,
        focus_scope_id: ImGuiID,
        rect_rel: *const ImRect,
    );
}
extern "C" {
    #[link_name = "\u{1}?PushFocusScope@ImGui@@YAXI@Z"]
    pub fn ImGui_PushFocusScope(id: ImGuiID);
}
extern "C" {
    #[link_name = "\u{1}?PopFocusScope@ImGui@@YAXXZ"]
    pub fn ImGui_PopFocusScope();
}
extern "C" {
    #[link_name = "\u{1}?IsMouseDragPastThreshold@ImGui@@YA_NHM@Z"]
    pub fn ImGui_IsMouseDragPastThreshold(button: ImGuiMouseButton, lock_threshold: f32) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?GetMergedKeyModFlags@ImGui@@YAHXZ"]
    pub fn ImGui_GetMergedKeyModFlags() -> ImGuiKeyModFlags;
}
extern "C" {
    #[link_name = "\u{1}?BeginDragDropTargetCustom@ImGui@@YA_NAEBUImRect@@I@Z"]
    pub fn ImGui_BeginDragDropTargetCustom(bb: *const ImRect, id: ImGuiID) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?ClearDragDrop@ImGui@@YAXXZ"]
    pub fn ImGui_ClearDragDrop();
}
extern "C" {
    #[link_name = "\u{1}?IsDragDropPayloadBeingAccepted@ImGui@@YA_NXZ"]
    pub fn ImGui_IsDragDropPayloadBeingAccepted() -> bool;
}
extern "C" {
    #[link_name = "\u{1}?SetWindowClipRectBeforeSetChannel@ImGui@@YAXPEAUImGuiWindow@@AEBUImRect@@@Z"]
    pub fn ImGui_SetWindowClipRectBeforeSetChannel(
        window: *mut ImGuiWindow,
        clip_rect: *const ImRect,
    );
}
extern "C" {
    #[link_name = "\u{1}?BeginColumns@ImGui@@YAXPEBDHH@Z"]
    pub fn ImGui_BeginColumns(
        str_id: *const ::std::os::raw::c_char,
        count: ::std::os::raw::c_int,
        flags: ImGuiOldColumnFlags,
    );
}
extern "C" {
    #[link_name = "\u{1}?EndColumns@ImGui@@YAXXZ"]
    pub fn ImGui_EndColumns();
}
extern "C" {
    #[link_name = "\u{1}?PushColumnClipRect@ImGui@@YAXH@Z"]
    pub fn ImGui_PushColumnClipRect(column_index: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}?PushColumnsBackground@ImGui@@YAXXZ"]
    pub fn ImGui_PushColumnsBackground();
}
extern "C" {
    #[link_name = "\u{1}?PopColumnsBackground@ImGui@@YAXXZ"]
    pub fn ImGui_PopColumnsBackground();
}
extern "C" {
    #[link_name = "\u{1}?GetColumnsID@ImGui@@YAIPEBDH@Z"]
    pub fn ImGui_GetColumnsID(
        str_id: *const ::std::os::raw::c_char,
        count: ::std::os::raw::c_int,
    ) -> ImGuiID;
}
extern "C" {
    #[link_name = "\u{1}?FindOrCreateColumns@ImGui@@YAPEAUImGuiOldColumns@@PEAUImGuiWindow@@I@Z"]
    pub fn ImGui_FindOrCreateColumns(window: *mut ImGuiWindow, id: ImGuiID)
        -> *mut ImGuiOldColumns;
}
extern "C" {
    #[link_name = "\u{1}?GetColumnOffsetFromNorm@ImGui@@YAMPEBUImGuiOldColumns@@M@Z"]
    pub fn ImGui_GetColumnOffsetFromNorm(columns: *const ImGuiOldColumns, offset_norm: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}?GetColumnNormFromOffset@ImGui@@YAMPEBUImGuiOldColumns@@M@Z"]
    pub fn ImGui_GetColumnNormFromOffset(columns: *const ImGuiOldColumns, offset: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}?BeginTabBarEx@ImGui@@YA_NPEAUImGuiTabBar@@AEBUImRect@@H@Z"]
    pub fn ImGui_BeginTabBarEx(
        tab_bar: *mut ImGuiTabBar,
        bb: *const ImRect,
        flags: ImGuiTabBarFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?TabBarFindTabByID@ImGui@@YAPEAUImGuiTabItem@@PEAUImGuiTabBar@@I@Z"]
    pub fn ImGui_TabBarFindTabByID(tab_bar: *mut ImGuiTabBar, tab_id: ImGuiID)
        -> *mut ImGuiTabItem;
}
extern "C" {
    #[link_name = "\u{1}?TabBarRemoveTab@ImGui@@YAXPEAUImGuiTabBar@@I@Z"]
    pub fn ImGui_TabBarRemoveTab(tab_bar: *mut ImGuiTabBar, tab_id: ImGuiID);
}
extern "C" {
    #[link_name = "\u{1}?TabBarCloseTab@ImGui@@YAXPEAUImGuiTabBar@@PEAUImGuiTabItem@@@Z"]
    pub fn ImGui_TabBarCloseTab(tab_bar: *mut ImGuiTabBar, tab: *mut ImGuiTabItem);
}
extern "C" {
    #[link_name = "\u{1}?TabBarQueueReorder@ImGui@@YAXPEAUImGuiTabBar@@PEBUImGuiTabItem@@H@Z"]
    pub fn ImGui_TabBarQueueReorder(
        tab_bar: *mut ImGuiTabBar,
        tab: *const ImGuiTabItem,
        dir: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}?TabBarProcessReorder@ImGui@@YA_NPEAUImGuiTabBar@@@Z"]
    pub fn ImGui_TabBarProcessReorder(tab_bar: *mut ImGuiTabBar) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?TabItemEx@ImGui@@YA_NPEAUImGuiTabBar@@PEBDPEA_NH@Z"]
    pub fn ImGui_TabItemEx(
        tab_bar: *mut ImGuiTabBar,
        label: *const ::std::os::raw::c_char,
        p_open: *mut bool,
        flags: ImGuiTabItemFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?TabItemCalcSize@ImGui@@YA?AUImVec2@@PEBD_N@Z"]
    pub fn ImGui_TabItemCalcSize(
        label: *const ::std::os::raw::c_char,
        has_close_button: bool,
    ) -> ImVec2;
}
extern "C" {
    #[link_name = "\u{1}?TabItemBackground@ImGui@@YAXPEAUImDrawList@@AEBUImRect@@HI@Z"]
    pub fn ImGui_TabItemBackground(
        draw_list: *mut ImDrawList,
        bb: *const ImRect,
        flags: ImGuiTabItemFlags,
        col: ImU32,
    );
}
extern "C" {
    #[link_name = "\u{1}?TabItemLabelAndCloseButton@ImGui@@YAXPEAUImDrawList@@AEBUImRect@@HUImVec2@@PEBDII_NPEA_N5@Z"]
    pub fn ImGui_TabItemLabelAndCloseButton(
        draw_list: *mut ImDrawList,
        bb: *const ImRect,
        flags: ImGuiTabItemFlags,
        frame_padding: ImVec2,
        label: *const ::std::os::raw::c_char,
        tab_id: ImGuiID,
        close_button_id: ImGuiID,
        is_contents_visible: bool,
        out_just_closed: *mut bool,
        out_text_clipped: *mut bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?RenderText@ImGui@@YAXUImVec2@@PEBD1_N@Z"]
    pub fn ImGui_RenderText(
        pos: ImVec2,
        text: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
        hide_text_after_hash: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?RenderTextWrapped@ImGui@@YAXUImVec2@@PEBD1M@Z"]
    pub fn ImGui_RenderTextWrapped(
        pos: ImVec2,
        text: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
        wrap_width: f32,
    );
}
extern "C" {
    #[link_name = "\u{1}?RenderTextClipped@ImGui@@YAXAEBUImVec2@@0PEBD1PEBU2@0PEBUImRect@@@Z"]
    pub fn ImGui_RenderTextClipped(
        pos_min: *const ImVec2,
        pos_max: *const ImVec2,
        text: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
        text_size_if_known: *const ImVec2,
        align: *const ImVec2,
        clip_rect: *const ImRect,
    );
}
extern "C" {
    #[link_name = "\u{1}?RenderTextClippedEx@ImGui@@YAXPEAUImDrawList@@AEBUImVec2@@1PEBD2PEBU3@1PEBUImRect@@@Z"]
    pub fn ImGui_RenderTextClippedEx(
        draw_list: *mut ImDrawList,
        pos_min: *const ImVec2,
        pos_max: *const ImVec2,
        text: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
        text_size_if_known: *const ImVec2,
        align: *const ImVec2,
        clip_rect: *const ImRect,
    );
}
extern "C" {
    #[link_name = "\u{1}?RenderTextEllipsis@ImGui@@YAXPEAUImDrawList@@AEBUImVec2@@1MMPEBD2PEBU3@@Z"]
    pub fn ImGui_RenderTextEllipsis(
        draw_list: *mut ImDrawList,
        pos_min: *const ImVec2,
        pos_max: *const ImVec2,
        clip_max_x: f32,
        ellipsis_max_x: f32,
        text: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
        text_size_if_known: *const ImVec2,
    );
}
extern "C" {
    #[link_name = "\u{1}?RenderFrame@ImGui@@YAXUImVec2@@0I_NM@Z"]
    pub fn ImGui_RenderFrame(
        p_min: ImVec2,
        p_max: ImVec2,
        fill_col: ImU32,
        border: bool,
        rounding: f32,
    );
}
extern "C" {
    #[link_name = "\u{1}?RenderFrameBorder@ImGui@@YAXUImVec2@@0M@Z"]
    pub fn ImGui_RenderFrameBorder(p_min: ImVec2, p_max: ImVec2, rounding: f32);
}
extern "C" {
    #[link_name = "\u{1}?RenderColorRectWithAlphaCheckerboard@ImGui@@YAXPEAUImDrawList@@UImVec2@@1IM1MH@Z"]
    pub fn ImGui_RenderColorRectWithAlphaCheckerboard(
        draw_list: *mut ImDrawList,
        p_min: ImVec2,
        p_max: ImVec2,
        fill_col: ImU32,
        grid_step: f32,
        grid_off: ImVec2,
        rounding: f32,
        rounding_corners_flags: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}?RenderNavHighlight@ImGui@@YAXAEBUImRect@@IH@Z"]
    pub fn ImGui_RenderNavHighlight(bb: *const ImRect, id: ImGuiID, flags: ImGuiNavHighlightFlags);
}
extern "C" {
    #[link_name = "\u{1}?FindRenderedTextEnd@ImGui@@YAPEBDPEBD0@Z"]
    pub fn ImGui_FindRenderedTextEnd(
        text: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}?LogRenderedText@ImGui@@YAXPEBUImVec2@@PEBD1@Z"]
    pub fn ImGui_LogRenderedText(
        ref_pos: *const ImVec2,
        text: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    #[link_name = "\u{1}?RenderArrow@ImGui@@YAXPEAUImDrawList@@UImVec2@@IHM@Z"]
    pub fn ImGui_RenderArrow(
        draw_list: *mut ImDrawList,
        pos: ImVec2,
        col: ImU32,
        dir: ImGuiDir,
        scale: f32,
    );
}
extern "C" {
    #[link_name = "\u{1}?RenderBullet@ImGui@@YAXPEAUImDrawList@@UImVec2@@I@Z"]
    pub fn ImGui_RenderBullet(draw_list: *mut ImDrawList, pos: ImVec2, col: ImU32);
}
extern "C" {
    #[link_name = "\u{1}?RenderCheckMark@ImGui@@YAXPEAUImDrawList@@UImVec2@@IM@Z"]
    pub fn ImGui_RenderCheckMark(draw_list: *mut ImDrawList, pos: ImVec2, col: ImU32, sz: f32);
}
extern "C" {
    #[link_name = "\u{1}?RenderMouseCursor@ImGui@@YAXPEAUImDrawList@@UImVec2@@MHIII@Z"]
    pub fn ImGui_RenderMouseCursor(
        draw_list: *mut ImDrawList,
        pos: ImVec2,
        scale: f32,
        mouse_cursor: ImGuiMouseCursor,
        col_fill: ImU32,
        col_border: ImU32,
        col_shadow: ImU32,
    );
}
extern "C" {
    #[link_name = "\u{1}?RenderArrowPointingAt@ImGui@@YAXPEAUImDrawList@@UImVec2@@1HI@Z"]
    pub fn ImGui_RenderArrowPointingAt(
        draw_list: *mut ImDrawList,
        pos: ImVec2,
        half_sz: ImVec2,
        direction: ImGuiDir,
        col: ImU32,
    );
}
extern "C" {
    #[link_name = "\u{1}?RenderRectFilledRangeH@ImGui@@YAXPEAUImDrawList@@AEBUImRect@@IMMM@Z"]
    pub fn ImGui_RenderRectFilledRangeH(
        draw_list: *mut ImDrawList,
        rect: *const ImRect,
        col: ImU32,
        x_start_norm: f32,
        x_end_norm: f32,
        rounding: f32,
    );
}
extern "C" {
    #[link_name = "\u{1}?RenderRectFilledWithHole@ImGui@@YAXPEAUImDrawList@@UImRect@@1IM@Z"]
    pub fn ImGui_RenderRectFilledWithHole(
        draw_list: *mut ImDrawList,
        outer: ImRect,
        inner: ImRect,
        col: ImU32,
        rounding: f32,
    );
}
extern "C" {
    #[link_name = "\u{1}?TextEx@ImGui@@YAXPEBD0H@Z"]
    pub fn ImGui_TextEx(
        text: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
        flags: ImGuiTextFlags,
    );
}
extern "C" {
    #[link_name = "\u{1}?ButtonEx@ImGui@@YA_NPEBDAEBUImVec2@@H@Z"]
    pub fn ImGui_ButtonEx(
        label: *const ::std::os::raw::c_char,
        size_arg: *const ImVec2,
        flags: ImGuiButtonFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?CloseButton@ImGui@@YA_NIAEBUImVec2@@@Z"]
    pub fn ImGui_CloseButton(id: ImGuiID, pos: *const ImVec2) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?CollapseButton@ImGui@@YA_NIAEBUImVec2@@@Z"]
    pub fn ImGui_CollapseButton(id: ImGuiID, pos: *const ImVec2) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?ArrowButtonEx@ImGui@@YA_NPEBDHUImVec2@@H@Z"]
    pub fn ImGui_ArrowButtonEx(
        str_id: *const ::std::os::raw::c_char,
        dir: ImGuiDir,
        size_arg: ImVec2,
        flags: ImGuiButtonFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?Scrollbar@ImGui@@YAXW4ImGuiAxis@@@Z"]
    pub fn ImGui_Scrollbar(axis: ImGuiAxis);
}
extern "C" {
    #[link_name = "\u{1}?ScrollbarEx@ImGui@@YA_NAEBUImRect@@IW4ImGuiAxis@@PEAMMMH@Z"]
    pub fn ImGui_ScrollbarEx(
        bb: *const ImRect,
        id: ImGuiID,
        axis: ImGuiAxis,
        p_scroll_v: *mut f32,
        avail_v: f32,
        contents_v: f32,
        rounding_corners: ImDrawCornerFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?ImageButtonEx@ImGui@@YA_NIPEAXAEBUImVec2@@111AEBUImVec4@@2@Z"]
    pub fn ImGui_ImageButtonEx(
        id: ImGuiID,
        texture_id: ImTextureID,
        size: *const ImVec2,
        uv0: *const ImVec2,
        uv1: *const ImVec2,
        padding: *const ImVec2,
        bg_col: *const ImVec4,
        tint_col: *const ImVec4,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?GetWindowScrollbarRect@ImGui@@YA?AUImRect@@PEAUImGuiWindow@@W4ImGuiAxis@@@Z"]
    pub fn ImGui_GetWindowScrollbarRect(window: *mut ImGuiWindow, axis: ImGuiAxis) -> ImRect;
}
extern "C" {
    #[link_name = "\u{1}?GetWindowScrollbarID@ImGui@@YAIPEAUImGuiWindow@@W4ImGuiAxis@@@Z"]
    pub fn ImGui_GetWindowScrollbarID(window: *mut ImGuiWindow, axis: ImGuiAxis) -> ImGuiID;
}
extern "C" {
    #[link_name = "\u{1}?GetWindowResizeID@ImGui@@YAIPEAUImGuiWindow@@H@Z"]
    pub fn ImGui_GetWindowResizeID(window: *mut ImGuiWindow, n: ::std::os::raw::c_int) -> ImGuiID;
}
extern "C" {
    #[link_name = "\u{1}?SeparatorEx@ImGui@@YAXH@Z"]
    pub fn ImGui_SeparatorEx(flags: ImGuiSeparatorFlags);
}
extern "C" {
    #[link_name = "\u{1}?ButtonBehavior@ImGui@@YA_NAEBUImRect@@IPEA_N1H@Z"]
    pub fn ImGui_ButtonBehavior(
        bb: *const ImRect,
        id: ImGuiID,
        out_hovered: *mut bool,
        out_held: *mut bool,
        flags: ImGuiButtonFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?DragBehavior@ImGui@@YA_NIHPEAXMPEBX1PEBDH@Z"]
    pub fn ImGui_DragBehavior(
        id: ImGuiID,
        data_type: ImGuiDataType,
        p_v: *mut ::std::os::raw::c_void,
        v_speed: f32,
        p_min: *const ::std::os::raw::c_void,
        p_max: *const ::std::os::raw::c_void,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?SliderBehavior@ImGui@@YA_NAEBUImRect@@IHPEAXPEBX2PEBDHPEAU2@@Z"]
    pub fn ImGui_SliderBehavior(
        bb: *const ImRect,
        id: ImGuiID,
        data_type: ImGuiDataType,
        p_v: *mut ::std::os::raw::c_void,
        p_min: *const ::std::os::raw::c_void,
        p_max: *const ::std::os::raw::c_void,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
        out_grab_bb: *mut ImRect,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?SplitterBehavior@ImGui@@YA_NAEBUImRect@@IW4ImGuiAxis@@PEAM2MMMM@Z"]
    pub fn ImGui_SplitterBehavior(
        bb: *const ImRect,
        id: ImGuiID,
        axis: ImGuiAxis,
        size1: *mut f32,
        size2: *mut f32,
        min_size1: f32,
        min_size2: f32,
        hover_extend: f32,
        hover_visibility_delay: f32,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?TreeNodeBehavior@ImGui@@YA_NIHPEBD0@Z"]
    pub fn ImGui_TreeNodeBehavior(
        id: ImGuiID,
        flags: ImGuiTreeNodeFlags,
        label: *const ::std::os::raw::c_char,
        label_end: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?TreeNodeBehaviorIsOpen@ImGui@@YA_NIH@Z"]
    pub fn ImGui_TreeNodeBehaviorIsOpen(id: ImGuiID, flags: ImGuiTreeNodeFlags) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?TreePushOverrideID@ImGui@@YAXI@Z"]
    pub fn ImGui_TreePushOverrideID(id: ImGuiID);
}
extern "C" {
    #[link_name = "\u{1}?DataTypeGetInfo@ImGui@@YAPEBUImGuiDataTypeInfo@@H@Z"]
    pub fn ImGui_DataTypeGetInfo(data_type: ImGuiDataType) -> *const ImGuiDataTypeInfo;
}
extern "C" {
    #[link_name = "\u{1}?DataTypeFormatString@ImGui@@YAHPEADHHPEBXPEBD@Z"]
    pub fn ImGui_DataTypeFormatString(
        buf: *mut ::std::os::raw::c_char,
        buf_size: ::std::os::raw::c_int,
        data_type: ImGuiDataType,
        p_data: *const ::std::os::raw::c_void,
        format: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?DataTypeApplyOp@ImGui@@YAXHHPEAXPEBX1@Z"]
    pub fn ImGui_DataTypeApplyOp(
        data_type: ImGuiDataType,
        op: ::std::os::raw::c_int,
        output: *mut ::std::os::raw::c_void,
        arg_1: *const ::std::os::raw::c_void,
        arg_2: *const ::std::os::raw::c_void,
    );
}
extern "C" {
    #[link_name = "\u{1}?DataTypeApplyOpFromText@ImGui@@YA_NPEBD0HPEAX0@Z"]
    pub fn ImGui_DataTypeApplyOpFromText(
        buf: *const ::std::os::raw::c_char,
        initial_value_buf: *const ::std::os::raw::c_char,
        data_type: ImGuiDataType,
        p_data: *mut ::std::os::raw::c_void,
        format: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?DataTypeCompare@ImGui@@YAHHPEBX0@Z"]
    pub fn ImGui_DataTypeCompare(
        data_type: ImGuiDataType,
        arg_1: *const ::std::os::raw::c_void,
        arg_2: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?DataTypeClamp@ImGui@@YA_NHPEAXPEBX1@Z"]
    pub fn ImGui_DataTypeClamp(
        data_type: ImGuiDataType,
        p_data: *mut ::std::os::raw::c_void,
        p_min: *const ::std::os::raw::c_void,
        p_max: *const ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?InputTextEx@ImGui@@YA_NPEBD0PEADHAEBUImVec2@@HP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z"]
    pub fn ImGui_InputTextEx(
        label: *const ::std::os::raw::c_char,
        hint: *const ::std::os::raw::c_char,
        buf: *mut ::std::os::raw::c_char,
        buf_size: ::std::os::raw::c_int,
        size_arg: *const ImVec2,
        flags: ImGuiInputTextFlags,
        callback: ImGuiInputTextCallback,
        user_data: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?TempInputText@ImGui@@YA_NAEBUImRect@@IPEBDPEADHH@Z"]
    pub fn ImGui_TempInputText(
        bb: *const ImRect,
        id: ImGuiID,
        label: *const ::std::os::raw::c_char,
        buf: *mut ::std::os::raw::c_char,
        buf_size: ::std::os::raw::c_int,
        flags: ImGuiInputTextFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?TempInputScalar@ImGui@@YA_NAEBUImRect@@IPEBDHPEAX1PEBX3@Z"]
    pub fn ImGui_TempInputScalar(
        bb: *const ImRect,
        id: ImGuiID,
        label: *const ::std::os::raw::c_char,
        data_type: ImGuiDataType,
        p_data: *mut ::std::os::raw::c_void,
        format: *const ::std::os::raw::c_char,
        p_clamp_min: *const ::std::os::raw::c_void,
        p_clamp_max: *const ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?ColorTooltip@ImGui@@YAXPEBDPEBMH@Z"]
    pub fn ImGui_ColorTooltip(
        text: *const ::std::os::raw::c_char,
        col: *const f32,
        flags: ImGuiColorEditFlags,
    );
}
extern "C" {
    #[link_name = "\u{1}?ColorEditOptionsPopup@ImGui@@YAXPEBMH@Z"]
    pub fn ImGui_ColorEditOptionsPopup(col: *const f32, flags: ImGuiColorEditFlags);
}
extern "C" {
    #[link_name = "\u{1}?ColorPickerOptionsPopup@ImGui@@YAXPEBMH@Z"]
    pub fn ImGui_ColorPickerOptionsPopup(ref_col: *const f32, flags: ImGuiColorEditFlags);
}
extern "C" {
    #[link_name = "\u{1}?PlotEx@ImGui@@YAHW4ImGuiPlotType@@PEBDP6AMPEAXH@Z2HH1MMUImVec2@@@Z"]
    pub fn ImGui_PlotEx(
        plot_type: ImGuiPlotType,
        label: *const ::std::os::raw::c_char,
        values_getter: ::std::option::Option<
            unsafe extern "C" fn(
                data: *mut ::std::os::raw::c_void,
                idx: ::std::os::raw::c_int,
            ) -> f32,
        >,
        data: *mut ::std::os::raw::c_void,
        values_count: ::std::os::raw::c_int,
        values_offset: ::std::os::raw::c_int,
        overlay_text: *const ::std::os::raw::c_char,
        scale_min: f32,
        scale_max: f32,
        frame_size: ImVec2,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ShadeVertsLinearColorGradientKeepAlpha@ImGui@@YAXPEAUImDrawList@@HHUImVec2@@1II@Z"]
    pub fn ImGui_ShadeVertsLinearColorGradientKeepAlpha(
        draw_list: *mut ImDrawList,
        vert_start_idx: ::std::os::raw::c_int,
        vert_end_idx: ::std::os::raw::c_int,
        gradient_p0: ImVec2,
        gradient_p1: ImVec2,
        col0: ImU32,
        col1: ImU32,
    );
}
extern "C" {
    #[link_name = "\u{1}?ShadeVertsLinearUV@ImGui@@YAXPEAUImDrawList@@HHAEBUImVec2@@111_N@Z"]
    pub fn ImGui_ShadeVertsLinearUV(
        draw_list: *mut ImDrawList,
        vert_start_idx: ::std::os::raw::c_int,
        vert_end_idx: ::std::os::raw::c_int,
        a: *const ImVec2,
        b: *const ImVec2,
        uv_a: *const ImVec2,
        uv_b: *const ImVec2,
        clamp: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?GcCompactTransientMiscBuffers@ImGui@@YAXXZ"]
    pub fn ImGui_GcCompactTransientMiscBuffers();
}
extern "C" {
    #[link_name = "\u{1}?GcCompactTransientWindowBuffers@ImGui@@YAXPEAUImGuiWindow@@@Z"]
    pub fn ImGui_GcCompactTransientWindowBuffers(window: *mut ImGuiWindow);
}
extern "C" {
    #[link_name = "\u{1}?GcAwakeTransientWindowBuffers@ImGui@@YAXPEAUImGuiWindow@@@Z"]
    pub fn ImGui_GcAwakeTransientWindowBuffers(window: *mut ImGuiWindow);
}
extern "C" {
    #[link_name = "\u{1}?ErrorCheckEndFrameRecover@ImGui@@YAXP6AXPEAXPEBDZZ0@Z"]
    pub fn ImGui_ErrorCheckEndFrameRecover(
        log_callback: ImGuiErrorLogCallback,
        user_data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    #[link_name = "\u{1}?DebugNodeColumns@ImGui@@YAXPEAUImGuiOldColumns@@@Z"]
    pub fn ImGui_DebugNodeColumns(columns: *mut ImGuiOldColumns);
}
extern "C" {
    #[link_name = "\u{1}?DebugNodeDrawList@ImGui@@YAXPEAUImGuiWindow@@PEBUImDrawList@@PEBD@Z"]
    pub fn ImGui_DebugNodeDrawList(
        window: *mut ImGuiWindow,
        draw_list: *const ImDrawList,
        label: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    #[link_name = "\u{1}?DebugNodeDrawCmdShowMeshAndBoundingBox@ImGui@@YAXPEAUImGuiWindow@@PEBUImDrawList@@PEBUImDrawCmd@@_N3@Z"]
    pub fn ImGui_DebugNodeDrawCmdShowMeshAndBoundingBox(
        window: *mut ImGuiWindow,
        draw_list: *const ImDrawList,
        draw_cmd: *const ImDrawCmd,
        show_mesh: bool,
        show_aabb: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?DebugNodeStorage@ImGui@@YAXPEAUImGuiStorage@@PEBD@Z"]
    pub fn ImGui_DebugNodeStorage(storage: *mut ImGuiStorage, label: *const ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "\u{1}?DebugNodeTabBar@ImGui@@YAXPEAUImGuiTabBar@@PEBD@Z"]
    pub fn ImGui_DebugNodeTabBar(tab_bar: *mut ImGuiTabBar, label: *const ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "\u{1}?DebugNodeWindow@ImGui@@YAXPEAUImGuiWindow@@PEBD@Z"]
    pub fn ImGui_DebugNodeWindow(window: *mut ImGuiWindow, label: *const ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "\u{1}?DebugNodeWindowSettings@ImGui@@YAXPEAUImGuiWindowSettings@@@Z"]
    pub fn ImGui_DebugNodeWindowSettings(settings: *mut ImGuiWindowSettings);
}
extern "C" {
    #[link_name = "\u{1}?DebugNodeWindowsList@ImGui@@YAXPEAU?$ImVector@PEAUImGuiWindow@@@@PEBD@Z"]
    pub fn ImGui_DebugNodeWindowsList(
        windows: *mut ImVector<*mut ImGuiWindow>,
        label: *const ::std::os::raw::c_char,
    );
}
pub const ImGuiWindowFlags_None: ImGuiWindowFlags_ = 0;
pub const ImGuiWindowFlags_NoTitleBar: ImGuiWindowFlags_ = 1;
pub const ImGuiWindowFlags_NoResize: ImGuiWindowFlags_ = 2;
pub const ImGuiWindowFlags_NoMove: ImGuiWindowFlags_ = 4;
pub const ImGuiWindowFlags_NoScrollbar: ImGuiWindowFlags_ = 8;
pub const ImGuiWindowFlags_NoScrollWithMouse: ImGuiWindowFlags_ = 16;
pub const ImGuiWindowFlags_NoCollapse: ImGuiWindowFlags_ = 32;
pub const ImGuiWindowFlags_AlwaysAutoResize: ImGuiWindowFlags_ = 64;
pub const ImGuiWindowFlags_NoBackground: ImGuiWindowFlags_ = 128;
pub const ImGuiWindowFlags_NoSavedSettings: ImGuiWindowFlags_ = 256;
pub const ImGuiWindowFlags_NoMouseInputs: ImGuiWindowFlags_ = 512;
pub const ImGuiWindowFlags_MenuBar: ImGuiWindowFlags_ = 1024;
pub const ImGuiWindowFlags_HorizontalScrollbar: ImGuiWindowFlags_ = 2048;
pub const ImGuiWindowFlags_NoFocusOnAppearing: ImGuiWindowFlags_ = 4096;
pub const ImGuiWindowFlags_NoBringToFrontOnFocus: ImGuiWindowFlags_ = 8192;
pub const ImGuiWindowFlags_AlwaysVerticalScrollbar: ImGuiWindowFlags_ = 16384;
pub const ImGuiWindowFlags_AlwaysHorizontalScrollbar: ImGuiWindowFlags_ = 32768;
pub const ImGuiWindowFlags_AlwaysUseWindowPadding: ImGuiWindowFlags_ = 65536;
pub const ImGuiWindowFlags_NoNavInputs: ImGuiWindowFlags_ = 262144;
pub const ImGuiWindowFlags_NoNavFocus: ImGuiWindowFlags_ = 524288;
pub const ImGuiWindowFlags_UnsavedDocument: ImGuiWindowFlags_ = 1048576;
pub const ImGuiWindowFlags_NoNav: ImGuiWindowFlags_ = 786432;
pub const ImGuiWindowFlags_NoDecoration: ImGuiWindowFlags_ = 43;
pub const ImGuiWindowFlags_NoInputs: ImGuiWindowFlags_ = 786944;
pub const ImGuiWindowFlags_NavFlattened: ImGuiWindowFlags_ = 8388608;
pub const ImGuiWindowFlags_ChildWindow: ImGuiWindowFlags_ = 16777216;
pub const ImGuiWindowFlags_Tooltip: ImGuiWindowFlags_ = 33554432;
pub const ImGuiWindowFlags_Popup: ImGuiWindowFlags_ = 67108864;
pub const ImGuiWindowFlags_Modal: ImGuiWindowFlags_ = 134217728;
pub const ImGuiWindowFlags_ChildMenu: ImGuiWindowFlags_ = 268435456;
pub type ImGuiWindowFlags_ = ::std::os::raw::c_int;
pub const ImGuiInputTextFlags_None: ImGuiInputTextFlags_ = 0;
pub const ImGuiInputTextFlags_CharsDecimal: ImGuiInputTextFlags_ = 1;
pub const ImGuiInputTextFlags_CharsHexadecimal: ImGuiInputTextFlags_ = 2;
pub const ImGuiInputTextFlags_CharsUppercase: ImGuiInputTextFlags_ = 4;
pub const ImGuiInputTextFlags_CharsNoBlank: ImGuiInputTextFlags_ = 8;
pub const ImGuiInputTextFlags_AutoSelectAll: ImGuiInputTextFlags_ = 16;
pub const ImGuiInputTextFlags_EnterReturnsTrue: ImGuiInputTextFlags_ = 32;
pub const ImGuiInputTextFlags_CallbackCompletion: ImGuiInputTextFlags_ = 64;
pub const ImGuiInputTextFlags_CallbackHistory: ImGuiInputTextFlags_ = 128;
pub const ImGuiInputTextFlags_CallbackAlways: ImGuiInputTextFlags_ = 256;
pub const ImGuiInputTextFlags_CallbackCharFilter: ImGuiInputTextFlags_ = 512;
pub const ImGuiInputTextFlags_AllowTabInput: ImGuiInputTextFlags_ = 1024;
pub const ImGuiInputTextFlags_CtrlEnterForNewLine: ImGuiInputTextFlags_ = 2048;
pub const ImGuiInputTextFlags_NoHorizontalScroll: ImGuiInputTextFlags_ = 4096;
pub const ImGuiInputTextFlags_AlwaysInsertMode: ImGuiInputTextFlags_ = 8192;
pub const ImGuiInputTextFlags_ReadOnly: ImGuiInputTextFlags_ = 16384;
pub const ImGuiInputTextFlags_Password: ImGuiInputTextFlags_ = 32768;
pub const ImGuiInputTextFlags_NoUndoRedo: ImGuiInputTextFlags_ = 65536;
pub const ImGuiInputTextFlags_CharsScientific: ImGuiInputTextFlags_ = 131072;
pub const ImGuiInputTextFlags_CallbackResize: ImGuiInputTextFlags_ = 262144;
pub const ImGuiInputTextFlags_CallbackEdit: ImGuiInputTextFlags_ = 524288;
pub const ImGuiInputTextFlags_Multiline: ImGuiInputTextFlags_ = 1048576;
pub const ImGuiInputTextFlags_NoMarkEdited: ImGuiInputTextFlags_ = 2097152;
pub type ImGuiInputTextFlags_ = ::std::os::raw::c_int;
pub const ImGuiTreeNodeFlags_None: ImGuiTreeNodeFlags_ = 0;
pub const ImGuiTreeNodeFlags_Selected: ImGuiTreeNodeFlags_ = 1;
pub const ImGuiTreeNodeFlags_Framed: ImGuiTreeNodeFlags_ = 2;
pub const ImGuiTreeNodeFlags_AllowItemOverlap: ImGuiTreeNodeFlags_ = 4;
pub const ImGuiTreeNodeFlags_NoTreePushOnOpen: ImGuiTreeNodeFlags_ = 8;
pub const ImGuiTreeNodeFlags_NoAutoOpenOnLog: ImGuiTreeNodeFlags_ = 16;
pub const ImGuiTreeNodeFlags_DefaultOpen: ImGuiTreeNodeFlags_ = 32;
pub const ImGuiTreeNodeFlags_OpenOnDoubleClick: ImGuiTreeNodeFlags_ = 64;
pub const ImGuiTreeNodeFlags_OpenOnArrow: ImGuiTreeNodeFlags_ = 128;
pub const ImGuiTreeNodeFlags_Leaf: ImGuiTreeNodeFlags_ = 256;
pub const ImGuiTreeNodeFlags_Bullet: ImGuiTreeNodeFlags_ = 512;
pub const ImGuiTreeNodeFlags_FramePadding: ImGuiTreeNodeFlags_ = 1024;
pub const ImGuiTreeNodeFlags_SpanAvailWidth: ImGuiTreeNodeFlags_ = 2048;
pub const ImGuiTreeNodeFlags_SpanFullWidth: ImGuiTreeNodeFlags_ = 4096;
pub const ImGuiTreeNodeFlags_NavLeftJumpsBackHere: ImGuiTreeNodeFlags_ = 8192;
pub const ImGuiTreeNodeFlags_CollapsingHeader: ImGuiTreeNodeFlags_ = 26;
pub type ImGuiTreeNodeFlags_ = ::std::os::raw::c_int;
pub const ImGuiPopupFlags_None: ImGuiPopupFlags_ = 0;
pub const ImGuiPopupFlags_MouseButtonLeft: ImGuiPopupFlags_ = 0;
pub const ImGuiPopupFlags_MouseButtonRight: ImGuiPopupFlags_ = 1;
pub const ImGuiPopupFlags_MouseButtonMiddle: ImGuiPopupFlags_ = 2;
pub const ImGuiPopupFlags_MouseButtonMask_: ImGuiPopupFlags_ = 31;
pub const ImGuiPopupFlags_MouseButtonDefault_: ImGuiPopupFlags_ = 1;
pub const ImGuiPopupFlags_NoOpenOverExistingPopup: ImGuiPopupFlags_ = 32;
pub const ImGuiPopupFlags_NoOpenOverItems: ImGuiPopupFlags_ = 64;
pub const ImGuiPopupFlags_AnyPopupId: ImGuiPopupFlags_ = 128;
pub const ImGuiPopupFlags_AnyPopupLevel: ImGuiPopupFlags_ = 256;
pub const ImGuiPopupFlags_AnyPopup: ImGuiPopupFlags_ = 384;
pub type ImGuiPopupFlags_ = ::std::os::raw::c_int;
pub const ImGuiSelectableFlags_None: ImGuiSelectableFlags_ = 0;
pub const ImGuiSelectableFlags_DontClosePopups: ImGuiSelectableFlags_ = 1;
pub const ImGuiSelectableFlags_SpanAllColumns: ImGuiSelectableFlags_ = 2;
pub const ImGuiSelectableFlags_AllowDoubleClick: ImGuiSelectableFlags_ = 4;
pub const ImGuiSelectableFlags_Disabled: ImGuiSelectableFlags_ = 8;
pub const ImGuiSelectableFlags_AllowItemOverlap: ImGuiSelectableFlags_ = 16;
pub type ImGuiSelectableFlags_ = ::std::os::raw::c_int;
pub const ImGuiComboFlags_None: ImGuiComboFlags_ = 0;
pub const ImGuiComboFlags_PopupAlignLeft: ImGuiComboFlags_ = 1;
pub const ImGuiComboFlags_HeightSmall: ImGuiComboFlags_ = 2;
pub const ImGuiComboFlags_HeightRegular: ImGuiComboFlags_ = 4;
pub const ImGuiComboFlags_HeightLarge: ImGuiComboFlags_ = 8;
pub const ImGuiComboFlags_HeightLargest: ImGuiComboFlags_ = 16;
pub const ImGuiComboFlags_NoArrowButton: ImGuiComboFlags_ = 32;
pub const ImGuiComboFlags_NoPreview: ImGuiComboFlags_ = 64;
pub const ImGuiComboFlags_HeightMask_: ImGuiComboFlags_ = 30;
pub type ImGuiComboFlags_ = ::std::os::raw::c_int;
pub const ImGuiTabBarFlags_None: ImGuiTabBarFlags_ = 0;
pub const ImGuiTabBarFlags_Reorderable: ImGuiTabBarFlags_ = 1;
pub const ImGuiTabBarFlags_AutoSelectNewTabs: ImGuiTabBarFlags_ = 2;
pub const ImGuiTabBarFlags_TabListPopupButton: ImGuiTabBarFlags_ = 4;
pub const ImGuiTabBarFlags_NoCloseWithMiddleMouseButton: ImGuiTabBarFlags_ = 8;
pub const ImGuiTabBarFlags_NoTabListScrollingButtons: ImGuiTabBarFlags_ = 16;
pub const ImGuiTabBarFlags_NoTooltip: ImGuiTabBarFlags_ = 32;
pub const ImGuiTabBarFlags_FittingPolicyResizeDown: ImGuiTabBarFlags_ = 64;
pub const ImGuiTabBarFlags_FittingPolicyScroll: ImGuiTabBarFlags_ = 128;
pub const ImGuiTabBarFlags_FittingPolicyMask_: ImGuiTabBarFlags_ = 192;
pub const ImGuiTabBarFlags_FittingPolicyDefault_: ImGuiTabBarFlags_ = 64;
pub type ImGuiTabBarFlags_ = ::std::os::raw::c_int;
pub const ImGuiTabItemFlags_None: ImGuiTabItemFlags_ = 0;
pub const ImGuiTabItemFlags_UnsavedDocument: ImGuiTabItemFlags_ = 1;
pub const ImGuiTabItemFlags_SetSelected: ImGuiTabItemFlags_ = 2;
pub const ImGuiTabItemFlags_NoCloseWithMiddleMouseButton: ImGuiTabItemFlags_ = 4;
pub const ImGuiTabItemFlags_NoPushId: ImGuiTabItemFlags_ = 8;
pub const ImGuiTabItemFlags_NoTooltip: ImGuiTabItemFlags_ = 16;
pub const ImGuiTabItemFlags_NoReorder: ImGuiTabItemFlags_ = 32;
pub const ImGuiTabItemFlags_Leading: ImGuiTabItemFlags_ = 64;
pub const ImGuiTabItemFlags_Trailing: ImGuiTabItemFlags_ = 128;
pub type ImGuiTabItemFlags_ = ::std::os::raw::c_int;
pub const ImGuiFocusedFlags_None: ImGuiFocusedFlags_ = 0;
pub const ImGuiFocusedFlags_ChildWindows: ImGuiFocusedFlags_ = 1;
pub const ImGuiFocusedFlags_RootWindow: ImGuiFocusedFlags_ = 2;
pub const ImGuiFocusedFlags_AnyWindow: ImGuiFocusedFlags_ = 4;
pub const ImGuiFocusedFlags_RootAndChildWindows: ImGuiFocusedFlags_ = 3;
pub type ImGuiFocusedFlags_ = ::std::os::raw::c_int;
pub const ImGuiHoveredFlags_None: ImGuiHoveredFlags_ = 0;
pub const ImGuiHoveredFlags_ChildWindows: ImGuiHoveredFlags_ = 1;
pub const ImGuiHoveredFlags_RootWindow: ImGuiHoveredFlags_ = 2;
pub const ImGuiHoveredFlags_AnyWindow: ImGuiHoveredFlags_ = 4;
pub const ImGuiHoveredFlags_AllowWhenBlockedByPopup: ImGuiHoveredFlags_ = 8;
pub const ImGuiHoveredFlags_AllowWhenBlockedByActiveItem: ImGuiHoveredFlags_ = 32;
pub const ImGuiHoveredFlags_AllowWhenOverlapped: ImGuiHoveredFlags_ = 64;
pub const ImGuiHoveredFlags_AllowWhenDisabled: ImGuiHoveredFlags_ = 128;
pub const ImGuiHoveredFlags_RectOnly: ImGuiHoveredFlags_ = 104;
pub const ImGuiHoveredFlags_RootAndChildWindows: ImGuiHoveredFlags_ = 3;
pub type ImGuiHoveredFlags_ = ::std::os::raw::c_int;
pub const ImGuiDragDropFlags_None: ImGuiDragDropFlags_ = 0;
pub const ImGuiDragDropFlags_SourceNoPreviewTooltip: ImGuiDragDropFlags_ = 1;
pub const ImGuiDragDropFlags_SourceNoDisableHover: ImGuiDragDropFlags_ = 2;
pub const ImGuiDragDropFlags_SourceNoHoldToOpenOthers: ImGuiDragDropFlags_ = 4;
pub const ImGuiDragDropFlags_SourceAllowNullID: ImGuiDragDropFlags_ = 8;
pub const ImGuiDragDropFlags_SourceExtern: ImGuiDragDropFlags_ = 16;
pub const ImGuiDragDropFlags_SourceAutoExpirePayload: ImGuiDragDropFlags_ = 32;
pub const ImGuiDragDropFlags_AcceptBeforeDelivery: ImGuiDragDropFlags_ = 1024;
pub const ImGuiDragDropFlags_AcceptNoDrawDefaultRect: ImGuiDragDropFlags_ = 2048;
pub const ImGuiDragDropFlags_AcceptNoPreviewTooltip: ImGuiDragDropFlags_ = 4096;
pub const ImGuiDragDropFlags_AcceptPeekOnly: ImGuiDragDropFlags_ = 3072;
pub type ImGuiDragDropFlags_ = ::std::os::raw::c_int;
pub const ImGuiDataType_S8: ImGuiDataType_ = 0;
pub const ImGuiDataType_U8: ImGuiDataType_ = 1;
pub const ImGuiDataType_S16: ImGuiDataType_ = 2;
pub const ImGuiDataType_U16: ImGuiDataType_ = 3;
pub const ImGuiDataType_S32: ImGuiDataType_ = 4;
pub const ImGuiDataType_U32: ImGuiDataType_ = 5;
pub const ImGuiDataType_S64: ImGuiDataType_ = 6;
pub const ImGuiDataType_U64: ImGuiDataType_ = 7;
pub const ImGuiDataType_Float: ImGuiDataType_ = 8;
pub const ImGuiDataType_Double: ImGuiDataType_ = 9;
pub const ImGuiDataType_COUNT: ImGuiDataType_ = 10;
pub type ImGuiDataType_ = ::std::os::raw::c_int;
pub const ImGuiDir_None: ImGuiDir_ = -1;
pub const ImGuiDir_Left: ImGuiDir_ = 0;
pub const ImGuiDir_Right: ImGuiDir_ = 1;
pub const ImGuiDir_Up: ImGuiDir_ = 2;
pub const ImGuiDir_Down: ImGuiDir_ = 3;
pub const ImGuiDir_COUNT: ImGuiDir_ = 4;
pub type ImGuiDir_ = ::std::os::raw::c_int;
pub const ImGuiKey_Tab: ImGuiKey_ = 0;
pub const ImGuiKey_LeftArrow: ImGuiKey_ = 1;
pub const ImGuiKey_RightArrow: ImGuiKey_ = 2;
pub const ImGuiKey_UpArrow: ImGuiKey_ = 3;
pub const ImGuiKey_DownArrow: ImGuiKey_ = 4;
pub const ImGuiKey_PageUp: ImGuiKey_ = 5;
pub const ImGuiKey_PageDown: ImGuiKey_ = 6;
pub const ImGuiKey_Home: ImGuiKey_ = 7;
pub const ImGuiKey_End: ImGuiKey_ = 8;
pub const ImGuiKey_Insert: ImGuiKey_ = 9;
pub const ImGuiKey_Delete: ImGuiKey_ = 10;
pub const ImGuiKey_Backspace: ImGuiKey_ = 11;
pub const ImGuiKey_Space: ImGuiKey_ = 12;
pub const ImGuiKey_Enter: ImGuiKey_ = 13;
pub const ImGuiKey_Escape: ImGuiKey_ = 14;
pub const ImGuiKey_KeyPadEnter: ImGuiKey_ = 15;
pub const ImGuiKey_A: ImGuiKey_ = 16;
pub const ImGuiKey_C: ImGuiKey_ = 17;
pub const ImGuiKey_V: ImGuiKey_ = 18;
pub const ImGuiKey_X: ImGuiKey_ = 19;
pub const ImGuiKey_Y: ImGuiKey_ = 20;
pub const ImGuiKey_Z: ImGuiKey_ = 21;
pub const ImGuiKey_COUNT: ImGuiKey_ = 22;
pub type ImGuiKey_ = ::std::os::raw::c_int;
pub const ImGuiKeyModFlags_None: ImGuiKeyModFlags_ = 0;
pub const ImGuiKeyModFlags_Ctrl: ImGuiKeyModFlags_ = 1;
pub const ImGuiKeyModFlags_Shift: ImGuiKeyModFlags_ = 2;
pub const ImGuiKeyModFlags_Alt: ImGuiKeyModFlags_ = 4;
pub const ImGuiKeyModFlags_Super: ImGuiKeyModFlags_ = 8;
pub type ImGuiKeyModFlags_ = ::std::os::raw::c_int;
pub const ImGuiNavInput_Activate: ImGuiNavInput_ = 0;
pub const ImGuiNavInput_Cancel: ImGuiNavInput_ = 1;
pub const ImGuiNavInput_Input: ImGuiNavInput_ = 2;
pub const ImGuiNavInput_Menu: ImGuiNavInput_ = 3;
pub const ImGuiNavInput_DpadLeft: ImGuiNavInput_ = 4;
pub const ImGuiNavInput_DpadRight: ImGuiNavInput_ = 5;
pub const ImGuiNavInput_DpadUp: ImGuiNavInput_ = 6;
pub const ImGuiNavInput_DpadDown: ImGuiNavInput_ = 7;
pub const ImGuiNavInput_LStickLeft: ImGuiNavInput_ = 8;
pub const ImGuiNavInput_LStickRight: ImGuiNavInput_ = 9;
pub const ImGuiNavInput_LStickUp: ImGuiNavInput_ = 10;
pub const ImGuiNavInput_LStickDown: ImGuiNavInput_ = 11;
pub const ImGuiNavInput_FocusPrev: ImGuiNavInput_ = 12;
pub const ImGuiNavInput_FocusNext: ImGuiNavInput_ = 13;
pub const ImGuiNavInput_TweakSlow: ImGuiNavInput_ = 14;
pub const ImGuiNavInput_TweakFast: ImGuiNavInput_ = 15;
pub const ImGuiNavInput_KeyMenu_: ImGuiNavInput_ = 16;
pub const ImGuiNavInput_KeyLeft_: ImGuiNavInput_ = 17;
pub const ImGuiNavInput_KeyRight_: ImGuiNavInput_ = 18;
pub const ImGuiNavInput_KeyUp_: ImGuiNavInput_ = 19;
pub const ImGuiNavInput_KeyDown_: ImGuiNavInput_ = 20;
pub const ImGuiNavInput_COUNT: ImGuiNavInput_ = 21;
pub const ImGuiNavInput_InternalStart_: ImGuiNavInput_ = 16;
pub type ImGuiNavInput_ = ::std::os::raw::c_int;
pub const ImGuiConfigFlags_None: ImGuiConfigFlags_ = 0;
pub const ImGuiConfigFlags_NavEnableKeyboard: ImGuiConfigFlags_ = 1;
pub const ImGuiConfigFlags_NavEnableGamepad: ImGuiConfigFlags_ = 2;
pub const ImGuiConfigFlags_NavEnableSetMousePos: ImGuiConfigFlags_ = 4;
pub const ImGuiConfigFlags_NavNoCaptureKeyboard: ImGuiConfigFlags_ = 8;
pub const ImGuiConfigFlags_NoMouse: ImGuiConfigFlags_ = 16;
pub const ImGuiConfigFlags_NoMouseCursorChange: ImGuiConfigFlags_ = 32;
pub const ImGuiConfigFlags_IsSRGB: ImGuiConfigFlags_ = 1048576;
pub const ImGuiConfigFlags_IsTouchScreen: ImGuiConfigFlags_ = 2097152;
pub type ImGuiConfigFlags_ = ::std::os::raw::c_int;
pub const ImGuiBackendFlags_None: ImGuiBackendFlags_ = 0;
pub const ImGuiBackendFlags_HasGamepad: ImGuiBackendFlags_ = 1;
pub const ImGuiBackendFlags_HasMouseCursors: ImGuiBackendFlags_ = 2;
pub const ImGuiBackendFlags_HasSetMousePos: ImGuiBackendFlags_ = 4;
pub const ImGuiBackendFlags_RendererHasVtxOffset: ImGuiBackendFlags_ = 8;
pub type ImGuiBackendFlags_ = ::std::os::raw::c_int;
pub const ImGuiCol_Text: ImGuiCol_ = 0;
pub const ImGuiCol_TextDisabled: ImGuiCol_ = 1;
pub const ImGuiCol_WindowBg: ImGuiCol_ = 2;
pub const ImGuiCol_ChildBg: ImGuiCol_ = 3;
pub const ImGuiCol_PopupBg: ImGuiCol_ = 4;
pub const ImGuiCol_Border: ImGuiCol_ = 5;
pub const ImGuiCol_BorderShadow: ImGuiCol_ = 6;
pub const ImGuiCol_FrameBg: ImGuiCol_ = 7;
pub const ImGuiCol_FrameBgHovered: ImGuiCol_ = 8;
pub const ImGuiCol_FrameBgActive: ImGuiCol_ = 9;
pub const ImGuiCol_TitleBg: ImGuiCol_ = 10;
pub const ImGuiCol_TitleBgActive: ImGuiCol_ = 11;
pub const ImGuiCol_TitleBgCollapsed: ImGuiCol_ = 12;
pub const ImGuiCol_MenuBarBg: ImGuiCol_ = 13;
pub const ImGuiCol_ScrollbarBg: ImGuiCol_ = 14;
pub const ImGuiCol_ScrollbarGrab: ImGuiCol_ = 15;
pub const ImGuiCol_ScrollbarGrabHovered: ImGuiCol_ = 16;
pub const ImGuiCol_ScrollbarGrabActive: ImGuiCol_ = 17;
pub const ImGuiCol_CheckMark: ImGuiCol_ = 18;
pub const ImGuiCol_SliderGrab: ImGuiCol_ = 19;
pub const ImGuiCol_SliderGrabActive: ImGuiCol_ = 20;
pub const ImGuiCol_Button: ImGuiCol_ = 21;
pub const ImGuiCol_ButtonHovered: ImGuiCol_ = 22;
pub const ImGuiCol_ButtonActive: ImGuiCol_ = 23;
pub const ImGuiCol_Header: ImGuiCol_ = 24;
pub const ImGuiCol_HeaderHovered: ImGuiCol_ = 25;
pub const ImGuiCol_HeaderActive: ImGuiCol_ = 26;
pub const ImGuiCol_Separator: ImGuiCol_ = 27;
pub const ImGuiCol_SeparatorHovered: ImGuiCol_ = 28;
pub const ImGuiCol_SeparatorActive: ImGuiCol_ = 29;
pub const ImGuiCol_ResizeGrip: ImGuiCol_ = 30;
pub const ImGuiCol_ResizeGripHovered: ImGuiCol_ = 31;
pub const ImGuiCol_ResizeGripActive: ImGuiCol_ = 32;
pub const ImGuiCol_Tab: ImGuiCol_ = 33;
pub const ImGuiCol_TabHovered: ImGuiCol_ = 34;
pub const ImGuiCol_TabActive: ImGuiCol_ = 35;
pub const ImGuiCol_TabUnfocused: ImGuiCol_ = 36;
pub const ImGuiCol_TabUnfocusedActive: ImGuiCol_ = 37;
pub const ImGuiCol_PlotLines: ImGuiCol_ = 38;
pub const ImGuiCol_PlotLinesHovered: ImGuiCol_ = 39;
pub const ImGuiCol_PlotHistogram: ImGuiCol_ = 40;
pub const ImGuiCol_PlotHistogramHovered: ImGuiCol_ = 41;
pub const ImGuiCol_TextSelectedBg: ImGuiCol_ = 42;
pub const ImGuiCol_DragDropTarget: ImGuiCol_ = 43;
pub const ImGuiCol_NavHighlight: ImGuiCol_ = 44;
pub const ImGuiCol_NavWindowingHighlight: ImGuiCol_ = 45;
pub const ImGuiCol_NavWindowingDimBg: ImGuiCol_ = 46;
pub const ImGuiCol_ModalWindowDimBg: ImGuiCol_ = 47;
pub const ImGuiCol_COUNT: ImGuiCol_ = 48;
pub const ImGuiCol_ModalWindowDarkening: ImGuiCol_ = 47;
pub type ImGuiCol_ = ::std::os::raw::c_int;
pub const ImGuiStyleVar_Alpha: ImGuiStyleVar_ = 0;
pub const ImGuiStyleVar_WindowPadding: ImGuiStyleVar_ = 1;
pub const ImGuiStyleVar_WindowRounding: ImGuiStyleVar_ = 2;
pub const ImGuiStyleVar_WindowBorderSize: ImGuiStyleVar_ = 3;
pub const ImGuiStyleVar_WindowMinSize: ImGuiStyleVar_ = 4;
pub const ImGuiStyleVar_WindowTitleAlign: ImGuiStyleVar_ = 5;
pub const ImGuiStyleVar_ChildRounding: ImGuiStyleVar_ = 6;
pub const ImGuiStyleVar_ChildBorderSize: ImGuiStyleVar_ = 7;
pub const ImGuiStyleVar_PopupRounding: ImGuiStyleVar_ = 8;
pub const ImGuiStyleVar_PopupBorderSize: ImGuiStyleVar_ = 9;
pub const ImGuiStyleVar_FramePadding: ImGuiStyleVar_ = 10;
pub const ImGuiStyleVar_FrameRounding: ImGuiStyleVar_ = 11;
pub const ImGuiStyleVar_FrameBorderSize: ImGuiStyleVar_ = 12;
pub const ImGuiStyleVar_ItemSpacing: ImGuiStyleVar_ = 13;
pub const ImGuiStyleVar_ItemInnerSpacing: ImGuiStyleVar_ = 14;
pub const ImGuiStyleVar_IndentSpacing: ImGuiStyleVar_ = 15;
pub const ImGuiStyleVar_ScrollbarSize: ImGuiStyleVar_ = 16;
pub const ImGuiStyleVar_ScrollbarRounding: ImGuiStyleVar_ = 17;
pub const ImGuiStyleVar_GrabMinSize: ImGuiStyleVar_ = 18;
pub const ImGuiStyleVar_GrabRounding: ImGuiStyleVar_ = 19;
pub const ImGuiStyleVar_TabRounding: ImGuiStyleVar_ = 20;
pub const ImGuiStyleVar_ButtonTextAlign: ImGuiStyleVar_ = 21;
pub const ImGuiStyleVar_SelectableTextAlign: ImGuiStyleVar_ = 22;
pub const ImGuiStyleVar_COUNT: ImGuiStyleVar_ = 23;
pub type ImGuiStyleVar_ = ::std::os::raw::c_int;
pub const ImGuiButtonFlags_None: ImGuiButtonFlags_ = 0;
pub const ImGuiButtonFlags_MouseButtonLeft: ImGuiButtonFlags_ = 1;
pub const ImGuiButtonFlags_MouseButtonRight: ImGuiButtonFlags_ = 2;
pub const ImGuiButtonFlags_MouseButtonMiddle: ImGuiButtonFlags_ = 4;
pub const ImGuiButtonFlags_MouseButtonMask_: ImGuiButtonFlags_ = 7;
pub const ImGuiButtonFlags_MouseButtonDefault_: ImGuiButtonFlags_ = 1;
pub type ImGuiButtonFlags_ = ::std::os::raw::c_int;
pub const ImGuiColorEditFlags_None: ImGuiColorEditFlags_ = 0;
pub const ImGuiColorEditFlags_NoAlpha: ImGuiColorEditFlags_ = 2;
pub const ImGuiColorEditFlags_NoPicker: ImGuiColorEditFlags_ = 4;
pub const ImGuiColorEditFlags_NoOptions: ImGuiColorEditFlags_ = 8;
pub const ImGuiColorEditFlags_NoSmallPreview: ImGuiColorEditFlags_ = 16;
pub const ImGuiColorEditFlags_NoInputs: ImGuiColorEditFlags_ = 32;
pub const ImGuiColorEditFlags_NoTooltip: ImGuiColorEditFlags_ = 64;
pub const ImGuiColorEditFlags_NoLabel: ImGuiColorEditFlags_ = 128;
pub const ImGuiColorEditFlags_NoSidePreview: ImGuiColorEditFlags_ = 256;
pub const ImGuiColorEditFlags_NoDragDrop: ImGuiColorEditFlags_ = 512;
pub const ImGuiColorEditFlags_NoBorder: ImGuiColorEditFlags_ = 1024;
pub const ImGuiColorEditFlags_AlphaBar: ImGuiColorEditFlags_ = 65536;
pub const ImGuiColorEditFlags_AlphaPreview: ImGuiColorEditFlags_ = 131072;
pub const ImGuiColorEditFlags_AlphaPreviewHalf: ImGuiColorEditFlags_ = 262144;
pub const ImGuiColorEditFlags_HDR: ImGuiColorEditFlags_ = 524288;
pub const ImGuiColorEditFlags_DisplayRGB: ImGuiColorEditFlags_ = 1048576;
pub const ImGuiColorEditFlags_DisplayHSV: ImGuiColorEditFlags_ = 2097152;
pub const ImGuiColorEditFlags_DisplayHex: ImGuiColorEditFlags_ = 4194304;
pub const ImGuiColorEditFlags_Uint8: ImGuiColorEditFlags_ = 8388608;
pub const ImGuiColorEditFlags_Float: ImGuiColorEditFlags_ = 16777216;
pub const ImGuiColorEditFlags_PickerHueBar: ImGuiColorEditFlags_ = 33554432;
pub const ImGuiColorEditFlags_PickerHueWheel: ImGuiColorEditFlags_ = 67108864;
pub const ImGuiColorEditFlags_InputRGB: ImGuiColorEditFlags_ = 134217728;
pub const ImGuiColorEditFlags_InputHSV: ImGuiColorEditFlags_ = 268435456;
pub const ImGuiColorEditFlags__OptionsDefault: ImGuiColorEditFlags_ = 177209344;
pub const ImGuiColorEditFlags__DisplayMask: ImGuiColorEditFlags_ = 7340032;
pub const ImGuiColorEditFlags__DataTypeMask: ImGuiColorEditFlags_ = 25165824;
pub const ImGuiColorEditFlags__PickerMask: ImGuiColorEditFlags_ = 100663296;
pub const ImGuiColorEditFlags__InputMask: ImGuiColorEditFlags_ = 402653184;
pub const ImGuiColorEditFlags_RGB: ImGuiColorEditFlags_ = 1048576;
pub const ImGuiColorEditFlags_HSV: ImGuiColorEditFlags_ = 2097152;
pub const ImGuiColorEditFlags_HEX: ImGuiColorEditFlags_ = 4194304;
pub type ImGuiColorEditFlags_ = ::std::os::raw::c_int;
pub const ImGuiSliderFlags_None: ImGuiSliderFlags_ = 0;
pub const ImGuiSliderFlags_AlwaysClamp: ImGuiSliderFlags_ = 16;
pub const ImGuiSliderFlags_Logarithmic: ImGuiSliderFlags_ = 32;
pub const ImGuiSliderFlags_NoRoundToFormat: ImGuiSliderFlags_ = 64;
pub const ImGuiSliderFlags_NoInput: ImGuiSliderFlags_ = 128;
pub const ImGuiSliderFlags_InvalidMask_: ImGuiSliderFlags_ = 1879048207;
pub const ImGuiSliderFlags_ClampOnInput: ImGuiSliderFlags_ = 16;
pub type ImGuiSliderFlags_ = ::std::os::raw::c_int;
pub const ImGuiMouseButton_Left: ImGuiMouseButton_ = 0;
pub const ImGuiMouseButton_Right: ImGuiMouseButton_ = 1;
pub const ImGuiMouseButton_Middle: ImGuiMouseButton_ = 2;
pub const ImGuiMouseButton_COUNT: ImGuiMouseButton_ = 5;
pub type ImGuiMouseButton_ = ::std::os::raw::c_int;
pub const ImGuiMouseCursor_None: ImGuiMouseCursor_ = -1;
pub const ImGuiMouseCursor_Arrow: ImGuiMouseCursor_ = 0;
pub const ImGuiMouseCursor_TextInput: ImGuiMouseCursor_ = 1;
pub const ImGuiMouseCursor_ResizeAll: ImGuiMouseCursor_ = 2;
pub const ImGuiMouseCursor_ResizeNS: ImGuiMouseCursor_ = 3;
pub const ImGuiMouseCursor_ResizeEW: ImGuiMouseCursor_ = 4;
pub const ImGuiMouseCursor_ResizeNESW: ImGuiMouseCursor_ = 5;
pub const ImGuiMouseCursor_ResizeNWSE: ImGuiMouseCursor_ = 6;
pub const ImGuiMouseCursor_Hand: ImGuiMouseCursor_ = 7;
pub const ImGuiMouseCursor_NotAllowed: ImGuiMouseCursor_ = 8;
pub const ImGuiMouseCursor_COUNT: ImGuiMouseCursor_ = 9;
pub type ImGuiMouseCursor_ = ::std::os::raw::c_int;
pub const ImGuiCond_None: ImGuiCond_ = 0;
pub const ImGuiCond_Always: ImGuiCond_ = 1;
pub const ImGuiCond_Once: ImGuiCond_ = 2;
pub const ImGuiCond_FirstUseEver: ImGuiCond_ = 4;
pub const ImGuiCond_Appearing: ImGuiCond_ = 8;
pub type ImGuiCond_ = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImNewWrapper {
    pub _address: u8,
}
#[test]
fn bindgen_test_layout_ImNewWrapper() {
    assert_eq!(
        ::std::mem::size_of::<ImNewWrapper>(),
        1usize,
        concat!("Size of: ", stringify!(ImNewWrapper))
    );
    assert_eq!(
        ::std::mem::align_of::<ImNewWrapper>(),
        1usize,
        concat!("Alignment of ", stringify!(ImNewWrapper))
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct ImVector<T> {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut T,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<T>>,
}
pub type ImVector_value_type<T> = T;
pub type ImVector_iterator<T> = *mut ImVector_value_type<T>;
pub type ImVector_const_iterator<T> = *const ImVector_value_type<T>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ImGuiStyle {
    pub Alpha: f32,
    pub WindowPadding: ImVec2,
    pub WindowRounding: f32,
    pub WindowBorderSize: f32,
    pub WindowMinSize: ImVec2,
    pub WindowTitleAlign: ImVec2,
    pub WindowMenuButtonPosition: ImGuiDir,
    pub ChildRounding: f32,
    pub ChildBorderSize: f32,
    pub PopupRounding: f32,
    pub PopupBorderSize: f32,
    pub FramePadding: ImVec2,
    pub FrameRounding: f32,
    pub FrameBorderSize: f32,
    pub ItemSpacing: ImVec2,
    pub ItemInnerSpacing: ImVec2,
    pub TouchExtraPadding: ImVec2,
    pub IndentSpacing: f32,
    pub ColumnsMinSpacing: f32,
    pub ScrollbarSize: f32,
    pub ScrollbarRounding: f32,
    pub GrabMinSize: f32,
    pub GrabRounding: f32,
    pub LogSliderDeadzone: f32,
    pub TabRounding: f32,
    pub TabBorderSize: f32,
    pub TabMinWidthForCloseButton: f32,
    pub ColorButtonPosition: ImGuiDir,
    pub ButtonTextAlign: ImVec2,
    pub SelectableTextAlign: ImVec2,
    pub DisplayWindowPadding: ImVec2,
    pub DisplaySafeAreaPadding: ImVec2,
    pub MouseCursorScale: f32,
    pub AntiAliasedLines: bool,
    pub AntiAliasedLinesUseTex: bool,
    pub AntiAliasedFill: bool,
    pub CurveTessellationTol: f32,
    pub CircleSegmentMaxError: f32,
    pub Colors: [ImVec4; 48usize],
}
#[test]
fn bindgen_test_layout_ImGuiStyle() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiStyle>(),
        956usize,
        concat!("Size of: ", stringify!(ImGuiStyle))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiStyle>(),
        4usize,
        concat!("Alignment of ", stringify!(ImGuiStyle))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiStyle>())).Alpha as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(Alpha)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiStyle>())).WindowPadding as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(WindowPadding)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiStyle>())).WindowRounding as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(WindowRounding)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiStyle>())).WindowBorderSize as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(WindowBorderSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiStyle>())).WindowMinSize as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(WindowMinSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiStyle>())).WindowTitleAlign as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(WindowTitleAlign)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiStyle>())).WindowMenuButtonPosition as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(WindowMenuButtonPosition)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiStyle>())).ChildRounding as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(ChildRounding)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiStyle>())).ChildBorderSize as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(ChildBorderSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiStyle>())).PopupRounding as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(PopupRounding)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiStyle>())).PopupBorderSize as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(PopupBorderSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiStyle>())).FramePadding as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(FramePadding)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiStyle>())).FrameRounding as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(FrameRounding)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiStyle>())).FrameBorderSize as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(FrameBorderSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiStyle>())).ItemSpacing as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(ItemSpacing)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiStyle>())).ItemInnerSpacing as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(ItemInnerSpacing)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiStyle>())).TouchExtraPadding as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(TouchExtraPadding)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiStyle>())).IndentSpacing as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(IndentSpacing)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiStyle>())).ColumnsMinSpacing as *const _ as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(ColumnsMinSpacing)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiStyle>())).ScrollbarSize as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(ScrollbarSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiStyle>())).ScrollbarRounding as *const _ as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(ScrollbarRounding)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiStyle>())).GrabMinSize as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(GrabMinSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiStyle>())).GrabRounding as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(GrabRounding)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiStyle>())).LogSliderDeadzone as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(LogSliderDeadzone)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiStyle>())).TabRounding as *const _ as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(TabRounding)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiStyle>())).TabBorderSize as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(TabBorderSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiStyle>())).TabMinWidthForCloseButton as *const _ as usize
        },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(TabMinWidthForCloseButton)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiStyle>())).ColorButtonPosition as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(ColorButtonPosition)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiStyle>())).ButtonTextAlign as *const _ as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(ButtonTextAlign)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiStyle>())).SelectableTextAlign as *const _ as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(SelectableTextAlign)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiStyle>())).DisplayWindowPadding as *const _ as usize },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(DisplayWindowPadding)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiStyle>())).DisplaySafeAreaPadding as *const _ as usize
        },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(DisplaySafeAreaPadding)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiStyle>())).MouseCursorScale as *const _ as usize },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(MouseCursorScale)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiStyle>())).AntiAliasedLines as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(AntiAliasedLines)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiStyle>())).AntiAliasedLinesUseTex as *const _ as usize
        },
        177usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(AntiAliasedLinesUseTex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiStyle>())).AntiAliasedFill as *const _ as usize },
        178usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(AntiAliasedFill)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiStyle>())).CurveTessellationTol as *const _ as usize },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(CurveTessellationTol)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiStyle>())).CircleSegmentMaxError as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(CircleSegmentMaxError)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiStyle>())).Colors as *const _ as usize },
        188usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(Colors)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}?ScaleAllSizes@ImGuiStyle@@QEAAXM@Z"]
    pub fn ImGuiStyle_ScaleAllSizes(this: *mut ImGuiStyle, scale_factor: f32);
}
extern "C" {
    #[link_name = "\u{1}??0ImGuiStyle@@QEAA@XZ"]
    pub fn ImGuiStyle_ImGuiStyle(this: *mut ImGuiStyle);
}
impl ImGuiStyle {
    #[inline]
    pub unsafe fn ScaleAllSizes(&mut self, scale_factor: f32) {
        ImGuiStyle_ScaleAllSizes(self, scale_factor)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        ImGuiStyle_ImGuiStyle(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
}
#[repr(C)]
pub struct ImGuiIO {
    pub ConfigFlags: ImGuiConfigFlags,
    pub BackendFlags: ImGuiBackendFlags,
    pub DisplaySize: ImVec2,
    pub DeltaTime: f32,
    pub IniSavingRate: f32,
    pub IniFilename: *const ::std::os::raw::c_char,
    pub LogFilename: *const ::std::os::raw::c_char,
    pub MouseDoubleClickTime: f32,
    pub MouseDoubleClickMaxDist: f32,
    pub MouseDragThreshold: f32,
    pub KeyMap: [::std::os::raw::c_int; 22usize],
    pub KeyRepeatDelay: f32,
    pub KeyRepeatRate: f32,
    pub UserData: *mut ::std::os::raw::c_void,
    pub Fonts: *mut ImFontAtlas,
    pub FontGlobalScale: f32,
    pub FontAllowUserScaling: bool,
    pub FontDefault: *mut ImFont,
    pub DisplayFramebufferScale: ImVec2,
    pub MouseDrawCursor: bool,
    pub ConfigMacOSXBehaviors: bool,
    pub ConfigInputTextCursorBlink: bool,
    pub ConfigWindowsResizeFromEdges: bool,
    pub ConfigWindowsMoveFromTitleBarOnly: bool,
    pub ConfigMemoryCompactTimer: f32,
    pub BackendPlatformName: *const ::std::os::raw::c_char,
    pub BackendRendererName: *const ::std::os::raw::c_char,
    pub BackendPlatformUserData: *mut ::std::os::raw::c_void,
    pub BackendRendererUserData: *mut ::std::os::raw::c_void,
    pub BackendLanguageUserData: *mut ::std::os::raw::c_void,
    pub GetClipboardTextFn: ::std::option::Option<
        unsafe extern "C" fn(
            user_data: *mut ::std::os::raw::c_void,
        ) -> *const ::std::os::raw::c_char,
    >,
    pub SetClipboardTextFn: ::std::option::Option<
        unsafe extern "C" fn(
            user_data: *mut ::std::os::raw::c_void,
            text: *const ::std::os::raw::c_char,
        ),
    >,
    pub ClipboardUserData: *mut ::std::os::raw::c_void,
    pub ImeSetInputScreenPosFn: ::std::option::Option<
        unsafe extern "C" fn(x: ::std::os::raw::c_int, y: ::std::os::raw::c_int),
    >,
    pub ImeWindowHandle: *mut ::std::os::raw::c_void,
    pub MousePos: ImVec2,
    pub MouseDown: [bool; 5usize],
    pub MouseWheel: f32,
    pub MouseWheelH: f32,
    pub KeyCtrl: bool,
    pub KeyShift: bool,
    pub KeyAlt: bool,
    pub KeySuper: bool,
    pub KeysDown: [bool; 512usize],
    pub NavInputs: [f32; 21usize],
    pub WantCaptureMouse: bool,
    pub WantCaptureKeyboard: bool,
    pub WantTextInput: bool,
    pub WantSetMousePos: bool,
    pub WantSaveIniSettings: bool,
    pub NavActive: bool,
    pub NavVisible: bool,
    pub Framerate: f32,
    pub MetricsRenderVertices: ::std::os::raw::c_int,
    pub MetricsRenderIndices: ::std::os::raw::c_int,
    pub MetricsRenderWindows: ::std::os::raw::c_int,
    pub MetricsActiveWindows: ::std::os::raw::c_int,
    pub MetricsActiveAllocations: ::std::os::raw::c_int,
    pub MouseDelta: ImVec2,
    pub KeyMods: ImGuiKeyModFlags,
    pub MousePosPrev: ImVec2,
    pub MouseClickedPos: [ImVec2; 5usize],
    pub MouseClickedTime: [f64; 5usize],
    pub MouseClicked: [bool; 5usize],
    pub MouseDoubleClicked: [bool; 5usize],
    pub MouseReleased: [bool; 5usize],
    pub MouseDownOwned: [bool; 5usize],
    pub MouseDownWasDoubleClick: [bool; 5usize],
    pub MouseDownDuration: [f32; 5usize],
    pub MouseDownDurationPrev: [f32; 5usize],
    pub MouseDragMaxDistanceAbs: [ImVec2; 5usize],
    pub MouseDragMaxDistanceSqr: [f32; 5usize],
    pub KeysDownDuration: [f32; 512usize],
    pub KeysDownDurationPrev: [f32; 512usize],
    pub NavInputsDownDuration: [f32; 21usize],
    pub NavInputsDownDurationPrev: [f32; 21usize],
    pub PenPressure: f32,
    pub InputQueueSurrogate: ImWchar16,
    pub InputQueueCharacters: ImVector<ImWchar>,
}
#[test]
fn bindgen_test_layout_ImGuiIO() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiIO>(),
        5464usize,
        concat!("Size of: ", stringify!(ImGuiIO))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiIO>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiIO))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).ConfigFlags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(ConfigFlags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).BackendFlags as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(BackendFlags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).DisplaySize as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(DisplaySize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).DeltaTime as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(DeltaTime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).IniSavingRate as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(IniSavingRate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).IniFilename as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(IniFilename)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).LogFilename as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(LogFilename)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).MouseDoubleClickTime as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(MouseDoubleClickTime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).MouseDoubleClickMaxDist as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(MouseDoubleClickMaxDist)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).MouseDragThreshold as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(MouseDragThreshold)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).KeyMap as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(KeyMap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).KeyRepeatDelay as *const _ as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(KeyRepeatDelay)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).KeyRepeatRate as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(KeyRepeatRate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).UserData as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(UserData)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).Fonts as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(Fonts)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).FontGlobalScale as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(FontGlobalScale)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).FontAllowUserScaling as *const _ as usize },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(FontAllowUserScaling)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).FontDefault as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(FontDefault)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).DisplayFramebufferScale as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(DisplayFramebufferScale)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).MouseDrawCursor as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(MouseDrawCursor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).ConfigMacOSXBehaviors as *const _ as usize },
        193usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(ConfigMacOSXBehaviors)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiIO>())).ConfigInputTextCursorBlink as *const _ as usize
        },
        194usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(ConfigInputTextCursorBlink)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiIO>())).ConfigWindowsResizeFromEdges as *const _ as usize
        },
        195usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(ConfigWindowsResizeFromEdges)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiIO>())).ConfigWindowsMoveFromTitleBarOnly as *const _
                as usize
        },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(ConfigWindowsMoveFromTitleBarOnly)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiIO>())).ConfigMemoryCompactTimer as *const _ as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(ConfigMemoryCompactTimer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).BackendPlatformName as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(BackendPlatformName)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).BackendRendererName as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(BackendRendererName)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).BackendPlatformUserData as *const _ as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(BackendPlatformUserData)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).BackendRendererUserData as *const _ as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(BackendRendererUserData)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).BackendLanguageUserData as *const _ as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(BackendLanguageUserData)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).GetClipboardTextFn as *const _ as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(GetClipboardTextFn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).SetClipboardTextFn as *const _ as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(SetClipboardTextFn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).ClipboardUserData as *const _ as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(ClipboardUserData)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).ImeSetInputScreenPosFn as *const _ as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(ImeSetInputScreenPosFn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).ImeWindowHandle as *const _ as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(ImeWindowHandle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).MousePos as *const _ as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(MousePos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).MouseDown as *const _ as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(MouseDown)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).MouseWheel as *const _ as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(MouseWheel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).MouseWheelH as *const _ as usize },
        308usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(MouseWheelH)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).KeyCtrl as *const _ as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(KeyCtrl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).KeyShift as *const _ as usize },
        313usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(KeyShift)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).KeyAlt as *const _ as usize },
        314usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(KeyAlt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).KeySuper as *const _ as usize },
        315usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(KeySuper)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).KeysDown as *const _ as usize },
        316usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(KeysDown)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).NavInputs as *const _ as usize },
        828usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(NavInputs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).WantCaptureMouse as *const _ as usize },
        912usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(WantCaptureMouse)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).WantCaptureKeyboard as *const _ as usize },
        913usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(WantCaptureKeyboard)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).WantTextInput as *const _ as usize },
        914usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(WantTextInput)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).WantSetMousePos as *const _ as usize },
        915usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(WantSetMousePos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).WantSaveIniSettings as *const _ as usize },
        916usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(WantSaveIniSettings)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).NavActive as *const _ as usize },
        917usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(NavActive)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).NavVisible as *const _ as usize },
        918usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(NavVisible)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).Framerate as *const _ as usize },
        920usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(Framerate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).MetricsRenderVertices as *const _ as usize },
        924usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(MetricsRenderVertices)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).MetricsRenderIndices as *const _ as usize },
        928usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(MetricsRenderIndices)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).MetricsRenderWindows as *const _ as usize },
        932usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(MetricsRenderWindows)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).MetricsActiveWindows as *const _ as usize },
        936usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(MetricsActiveWindows)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiIO>())).MetricsActiveAllocations as *const _ as usize
        },
        940usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(MetricsActiveAllocations)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).MouseDelta as *const _ as usize },
        944usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(MouseDelta)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).KeyMods as *const _ as usize },
        952usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(KeyMods)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).MousePosPrev as *const _ as usize },
        956usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(MousePosPrev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).MouseClickedPos as *const _ as usize },
        964usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(MouseClickedPos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).MouseClickedTime as *const _ as usize },
        1008usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(MouseClickedTime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).MouseClicked as *const _ as usize },
        1048usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(MouseClicked)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).MouseDoubleClicked as *const _ as usize },
        1053usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(MouseDoubleClicked)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).MouseReleased as *const _ as usize },
        1058usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(MouseReleased)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).MouseDownOwned as *const _ as usize },
        1063usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(MouseDownOwned)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).MouseDownWasDoubleClick as *const _ as usize },
        1068usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(MouseDownWasDoubleClick)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).MouseDownDuration as *const _ as usize },
        1076usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(MouseDownDuration)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).MouseDownDurationPrev as *const _ as usize },
        1096usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(MouseDownDurationPrev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).MouseDragMaxDistanceAbs as *const _ as usize },
        1116usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(MouseDragMaxDistanceAbs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).MouseDragMaxDistanceSqr as *const _ as usize },
        1156usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(MouseDragMaxDistanceSqr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).KeysDownDuration as *const _ as usize },
        1176usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(KeysDownDuration)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).KeysDownDurationPrev as *const _ as usize },
        3224usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(KeysDownDurationPrev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).NavInputsDownDuration as *const _ as usize },
        5272usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(NavInputsDownDuration)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiIO>())).NavInputsDownDurationPrev as *const _ as usize
        },
        5356usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(NavInputsDownDurationPrev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).PenPressure as *const _ as usize },
        5440usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(PenPressure)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).InputQueueSurrogate as *const _ as usize },
        5444usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(InputQueueSurrogate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).InputQueueCharacters as *const _ as usize },
        5448usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(InputQueueCharacters)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}?AddInputCharacter@ImGuiIO@@QEAAXI@Z"]
    pub fn ImGuiIO_AddInputCharacter(this: *mut ImGuiIO, c: ::std::os::raw::c_uint);
}
extern "C" {
    #[link_name = "\u{1}?AddInputCharacterUTF16@ImGuiIO@@QEAAXG@Z"]
    pub fn ImGuiIO_AddInputCharacterUTF16(this: *mut ImGuiIO, c: ImWchar16);
}
extern "C" {
    #[link_name = "\u{1}?AddInputCharactersUTF8@ImGuiIO@@QEAAXPEBD@Z"]
    pub fn ImGuiIO_AddInputCharactersUTF8(this: *mut ImGuiIO, str_: *const ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "\u{1}?ClearInputCharacters@ImGuiIO@@QEAAXXZ"]
    pub fn ImGuiIO_ClearInputCharacters(this: *mut ImGuiIO);
}
extern "C" {
    #[link_name = "\u{1}??0ImGuiIO@@QEAA@XZ"]
    pub fn ImGuiIO_ImGuiIO(this: *mut ImGuiIO);
}
impl ImGuiIO {
    #[inline]
    pub unsafe fn AddInputCharacter(&mut self, c: ::std::os::raw::c_uint) {
        ImGuiIO_AddInputCharacter(self, c)
    }
    #[inline]
    pub unsafe fn AddInputCharacterUTF16(&mut self, c: ImWchar16) {
        ImGuiIO_AddInputCharacterUTF16(self, c)
    }
    #[inline]
    pub unsafe fn AddInputCharactersUTF8(&mut self, str_: *const ::std::os::raw::c_char) {
        ImGuiIO_AddInputCharactersUTF8(self, str_)
    }
    #[inline]
    pub unsafe fn ClearInputCharacters(&mut self) {
        ImGuiIO_ClearInputCharacters(self)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        ImGuiIO_ImGuiIO(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiInputTextCallbackData {
    pub EventFlag: ImGuiInputTextFlags,
    pub Flags: ImGuiInputTextFlags,
    pub UserData: *mut ::std::os::raw::c_void,
    pub EventChar: ImWchar,
    pub EventKey: ImGuiKey,
    pub Buf: *mut ::std::os::raw::c_char,
    pub BufTextLen: ::std::os::raw::c_int,
    pub BufSize: ::std::os::raw::c_int,
    pub BufDirty: bool,
    pub CursorPos: ::std::os::raw::c_int,
    pub SelectionStart: ::std::os::raw::c_int,
    pub SelectionEnd: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ImGuiInputTextCallbackData() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiInputTextCallbackData>(),
        56usize,
        concat!("Size of: ", stringify!(ImGuiInputTextCallbackData))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiInputTextCallbackData>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiInputTextCallbackData))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiInputTextCallbackData>())).EventFlag as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputTextCallbackData),
            "::",
            stringify!(EventFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiInputTextCallbackData>())).Flags as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputTextCallbackData),
            "::",
            stringify!(Flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiInputTextCallbackData>())).UserData as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputTextCallbackData),
            "::",
            stringify!(UserData)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiInputTextCallbackData>())).EventChar as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputTextCallbackData),
            "::",
            stringify!(EventChar)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiInputTextCallbackData>())).EventKey as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputTextCallbackData),
            "::",
            stringify!(EventKey)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiInputTextCallbackData>())).Buf as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputTextCallbackData),
            "::",
            stringify!(Buf)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiInputTextCallbackData>())).BufTextLen as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputTextCallbackData),
            "::",
            stringify!(BufTextLen)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiInputTextCallbackData>())).BufSize as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputTextCallbackData),
            "::",
            stringify!(BufSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiInputTextCallbackData>())).BufDirty as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputTextCallbackData),
            "::",
            stringify!(BufDirty)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiInputTextCallbackData>())).CursorPos as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputTextCallbackData),
            "::",
            stringify!(CursorPos)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiInputTextCallbackData>())).SelectionStart as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputTextCallbackData),
            "::",
            stringify!(SelectionStart)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiInputTextCallbackData>())).SelectionEnd as *const _ as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputTextCallbackData),
            "::",
            stringify!(SelectionEnd)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}?DeleteChars@ImGuiInputTextCallbackData@@QEAAXHH@Z"]
    pub fn ImGuiInputTextCallbackData_DeleteChars(
        this: *mut ImGuiInputTextCallbackData,
        pos: ::std::os::raw::c_int,
        bytes_count: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}?InsertChars@ImGuiInputTextCallbackData@@QEAAXHPEBD0@Z"]
    pub fn ImGuiInputTextCallbackData_InsertChars(
        this: *mut ImGuiInputTextCallbackData,
        pos: ::std::os::raw::c_int,
        text: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    #[link_name = "\u{1}??0ImGuiInputTextCallbackData@@QEAA@XZ"]
    pub fn ImGuiInputTextCallbackData_ImGuiInputTextCallbackData(
        this: *mut ImGuiInputTextCallbackData,
    );
}
impl ImGuiInputTextCallbackData {
    #[inline]
    pub unsafe fn DeleteChars(
        &mut self,
        pos: ::std::os::raw::c_int,
        bytes_count: ::std::os::raw::c_int,
    ) {
        ImGuiInputTextCallbackData_DeleteChars(self, pos, bytes_count)
    }
    #[inline]
    pub unsafe fn InsertChars(
        &mut self,
        pos: ::std::os::raw::c_int,
        text: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
    ) {
        ImGuiInputTextCallbackData_InsertChars(self, pos, text, text_end)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        ImGuiInputTextCallbackData_ImGuiInputTextCallbackData(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiSizeCallbackData {
    pub UserData: *mut ::std::os::raw::c_void,
    pub Pos: ImVec2,
    pub CurrentSize: ImVec2,
    pub DesiredSize: ImVec2,
}
#[test]
fn bindgen_test_layout_ImGuiSizeCallbackData() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiSizeCallbackData>(),
        32usize,
        concat!("Size of: ", stringify!(ImGuiSizeCallbackData))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiSizeCallbackData>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiSizeCallbackData))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiSizeCallbackData>())).UserData as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiSizeCallbackData),
            "::",
            stringify!(UserData)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiSizeCallbackData>())).Pos as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiSizeCallbackData),
            "::",
            stringify!(Pos)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiSizeCallbackData>())).CurrentSize as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiSizeCallbackData),
            "::",
            stringify!(CurrentSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiSizeCallbackData>())).DesiredSize as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiSizeCallbackData),
            "::",
            stringify!(DesiredSize)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ImGuiPayload {
    pub Data: *mut ::std::os::raw::c_void,
    pub DataSize: ::std::os::raw::c_int,
    pub SourceId: ImGuiID,
    pub SourceParentId: ImGuiID,
    pub DataFrameCount: ::std::os::raw::c_int,
    pub DataType: [::std::os::raw::c_char; 33usize],
    pub Preview: bool,
    pub Delivery: bool,
}
#[test]
fn bindgen_test_layout_ImGuiPayload() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiPayload>(),
        64usize,
        concat!("Size of: ", stringify!(ImGuiPayload))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiPayload>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiPayload))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiPayload>())).Data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPayload),
            "::",
            stringify!(Data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiPayload>())).DataSize as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPayload),
            "::",
            stringify!(DataSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiPayload>())).SourceId as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPayload),
            "::",
            stringify!(SourceId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiPayload>())).SourceParentId as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPayload),
            "::",
            stringify!(SourceParentId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiPayload>())).DataFrameCount as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPayload),
            "::",
            stringify!(DataFrameCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiPayload>())).DataType as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPayload),
            "::",
            stringify!(DataType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiPayload>())).Preview as *const _ as usize },
        57usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPayload),
            "::",
            stringify!(Preview)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiPayload>())).Delivery as *const _ as usize },
        58usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPayload),
            "::",
            stringify!(Delivery)
        )
    );
}
pub type ImGuiTextEditCallback = ImGuiInputTextCallback;
pub type ImGuiTextEditCallbackData = ImGuiInputTextCallbackData;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiOnceUponAFrame {
    pub RefFrame: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ImGuiOnceUponAFrame() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiOnceUponAFrame>(),
        4usize,
        concat!("Size of: ", stringify!(ImGuiOnceUponAFrame))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiOnceUponAFrame>(),
        4usize,
        concat!("Alignment of ", stringify!(ImGuiOnceUponAFrame))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiOnceUponAFrame>())).RefFrame as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiOnceUponAFrame),
            "::",
            stringify!(RefFrame)
        )
    );
}
#[repr(C)]
pub struct ImGuiTextFilter {
    pub InputBuf: [::std::os::raw::c_char; 256usize],
    pub Filters: ImVector<ImGuiTextFilter_ImGuiTextRange>,
    pub CountGrep: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiTextFilter_ImGuiTextRange {
    pub b: *const ::std::os::raw::c_char,
    pub e: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_ImGuiTextFilter_ImGuiTextRange() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiTextFilter_ImGuiTextRange>(),
        16usize,
        concat!("Size of: ", stringify!(ImGuiTextFilter_ImGuiTextRange))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiTextFilter_ImGuiTextRange>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiTextFilter_ImGuiTextRange))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiTextFilter_ImGuiTextRange>())).b as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTextFilter_ImGuiTextRange),
            "::",
            stringify!(b)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiTextFilter_ImGuiTextRange>())).e as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTextFilter_ImGuiTextRange),
            "::",
            stringify!(e)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}?split@ImGuiTextRange@ImGuiTextFilter@@QEBAXDPEAU?$ImVector@UImGuiTextRange@ImGuiTextFilter@@@@@Z"]
    pub fn ImGuiTextFilter_ImGuiTextRange_split(
        this: *const ImGuiTextFilter_ImGuiTextRange,
        separator: ::std::os::raw::c_char,
        out: *mut ImVector<ImGuiTextFilter_ImGuiTextRange>,
    );
}
impl ImGuiTextFilter_ImGuiTextRange {
    #[inline]
    pub unsafe fn split(
        &self,
        separator: ::std::os::raw::c_char,
        out: *mut ImVector<ImGuiTextFilter_ImGuiTextRange>,
    ) {
        ImGuiTextFilter_ImGuiTextRange_split(self, separator, out)
    }
}
#[test]
fn bindgen_test_layout_ImGuiTextFilter() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiTextFilter>(),
        280usize,
        concat!("Size of: ", stringify!(ImGuiTextFilter))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiTextFilter>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiTextFilter))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTextFilter>())).InputBuf as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTextFilter),
            "::",
            stringify!(InputBuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTextFilter>())).Filters as *const _ as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTextFilter),
            "::",
            stringify!(Filters)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTextFilter>())).CountGrep as *const _ as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTextFilter),
            "::",
            stringify!(CountGrep)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}?Draw@ImGuiTextFilter@@QEAA_NPEBDM@Z"]
    pub fn ImGuiTextFilter_Draw(
        this: *mut ImGuiTextFilter,
        label: *const ::std::os::raw::c_char,
        width: f32,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?PassFilter@ImGuiTextFilter@@QEBA_NPEBD0@Z"]
    pub fn ImGuiTextFilter_PassFilter(
        this: *const ImGuiTextFilter,
        text: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?Build@ImGuiTextFilter@@QEAAXXZ"]
    pub fn ImGuiTextFilter_Build(this: *mut ImGuiTextFilter);
}
extern "C" {
    #[link_name = "\u{1}??0ImGuiTextFilter@@QEAA@PEBD@Z"]
    pub fn ImGuiTextFilter_ImGuiTextFilter(
        this: *mut ImGuiTextFilter,
        default_filter: *const ::std::os::raw::c_char,
    );
}
impl ImGuiTextFilter {
    #[inline]
    pub unsafe fn Draw(&mut self, label: *const ::std::os::raw::c_char, width: f32) -> bool {
        ImGuiTextFilter_Draw(self, label, width)
    }
    #[inline]
    pub unsafe fn PassFilter(
        &self,
        text: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
    ) -> bool {
        ImGuiTextFilter_PassFilter(self, text, text_end)
    }
    #[inline]
    pub unsafe fn Build(&mut self) {
        ImGuiTextFilter_Build(self)
    }
    #[inline]
    pub unsafe fn new(default_filter: *const ::std::os::raw::c_char) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        ImGuiTextFilter_ImGuiTextFilter(__bindgen_tmp.as_mut_ptr(), default_filter);
        __bindgen_tmp.assume_init()
    }
}
#[repr(C)]
#[derive(Debug)]
pub struct ImGuiTextBuffer {
    pub Buf: ImVector<::std::os::raw::c_char>,
}
extern "C" {
    #[link_name = "\u{1}?EmptyString@ImGuiTextBuffer@@2PADA"]
    pub static mut ImGuiTextBuffer_EmptyString: [::std::os::raw::c_char; 1usize];
}
#[test]
fn bindgen_test_layout_ImGuiTextBuffer() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiTextBuffer>(),
        16usize,
        concat!("Size of: ", stringify!(ImGuiTextBuffer))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiTextBuffer>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiTextBuffer))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTextBuffer>())).Buf as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTextBuffer),
            "::",
            stringify!(Buf)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}?append@ImGuiTextBuffer@@QEAAXPEBD0@Z"]
    pub fn ImGuiTextBuffer_append(
        this: *mut ImGuiTextBuffer,
        str_: *const ::std::os::raw::c_char,
        str_end: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    #[link_name = "\u{1}?appendf@ImGuiTextBuffer@@QEAAXPEBDZZ"]
    pub fn ImGuiTextBuffer_appendf(
        this: *mut ImGuiTextBuffer,
        fmt: *const ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    #[link_name = "\u{1}?appendfv@ImGuiTextBuffer@@QEAAXPEBDPEAD@Z"]
    pub fn ImGuiTextBuffer_appendfv(
        this: *mut ImGuiTextBuffer,
        fmt: *const ::std::os::raw::c_char,
        args: va_list,
    );
}
impl ImGuiTextBuffer {
    #[inline]
    pub unsafe fn append(
        &mut self,
        str_: *const ::std::os::raw::c_char,
        str_end: *const ::std::os::raw::c_char,
    ) {
        ImGuiTextBuffer_append(self, str_, str_end)
    }
    #[inline]
    pub unsafe fn appendfv(&mut self, fmt: *const ::std::os::raw::c_char, args: va_list) {
        ImGuiTextBuffer_appendfv(self, fmt, args)
    }
}
#[repr(C)]
pub struct ImGuiStorage {
    pub Data: ImVector<ImGuiStorage_ImGuiStoragePair>,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ImGuiStorage_ImGuiStoragePair {
    pub key: ImGuiID,
    pub __bindgen_anon_1: ImGuiStorage_ImGuiStoragePair__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ImGuiStorage_ImGuiStoragePair__bindgen_ty_1 {
    pub val_i: ::std::os::raw::c_int,
    pub val_f: f32,
    pub val_p: *mut ::std::os::raw::c_void,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_ImGuiStorage_ImGuiStoragePair__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiStorage_ImGuiStoragePair__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(ImGuiStorage_ImGuiStoragePair__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiStorage_ImGuiStoragePair__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(ImGuiStorage_ImGuiStoragePair__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiStorage_ImGuiStoragePair__bindgen_ty_1>())).val_i
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStorage_ImGuiStoragePair__bindgen_ty_1),
            "::",
            stringify!(val_i)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiStorage_ImGuiStoragePair__bindgen_ty_1>())).val_f
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStorage_ImGuiStoragePair__bindgen_ty_1),
            "::",
            stringify!(val_f)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiStorage_ImGuiStoragePair__bindgen_ty_1>())).val_p
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStorage_ImGuiStoragePair__bindgen_ty_1),
            "::",
            stringify!(val_p)
        )
    );
}
#[test]
fn bindgen_test_layout_ImGuiStorage_ImGuiStoragePair() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiStorage_ImGuiStoragePair>(),
        16usize,
        concat!("Size of: ", stringify!(ImGuiStorage_ImGuiStoragePair))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiStorage_ImGuiStoragePair>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiStorage_ImGuiStoragePair))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiStorage_ImGuiStoragePair>())).key as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStorage_ImGuiStoragePair),
            "::",
            stringify!(key)
        )
    );
}
#[test]
fn bindgen_test_layout_ImGuiStorage() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiStorage>(),
        16usize,
        concat!("Size of: ", stringify!(ImGuiStorage))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiStorage>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiStorage))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiStorage>())).Data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStorage),
            "::",
            stringify!(Data)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}?GetInt@ImGuiStorage@@QEBAHIH@Z"]
    pub fn ImGuiStorage_GetInt(
        this: *const ImGuiStorage,
        key: ImGuiID,
        default_val: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?SetInt@ImGuiStorage@@QEAAXIH@Z"]
    pub fn ImGuiStorage_SetInt(this: *mut ImGuiStorage, key: ImGuiID, val: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}?GetBool@ImGuiStorage@@QEBA_NI_N@Z"]
    pub fn ImGuiStorage_GetBool(this: *const ImGuiStorage, key: ImGuiID, default_val: bool)
        -> bool;
}
extern "C" {
    #[link_name = "\u{1}?SetBool@ImGuiStorage@@QEAAXI_N@Z"]
    pub fn ImGuiStorage_SetBool(this: *mut ImGuiStorage, key: ImGuiID, val: bool);
}
extern "C" {
    #[link_name = "\u{1}?GetFloat@ImGuiStorage@@QEBAMIM@Z"]
    pub fn ImGuiStorage_GetFloat(this: *const ImGuiStorage, key: ImGuiID, default_val: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}?SetFloat@ImGuiStorage@@QEAAXIM@Z"]
    pub fn ImGuiStorage_SetFloat(this: *mut ImGuiStorage, key: ImGuiID, val: f32);
}
extern "C" {
    #[link_name = "\u{1}?GetVoidPtr@ImGuiStorage@@QEBAPEAXI@Z"]
    pub fn ImGuiStorage_GetVoidPtr(
        this: *const ImGuiStorage,
        key: ImGuiID,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}?SetVoidPtr@ImGuiStorage@@QEAAXIPEAX@Z"]
    pub fn ImGuiStorage_SetVoidPtr(
        this: *mut ImGuiStorage,
        key: ImGuiID,
        val: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    #[link_name = "\u{1}?GetIntRef@ImGuiStorage@@QEAAPEAHIH@Z"]
    pub fn ImGuiStorage_GetIntRef(
        this: *mut ImGuiStorage,
        key: ImGuiID,
        default_val: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?GetBoolRef@ImGuiStorage@@QEAAPEA_NI_N@Z"]
    pub fn ImGuiStorage_GetBoolRef(
        this: *mut ImGuiStorage,
        key: ImGuiID,
        default_val: bool,
    ) -> *mut bool;
}
extern "C" {
    #[link_name = "\u{1}?GetFloatRef@ImGuiStorage@@QEAAPEAMIM@Z"]
    pub fn ImGuiStorage_GetFloatRef(
        this: *mut ImGuiStorage,
        key: ImGuiID,
        default_val: f32,
    ) -> *mut f32;
}
extern "C" {
    #[link_name = "\u{1}?GetVoidPtrRef@ImGuiStorage@@QEAAPEAPEAXIPEAX@Z"]
    pub fn ImGuiStorage_GetVoidPtrRef(
        this: *mut ImGuiStorage,
        key: ImGuiID,
        default_val: *mut ::std::os::raw::c_void,
    ) -> *mut *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}?SetAllInt@ImGuiStorage@@QEAAXH@Z"]
    pub fn ImGuiStorage_SetAllInt(this: *mut ImGuiStorage, val: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}?BuildSortByKey@ImGuiStorage@@QEAAXXZ"]
    pub fn ImGuiStorage_BuildSortByKey(this: *mut ImGuiStorage);
}
impl ImGuiStorage {
    #[inline]
    pub unsafe fn GetInt(
        &self,
        key: ImGuiID,
        default_val: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        ImGuiStorage_GetInt(self, key, default_val)
    }
    #[inline]
    pub unsafe fn SetInt(&mut self, key: ImGuiID, val: ::std::os::raw::c_int) {
        ImGuiStorage_SetInt(self, key, val)
    }
    #[inline]
    pub unsafe fn GetBool(&self, key: ImGuiID, default_val: bool) -> bool {
        ImGuiStorage_GetBool(self, key, default_val)
    }
    #[inline]
    pub unsafe fn SetBool(&mut self, key: ImGuiID, val: bool) {
        ImGuiStorage_SetBool(self, key, val)
    }
    #[inline]
    pub unsafe fn GetFloat(&self, key: ImGuiID, default_val: f32) -> f32 {
        ImGuiStorage_GetFloat(self, key, default_val)
    }
    #[inline]
    pub unsafe fn SetFloat(&mut self, key: ImGuiID, val: f32) {
        ImGuiStorage_SetFloat(self, key, val)
    }
    #[inline]
    pub unsafe fn GetVoidPtr(&self, key: ImGuiID) -> *mut ::std::os::raw::c_void {
        ImGuiStorage_GetVoidPtr(self, key)
    }
    #[inline]
    pub unsafe fn SetVoidPtr(&mut self, key: ImGuiID, val: *mut ::std::os::raw::c_void) {
        ImGuiStorage_SetVoidPtr(self, key, val)
    }
    #[inline]
    pub unsafe fn GetIntRef(
        &mut self,
        key: ImGuiID,
        default_val: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_int {
        ImGuiStorage_GetIntRef(self, key, default_val)
    }
    #[inline]
    pub unsafe fn GetBoolRef(&mut self, key: ImGuiID, default_val: bool) -> *mut bool {
        ImGuiStorage_GetBoolRef(self, key, default_val)
    }
    #[inline]
    pub unsafe fn GetFloatRef(&mut self, key: ImGuiID, default_val: f32) -> *mut f32 {
        ImGuiStorage_GetFloatRef(self, key, default_val)
    }
    #[inline]
    pub unsafe fn GetVoidPtrRef(
        &mut self,
        key: ImGuiID,
        default_val: *mut ::std::os::raw::c_void,
    ) -> *mut *mut ::std::os::raw::c_void {
        ImGuiStorage_GetVoidPtrRef(self, key, default_val)
    }
    #[inline]
    pub unsafe fn SetAllInt(&mut self, val: ::std::os::raw::c_int) {
        ImGuiStorage_SetAllInt(self, val)
    }
    #[inline]
    pub unsafe fn BuildSortByKey(&mut self) {
        ImGuiStorage_BuildSortByKey(self)
    }
}
#[repr(C)]
#[derive(Debug)]
pub struct ImGuiListClipper {
    pub DisplayStart: ::std::os::raw::c_int,
    pub DisplayEnd: ::std::os::raw::c_int,
    pub ItemsCount: ::std::os::raw::c_int,
    pub StepNo: ::std::os::raw::c_int,
    pub ItemsHeight: f32,
    pub StartPosY: f32,
}
#[test]
fn bindgen_test_layout_ImGuiListClipper() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiListClipper>(),
        24usize,
        concat!("Size of: ", stringify!(ImGuiListClipper))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiListClipper>(),
        4usize,
        concat!("Alignment of ", stringify!(ImGuiListClipper))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiListClipper>())).DisplayStart as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiListClipper),
            "::",
            stringify!(DisplayStart)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiListClipper>())).DisplayEnd as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiListClipper),
            "::",
            stringify!(DisplayEnd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiListClipper>())).ItemsCount as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiListClipper),
            "::",
            stringify!(ItemsCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiListClipper>())).StepNo as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiListClipper),
            "::",
            stringify!(StepNo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiListClipper>())).ItemsHeight as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiListClipper),
            "::",
            stringify!(ItemsHeight)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiListClipper>())).StartPosY as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiListClipper),
            "::",
            stringify!(StartPosY)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}?Begin@ImGuiListClipper@@QEAAXHM@Z"]
    pub fn ImGuiListClipper_Begin(
        this: *mut ImGuiListClipper,
        items_count: ::std::os::raw::c_int,
        items_height: f32,
    );
}
extern "C" {
    #[link_name = "\u{1}?End@ImGuiListClipper@@QEAAXXZ"]
    pub fn ImGuiListClipper_End(this: *mut ImGuiListClipper);
}
extern "C" {
    #[link_name = "\u{1}?Step@ImGuiListClipper@@QEAA_NXZ"]
    pub fn ImGuiListClipper_Step(this: *mut ImGuiListClipper) -> bool;
}
extern "C" {
    #[link_name = "\u{1}??0ImGuiListClipper@@QEAA@XZ"]
    pub fn ImGuiListClipper_ImGuiListClipper(this: *mut ImGuiListClipper);
}
extern "C" {
    #[link_name = "\u{1}??_DImGuiListClipper@@QEAAXXZ"]
    pub fn ImGuiListClipper_ImGuiListClipper_destructor(this: *mut ImGuiListClipper);
}
impl ImGuiListClipper {
    #[inline]
    pub unsafe fn Begin(&mut self, items_count: ::std::os::raw::c_int, items_height: f32) {
        ImGuiListClipper_Begin(self, items_count, items_height)
    }
    #[inline]
    pub unsafe fn End(&mut self) {
        ImGuiListClipper_End(self)
    }
    #[inline]
    pub unsafe fn Step(&mut self) -> bool {
        ImGuiListClipper_Step(self)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        ImGuiListClipper_ImGuiListClipper(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        ImGuiListClipper_ImGuiListClipper_destructor(self)
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImColor {
    pub Value: ImVec4,
}
#[test]
fn bindgen_test_layout_ImColor() {
    assert_eq!(
        ::std::mem::size_of::<ImColor>(),
        16usize,
        concat!("Size of: ", stringify!(ImColor))
    );
    assert_eq!(
        ::std::mem::align_of::<ImColor>(),
        4usize,
        concat!("Alignment of ", stringify!(ImColor))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImColor>())).Value as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImColor),
            "::",
            stringify!(Value)
        )
    );
}
pub type ImDrawCallback = ::std::option::Option<
    unsafe extern "C" fn(parent_list: *const ImDrawList, cmd: *const ImDrawCmd),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImDrawCmd {
    pub ClipRect: ImVec4,
    pub TextureId: ImTextureID,
    pub VtxOffset: ::std::os::raw::c_uint,
    pub IdxOffset: ::std::os::raw::c_uint,
    pub ElemCount: ::std::os::raw::c_uint,
    pub UserCallback: ImDrawCallback,
    pub UserCallbackData: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_ImDrawCmd() {
    assert_eq!(
        ::std::mem::size_of::<ImDrawCmd>(),
        56usize,
        concat!("Size of: ", stringify!(ImDrawCmd))
    );
    assert_eq!(
        ::std::mem::align_of::<ImDrawCmd>(),
        8usize,
        concat!("Alignment of ", stringify!(ImDrawCmd))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImDrawCmd>())).ClipRect as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawCmd),
            "::",
            stringify!(ClipRect)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImDrawCmd>())).TextureId as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawCmd),
            "::",
            stringify!(TextureId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImDrawCmd>())).VtxOffset as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawCmd),
            "::",
            stringify!(VtxOffset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImDrawCmd>())).IdxOffset as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawCmd),
            "::",
            stringify!(IdxOffset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImDrawCmd>())).ElemCount as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawCmd),
            "::",
            stringify!(ElemCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImDrawCmd>())).UserCallback as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawCmd),
            "::",
            stringify!(UserCallback)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImDrawCmd>())).UserCallbackData as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawCmd),
            "::",
            stringify!(UserCallbackData)
        )
    );
}
pub type ImDrawIdx = ::std::os::raw::c_ushort;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImDrawVert {
    pub pos: ImVec2,
    pub uv: ImVec2,
    pub col: ImU32,
}
#[test]
fn bindgen_test_layout_ImDrawVert() {
    assert_eq!(
        ::std::mem::size_of::<ImDrawVert>(),
        20usize,
        concat!("Size of: ", stringify!(ImDrawVert))
    );
    assert_eq!(
        ::std::mem::align_of::<ImDrawVert>(),
        4usize,
        concat!("Alignment of ", stringify!(ImDrawVert))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImDrawVert>())).pos as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawVert),
            "::",
            stringify!(pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImDrawVert>())).uv as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawVert),
            "::",
            stringify!(uv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImDrawVert>())).col as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawVert),
            "::",
            stringify!(col)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImDrawCmdHeader {
    pub ClipRect: ImVec4,
    pub TextureId: ImTextureID,
    pub VtxOffset: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_ImDrawCmdHeader() {
    assert_eq!(
        ::std::mem::size_of::<ImDrawCmdHeader>(),
        32usize,
        concat!("Size of: ", stringify!(ImDrawCmdHeader))
    );
    assert_eq!(
        ::std::mem::align_of::<ImDrawCmdHeader>(),
        8usize,
        concat!("Alignment of ", stringify!(ImDrawCmdHeader))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImDrawCmdHeader>())).ClipRect as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawCmdHeader),
            "::",
            stringify!(ClipRect)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImDrawCmdHeader>())).TextureId as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawCmdHeader),
            "::",
            stringify!(TextureId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImDrawCmdHeader>())).VtxOffset as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawCmdHeader),
            "::",
            stringify!(VtxOffset)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct ImDrawChannel {
    pub _CmdBuffer: ImVector<ImDrawCmd>,
    pub _IdxBuffer: ImVector<ImDrawIdx>,
}
#[test]
fn bindgen_test_layout_ImDrawChannel() {
    assert_eq!(
        ::std::mem::size_of::<ImDrawChannel>(),
        32usize,
        concat!("Size of: ", stringify!(ImDrawChannel))
    );
    assert_eq!(
        ::std::mem::align_of::<ImDrawChannel>(),
        8usize,
        concat!("Alignment of ", stringify!(ImDrawChannel))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImDrawChannel>()))._CmdBuffer as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawChannel),
            "::",
            stringify!(_CmdBuffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImDrawChannel>()))._IdxBuffer as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawChannel),
            "::",
            stringify!(_IdxBuffer)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct ImDrawListSplitter {
    pub _Current: ::std::os::raw::c_int,
    pub _Count: ::std::os::raw::c_int,
    pub _Channels: ImVector<ImDrawChannel>,
}
#[test]
fn bindgen_test_layout_ImDrawListSplitter() {
    assert_eq!(
        ::std::mem::size_of::<ImDrawListSplitter>(),
        24usize,
        concat!("Size of: ", stringify!(ImDrawListSplitter))
    );
    assert_eq!(
        ::std::mem::align_of::<ImDrawListSplitter>(),
        8usize,
        concat!("Alignment of ", stringify!(ImDrawListSplitter))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImDrawListSplitter>()))._Current as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawListSplitter),
            "::",
            stringify!(_Current)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImDrawListSplitter>()))._Count as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawListSplitter),
            "::",
            stringify!(_Count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImDrawListSplitter>()))._Channels as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawListSplitter),
            "::",
            stringify!(_Channels)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}?ClearFreeMemory@ImDrawListSplitter@@QEAAXXZ"]
    pub fn ImDrawListSplitter_ClearFreeMemory(this: *mut ImDrawListSplitter);
}
extern "C" {
    #[link_name = "\u{1}?Split@ImDrawListSplitter@@QEAAXPEAUImDrawList@@H@Z"]
    pub fn ImDrawListSplitter_Split(
        this: *mut ImDrawListSplitter,
        draw_list: *mut ImDrawList,
        count: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}?Merge@ImDrawListSplitter@@QEAAXPEAUImDrawList@@@Z"]
    pub fn ImDrawListSplitter_Merge(this: *mut ImDrawListSplitter, draw_list: *mut ImDrawList);
}
extern "C" {
    #[link_name = "\u{1}?SetCurrentChannel@ImDrawListSplitter@@QEAAXPEAUImDrawList@@H@Z"]
    pub fn ImDrawListSplitter_SetCurrentChannel(
        this: *mut ImDrawListSplitter,
        draw_list: *mut ImDrawList,
        channel_idx: ::std::os::raw::c_int,
    );
}
impl ImDrawListSplitter {
    #[inline]
    pub unsafe fn ClearFreeMemory(&mut self) {
        ImDrawListSplitter_ClearFreeMemory(self)
    }
    #[inline]
    pub unsafe fn Split(&mut self, draw_list: *mut ImDrawList, count: ::std::os::raw::c_int) {
        ImDrawListSplitter_Split(self, draw_list, count)
    }
    #[inline]
    pub unsafe fn Merge(&mut self, draw_list: *mut ImDrawList) {
        ImDrawListSplitter_Merge(self, draw_list)
    }
    #[inline]
    pub unsafe fn SetCurrentChannel(
        &mut self,
        draw_list: *mut ImDrawList,
        channel_idx: ::std::os::raw::c_int,
    ) {
        ImDrawListSplitter_SetCurrentChannel(self, draw_list, channel_idx)
    }
}
pub const ImDrawCornerFlags_None: ImDrawCornerFlags_ = 0;
pub const ImDrawCornerFlags_TopLeft: ImDrawCornerFlags_ = 1;
pub const ImDrawCornerFlags_TopRight: ImDrawCornerFlags_ = 2;
pub const ImDrawCornerFlags_BotLeft: ImDrawCornerFlags_ = 4;
pub const ImDrawCornerFlags_BotRight: ImDrawCornerFlags_ = 8;
pub const ImDrawCornerFlags_Top: ImDrawCornerFlags_ = 3;
pub const ImDrawCornerFlags_Bot: ImDrawCornerFlags_ = 12;
pub const ImDrawCornerFlags_Left: ImDrawCornerFlags_ = 5;
pub const ImDrawCornerFlags_Right: ImDrawCornerFlags_ = 10;
pub const ImDrawCornerFlags_All: ImDrawCornerFlags_ = 15;
pub type ImDrawCornerFlags_ = ::std::os::raw::c_int;
pub const ImDrawListFlags_None: ImDrawListFlags_ = 0;
pub const ImDrawListFlags_AntiAliasedLines: ImDrawListFlags_ = 1;
pub const ImDrawListFlags_AntiAliasedLinesUseTex: ImDrawListFlags_ = 2;
pub const ImDrawListFlags_AntiAliasedFill: ImDrawListFlags_ = 4;
pub const ImDrawListFlags_AllowVtxOffset: ImDrawListFlags_ = 8;
pub type ImDrawListFlags_ = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug)]
pub struct ImDrawList {
    pub CmdBuffer: ImVector<ImDrawCmd>,
    pub IdxBuffer: ImVector<ImDrawIdx>,
    pub VtxBuffer: ImVector<ImDrawVert>,
    pub Flags: ImDrawListFlags,
    pub _VtxCurrentIdx: ::std::os::raw::c_uint,
    pub _Data: *const ImDrawListSharedData,
    pub _OwnerName: *const ::std::os::raw::c_char,
    pub _VtxWritePtr: *mut ImDrawVert,
    pub _IdxWritePtr: *mut ImDrawIdx,
    pub _ClipRectStack: ImVector<ImVec4>,
    pub _TextureIdStack: ImVector<ImTextureID>,
    pub _Path: ImVector<ImVec2>,
    pub _CmdHeader: ImDrawCmdHeader,
    pub _Splitter: ImDrawListSplitter,
}
#[test]
fn bindgen_test_layout_ImDrawList() {
    assert_eq!(
        ::std::mem::size_of::<ImDrawList>(),
        192usize,
        concat!("Size of: ", stringify!(ImDrawList))
    );
    assert_eq!(
        ::std::mem::align_of::<ImDrawList>(),
        8usize,
        concat!("Alignment of ", stringify!(ImDrawList))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImDrawList>())).CmdBuffer as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawList),
            "::",
            stringify!(CmdBuffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImDrawList>())).IdxBuffer as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawList),
            "::",
            stringify!(IdxBuffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImDrawList>())).VtxBuffer as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawList),
            "::",
            stringify!(VtxBuffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImDrawList>())).Flags as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawList),
            "::",
            stringify!(Flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImDrawList>()))._VtxCurrentIdx as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawList),
            "::",
            stringify!(_VtxCurrentIdx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImDrawList>()))._Data as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawList),
            "::",
            stringify!(_Data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImDrawList>()))._OwnerName as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawList),
            "::",
            stringify!(_OwnerName)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImDrawList>()))._VtxWritePtr as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawList),
            "::",
            stringify!(_VtxWritePtr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImDrawList>()))._IdxWritePtr as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawList),
            "::",
            stringify!(_IdxWritePtr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImDrawList>()))._ClipRectStack as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawList),
            "::",
            stringify!(_ClipRectStack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImDrawList>()))._TextureIdStack as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawList),
            "::",
            stringify!(_TextureIdStack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImDrawList>()))._Path as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawList),
            "::",
            stringify!(_Path)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImDrawList>()))._CmdHeader as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawList),
            "::",
            stringify!(_CmdHeader)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImDrawList>()))._Splitter as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawList),
            "::",
            stringify!(_Splitter)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}?PushClipRect@ImDrawList@@QEAAXUImVec2@@0_N@Z"]
    pub fn ImDrawList_PushClipRect(
        this: *mut ImDrawList,
        clip_rect_min: ImVec2,
        clip_rect_max: ImVec2,
        intersect_with_current_clip_rect: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?PushClipRectFullScreen@ImDrawList@@QEAAXXZ"]
    pub fn ImDrawList_PushClipRectFullScreen(this: *mut ImDrawList);
}
extern "C" {
    #[link_name = "\u{1}?PopClipRect@ImDrawList@@QEAAXXZ"]
    pub fn ImDrawList_PopClipRect(this: *mut ImDrawList);
}
extern "C" {
    #[link_name = "\u{1}?PushTextureID@ImDrawList@@QEAAXPEAX@Z"]
    pub fn ImDrawList_PushTextureID(this: *mut ImDrawList, texture_id: ImTextureID);
}
extern "C" {
    #[link_name = "\u{1}?PopTextureID@ImDrawList@@QEAAXXZ"]
    pub fn ImDrawList_PopTextureID(this: *mut ImDrawList);
}
extern "C" {
    #[link_name = "\u{1}?AddLine@ImDrawList@@QEAAXAEBUImVec2@@0IM@Z"]
    pub fn ImDrawList_AddLine(
        this: *mut ImDrawList,
        p1: *const ImVec2,
        p2: *const ImVec2,
        col: ImU32,
        thickness: f32,
    );
}
extern "C" {
    #[link_name = "\u{1}?AddRect@ImDrawList@@QEAAXAEBUImVec2@@0IMHM@Z"]
    pub fn ImDrawList_AddRect(
        this: *mut ImDrawList,
        p_min: *const ImVec2,
        p_max: *const ImVec2,
        col: ImU32,
        rounding: f32,
        rounding_corners: ImDrawCornerFlags,
        thickness: f32,
    );
}
extern "C" {
    #[link_name = "\u{1}?AddRectFilled@ImDrawList@@QEAAXAEBUImVec2@@0IMH@Z"]
    pub fn ImDrawList_AddRectFilled(
        this: *mut ImDrawList,
        p_min: *const ImVec2,
        p_max: *const ImVec2,
        col: ImU32,
        rounding: f32,
        rounding_corners: ImDrawCornerFlags,
    );
}
extern "C" {
    #[link_name = "\u{1}?AddRectFilledMultiColor@ImDrawList@@QEAAXAEBUImVec2@@0IIII@Z"]
    pub fn ImDrawList_AddRectFilledMultiColor(
        this: *mut ImDrawList,
        p_min: *const ImVec2,
        p_max: *const ImVec2,
        col_upr_left: ImU32,
        col_upr_right: ImU32,
        col_bot_right: ImU32,
        col_bot_left: ImU32,
    );
}
extern "C" {
    #[link_name = "\u{1}?AddQuad@ImDrawList@@QEAAXAEBUImVec2@@000IM@Z"]
    pub fn ImDrawList_AddQuad(
        this: *mut ImDrawList,
        p1: *const ImVec2,
        p2: *const ImVec2,
        p3: *const ImVec2,
        p4: *const ImVec2,
        col: ImU32,
        thickness: f32,
    );
}
extern "C" {
    #[link_name = "\u{1}?AddQuadFilled@ImDrawList@@QEAAXAEBUImVec2@@000I@Z"]
    pub fn ImDrawList_AddQuadFilled(
        this: *mut ImDrawList,
        p1: *const ImVec2,
        p2: *const ImVec2,
        p3: *const ImVec2,
        p4: *const ImVec2,
        col: ImU32,
    );
}
extern "C" {
    #[link_name = "\u{1}?AddTriangle@ImDrawList@@QEAAXAEBUImVec2@@00IM@Z"]
    pub fn ImDrawList_AddTriangle(
        this: *mut ImDrawList,
        p1: *const ImVec2,
        p2: *const ImVec2,
        p3: *const ImVec2,
        col: ImU32,
        thickness: f32,
    );
}
extern "C" {
    #[link_name = "\u{1}?AddTriangleFilled@ImDrawList@@QEAAXAEBUImVec2@@00I@Z"]
    pub fn ImDrawList_AddTriangleFilled(
        this: *mut ImDrawList,
        p1: *const ImVec2,
        p2: *const ImVec2,
        p3: *const ImVec2,
        col: ImU32,
    );
}
extern "C" {
    #[link_name = "\u{1}?AddCircle@ImDrawList@@QEAAXAEBUImVec2@@MIHM@Z"]
    pub fn ImDrawList_AddCircle(
        this: *mut ImDrawList,
        center: *const ImVec2,
        radius: f32,
        col: ImU32,
        num_segments: ::std::os::raw::c_int,
        thickness: f32,
    );
}
extern "C" {
    #[link_name = "\u{1}?AddCircleFilled@ImDrawList@@QEAAXAEBUImVec2@@MIH@Z"]
    pub fn ImDrawList_AddCircleFilled(
        this: *mut ImDrawList,
        center: *const ImVec2,
        radius: f32,
        col: ImU32,
        num_segments: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}?AddNgon@ImDrawList@@QEAAXAEBUImVec2@@MIHM@Z"]
    pub fn ImDrawList_AddNgon(
        this: *mut ImDrawList,
        center: *const ImVec2,
        radius: f32,
        col: ImU32,
        num_segments: ::std::os::raw::c_int,
        thickness: f32,
    );
}
extern "C" {
    #[link_name = "\u{1}?AddNgonFilled@ImDrawList@@QEAAXAEBUImVec2@@MIH@Z"]
    pub fn ImDrawList_AddNgonFilled(
        this: *mut ImDrawList,
        center: *const ImVec2,
        radius: f32,
        col: ImU32,
        num_segments: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}?AddText@ImDrawList@@QEAAXAEBUImVec2@@IPEBD1@Z"]
    pub fn ImDrawList_AddText(
        this: *mut ImDrawList,
        pos: *const ImVec2,
        col: ImU32,
        text_begin: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    #[link_name = "\u{1}?AddText@ImDrawList@@QEAAXPEBUImFont@@MAEBUImVec2@@IPEBD2MPEBUImVec4@@@Z"]
    pub fn ImDrawList_AddText1(
        this: *mut ImDrawList,
        font: *const ImFont,
        font_size: f32,
        pos: *const ImVec2,
        col: ImU32,
        text_begin: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
        wrap_width: f32,
        cpu_fine_clip_rect: *const ImVec4,
    );
}
extern "C" {
    #[link_name = "\u{1}?AddPolyline@ImDrawList@@QEAAXPEBUImVec2@@HI_NM@Z"]
    pub fn ImDrawList_AddPolyline(
        this: *mut ImDrawList,
        points: *const ImVec2,
        num_points: ::std::os::raw::c_int,
        col: ImU32,
        closed: bool,
        thickness: f32,
    );
}
extern "C" {
    #[link_name = "\u{1}?AddConvexPolyFilled@ImDrawList@@QEAAXPEBUImVec2@@HI@Z"]
    pub fn ImDrawList_AddConvexPolyFilled(
        this: *mut ImDrawList,
        points: *const ImVec2,
        num_points: ::std::os::raw::c_int,
        col: ImU32,
    );
}
extern "C" {
    #[link_name = "\u{1}?AddBezierCurve@ImDrawList@@QEAAXAEBUImVec2@@000IMH@Z"]
    pub fn ImDrawList_AddBezierCurve(
        this: *mut ImDrawList,
        p1: *const ImVec2,
        p2: *const ImVec2,
        p3: *const ImVec2,
        p4: *const ImVec2,
        col: ImU32,
        thickness: f32,
        num_segments: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}?AddImage@ImDrawList@@QEAAXPEAXAEBUImVec2@@111I@Z"]
    pub fn ImDrawList_AddImage(
        this: *mut ImDrawList,
        user_texture_id: ImTextureID,
        p_min: *const ImVec2,
        p_max: *const ImVec2,
        uv_min: *const ImVec2,
        uv_max: *const ImVec2,
        col: ImU32,
    );
}
extern "C" {
    #[link_name = "\u{1}?AddImageQuad@ImDrawList@@QEAAXPEAXAEBUImVec2@@1111111I@Z"]
    pub fn ImDrawList_AddImageQuad(
        this: *mut ImDrawList,
        user_texture_id: ImTextureID,
        p1: *const ImVec2,
        p2: *const ImVec2,
        p3: *const ImVec2,
        p4: *const ImVec2,
        uv1: *const ImVec2,
        uv2: *const ImVec2,
        uv3: *const ImVec2,
        uv4: *const ImVec2,
        col: ImU32,
    );
}
extern "C" {
    #[link_name = "\u{1}?AddImageRounded@ImDrawList@@QEAAXPEAXAEBUImVec2@@111IMH@Z"]
    pub fn ImDrawList_AddImageRounded(
        this: *mut ImDrawList,
        user_texture_id: ImTextureID,
        p_min: *const ImVec2,
        p_max: *const ImVec2,
        uv_min: *const ImVec2,
        uv_max: *const ImVec2,
        col: ImU32,
        rounding: f32,
        rounding_corners: ImDrawCornerFlags,
    );
}
extern "C" {
    #[link_name = "\u{1}?PathArcTo@ImDrawList@@QEAAXAEBUImVec2@@MMMH@Z"]
    pub fn ImDrawList_PathArcTo(
        this: *mut ImDrawList,
        center: *const ImVec2,
        radius: f32,
        a_min: f32,
        a_max: f32,
        num_segments: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}?PathArcToFast@ImDrawList@@QEAAXAEBUImVec2@@MHH@Z"]
    pub fn ImDrawList_PathArcToFast(
        this: *mut ImDrawList,
        center: *const ImVec2,
        radius: f32,
        a_min_of_12: ::std::os::raw::c_int,
        a_max_of_12: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}?PathBezierCurveTo@ImDrawList@@QEAAXAEBUImVec2@@00H@Z"]
    pub fn ImDrawList_PathBezierCurveTo(
        this: *mut ImDrawList,
        p2: *const ImVec2,
        p3: *const ImVec2,
        p4: *const ImVec2,
        num_segments: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}?PathRect@ImDrawList@@QEAAXAEBUImVec2@@0MH@Z"]
    pub fn ImDrawList_PathRect(
        this: *mut ImDrawList,
        rect_min: *const ImVec2,
        rect_max: *const ImVec2,
        rounding: f32,
        rounding_corners: ImDrawCornerFlags,
    );
}
extern "C" {
    #[link_name = "\u{1}?AddCallback@ImDrawList@@QEAAXP6AXPEBU1@PEBUImDrawCmd@@@ZPEAX@Z"]
    pub fn ImDrawList_AddCallback(
        this: *mut ImDrawList,
        callback: ImDrawCallback,
        callback_data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    #[link_name = "\u{1}?AddDrawCmd@ImDrawList@@QEAAXXZ"]
    pub fn ImDrawList_AddDrawCmd(this: *mut ImDrawList);
}
extern "C" {
    #[link_name = "\u{1}?CloneOutput@ImDrawList@@QEBAPEAU1@XZ"]
    pub fn ImDrawList_CloneOutput(this: *const ImDrawList) -> *mut ImDrawList;
}
extern "C" {
    #[link_name = "\u{1}?PrimReserve@ImDrawList@@QEAAXHH@Z"]
    pub fn ImDrawList_PrimReserve(
        this: *mut ImDrawList,
        idx_count: ::std::os::raw::c_int,
        vtx_count: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}?PrimUnreserve@ImDrawList@@QEAAXHH@Z"]
    pub fn ImDrawList_PrimUnreserve(
        this: *mut ImDrawList,
        idx_count: ::std::os::raw::c_int,
        vtx_count: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}?PrimRect@ImDrawList@@QEAAXAEBUImVec2@@0I@Z"]
    pub fn ImDrawList_PrimRect(
        this: *mut ImDrawList,
        a: *const ImVec2,
        b: *const ImVec2,
        col: ImU32,
    );
}
extern "C" {
    #[link_name = "\u{1}?PrimRectUV@ImDrawList@@QEAAXAEBUImVec2@@000I@Z"]
    pub fn ImDrawList_PrimRectUV(
        this: *mut ImDrawList,
        a: *const ImVec2,
        b: *const ImVec2,
        uv_a: *const ImVec2,
        uv_b: *const ImVec2,
        col: ImU32,
    );
}
extern "C" {
    #[link_name = "\u{1}?PrimQuadUV@ImDrawList@@QEAAXAEBUImVec2@@0000000I@Z"]
    pub fn ImDrawList_PrimQuadUV(
        this: *mut ImDrawList,
        a: *const ImVec2,
        b: *const ImVec2,
        c: *const ImVec2,
        d: *const ImVec2,
        uv_a: *const ImVec2,
        uv_b: *const ImVec2,
        uv_c: *const ImVec2,
        uv_d: *const ImVec2,
        col: ImU32,
    );
}
extern "C" {
    #[link_name = "\u{1}?_ResetForNewFrame@ImDrawList@@QEAAXXZ"]
    pub fn ImDrawList__ResetForNewFrame(this: *mut ImDrawList);
}
extern "C" {
    #[link_name = "\u{1}?_ClearFreeMemory@ImDrawList@@QEAAXXZ"]
    pub fn ImDrawList__ClearFreeMemory(this: *mut ImDrawList);
}
extern "C" {
    #[link_name = "\u{1}?_PopUnusedDrawCmd@ImDrawList@@QEAAXXZ"]
    pub fn ImDrawList__PopUnusedDrawCmd(this: *mut ImDrawList);
}
extern "C" {
    #[link_name = "\u{1}?_OnChangedClipRect@ImDrawList@@QEAAXXZ"]
    pub fn ImDrawList__OnChangedClipRect(this: *mut ImDrawList);
}
extern "C" {
    #[link_name = "\u{1}?_OnChangedTextureID@ImDrawList@@QEAAXXZ"]
    pub fn ImDrawList__OnChangedTextureID(this: *mut ImDrawList);
}
extern "C" {
    #[link_name = "\u{1}?_OnChangedVtxOffset@ImDrawList@@QEAAXXZ"]
    pub fn ImDrawList__OnChangedVtxOffset(this: *mut ImDrawList);
}
impl ImDrawList {
    #[inline]
    pub unsafe fn PushClipRect(
        &mut self,
        clip_rect_min: ImVec2,
        clip_rect_max: ImVec2,
        intersect_with_current_clip_rect: bool,
    ) {
        ImDrawList_PushClipRect(
            self,
            clip_rect_min,
            clip_rect_max,
            intersect_with_current_clip_rect,
        )
    }
    #[inline]
    pub unsafe fn PushClipRectFullScreen(&mut self) {
        ImDrawList_PushClipRectFullScreen(self)
    }
    #[inline]
    pub unsafe fn PopClipRect(&mut self) {
        ImDrawList_PopClipRect(self)
    }
    #[inline]
    pub unsafe fn PushTextureID(&mut self, texture_id: ImTextureID) {
        ImDrawList_PushTextureID(self, texture_id)
    }
    #[inline]
    pub unsafe fn PopTextureID(&mut self) {
        ImDrawList_PopTextureID(self)
    }
    #[inline]
    pub unsafe fn AddLine(
        &mut self,
        p1: *const ImVec2,
        p2: *const ImVec2,
        col: ImU32,
        thickness: f32,
    ) {
        ImDrawList_AddLine(self, p1, p2, col, thickness)
    }
    #[inline]
    pub unsafe fn AddRect(
        &mut self,
        p_min: *const ImVec2,
        p_max: *const ImVec2,
        col: ImU32,
        rounding: f32,
        rounding_corners: ImDrawCornerFlags,
        thickness: f32,
    ) {
        ImDrawList_AddRect(
            self,
            p_min,
            p_max,
            col,
            rounding,
            rounding_corners,
            thickness,
        )
    }
    #[inline]
    pub unsafe fn AddRectFilled(
        &mut self,
        p_min: *const ImVec2,
        p_max: *const ImVec2,
        col: ImU32,
        rounding: f32,
        rounding_corners: ImDrawCornerFlags,
    ) {
        ImDrawList_AddRectFilled(self, p_min, p_max, col, rounding, rounding_corners)
    }
    #[inline]
    pub unsafe fn AddRectFilledMultiColor(
        &mut self,
        p_min: *const ImVec2,
        p_max: *const ImVec2,
        col_upr_left: ImU32,
        col_upr_right: ImU32,
        col_bot_right: ImU32,
        col_bot_left: ImU32,
    ) {
        ImDrawList_AddRectFilledMultiColor(
            self,
            p_min,
            p_max,
            col_upr_left,
            col_upr_right,
            col_bot_right,
            col_bot_left,
        )
    }
    #[inline]
    pub unsafe fn AddQuad(
        &mut self,
        p1: *const ImVec2,
        p2: *const ImVec2,
        p3: *const ImVec2,
        p4: *const ImVec2,
        col: ImU32,
        thickness: f32,
    ) {
        ImDrawList_AddQuad(self, p1, p2, p3, p4, col, thickness)
    }
    #[inline]
    pub unsafe fn AddQuadFilled(
        &mut self,
        p1: *const ImVec2,
        p2: *const ImVec2,
        p3: *const ImVec2,
        p4: *const ImVec2,
        col: ImU32,
    ) {
        ImDrawList_AddQuadFilled(self, p1, p2, p3, p4, col)
    }
    #[inline]
    pub unsafe fn AddTriangle(
        &mut self,
        p1: *const ImVec2,
        p2: *const ImVec2,
        p3: *const ImVec2,
        col: ImU32,
        thickness: f32,
    ) {
        ImDrawList_AddTriangle(self, p1, p2, p3, col, thickness)
    }
    #[inline]
    pub unsafe fn AddTriangleFilled(
        &mut self,
        p1: *const ImVec2,
        p2: *const ImVec2,
        p3: *const ImVec2,
        col: ImU32,
    ) {
        ImDrawList_AddTriangleFilled(self, p1, p2, p3, col)
    }
    #[inline]
    pub unsafe fn AddCircle(
        &mut self,
        center: *const ImVec2,
        radius: f32,
        col: ImU32,
        num_segments: ::std::os::raw::c_int,
        thickness: f32,
    ) {
        ImDrawList_AddCircle(self, center, radius, col, num_segments, thickness)
    }
    #[inline]
    pub unsafe fn AddCircleFilled(
        &mut self,
        center: *const ImVec2,
        radius: f32,
        col: ImU32,
        num_segments: ::std::os::raw::c_int,
    ) {
        ImDrawList_AddCircleFilled(self, center, radius, col, num_segments)
    }
    #[inline]
    pub unsafe fn AddNgon(
        &mut self,
        center: *const ImVec2,
        radius: f32,
        col: ImU32,
        num_segments: ::std::os::raw::c_int,
        thickness: f32,
    ) {
        ImDrawList_AddNgon(self, center, radius, col, num_segments, thickness)
    }
    #[inline]
    pub unsafe fn AddNgonFilled(
        &mut self,
        center: *const ImVec2,
        radius: f32,
        col: ImU32,
        num_segments: ::std::os::raw::c_int,
    ) {
        ImDrawList_AddNgonFilled(self, center, radius, col, num_segments)
    }
    #[inline]
    pub unsafe fn AddText(
        &mut self,
        pos: *const ImVec2,
        col: ImU32,
        text_begin: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
    ) {
        ImDrawList_AddText(self, pos, col, text_begin, text_end)
    }
    #[inline]
    pub unsafe fn AddText1(
        &mut self,
        font: *const ImFont,
        font_size: f32,
        pos: *const ImVec2,
        col: ImU32,
        text_begin: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
        wrap_width: f32,
        cpu_fine_clip_rect: *const ImVec4,
    ) {
        ImDrawList_AddText1(
            self,
            font,
            font_size,
            pos,
            col,
            text_begin,
            text_end,
            wrap_width,
            cpu_fine_clip_rect,
        )
    }
    #[inline]
    pub unsafe fn AddPolyline(
        &mut self,
        points: *const ImVec2,
        num_points: ::std::os::raw::c_int,
        col: ImU32,
        closed: bool,
        thickness: f32,
    ) {
        ImDrawList_AddPolyline(self, points, num_points, col, closed, thickness)
    }
    #[inline]
    pub unsafe fn AddConvexPolyFilled(
        &mut self,
        points: *const ImVec2,
        num_points: ::std::os::raw::c_int,
        col: ImU32,
    ) {
        ImDrawList_AddConvexPolyFilled(self, points, num_points, col)
    }
    #[inline]
    pub unsafe fn AddBezierCurve(
        &mut self,
        p1: *const ImVec2,
        p2: *const ImVec2,
        p3: *const ImVec2,
        p4: *const ImVec2,
        col: ImU32,
        thickness: f32,
        num_segments: ::std::os::raw::c_int,
    ) {
        ImDrawList_AddBezierCurve(self, p1, p2, p3, p4, col, thickness, num_segments)
    }
    #[inline]
    pub unsafe fn AddImage(
        &mut self,
        user_texture_id: ImTextureID,
        p_min: *const ImVec2,
        p_max: *const ImVec2,
        uv_min: *const ImVec2,
        uv_max: *const ImVec2,
        col: ImU32,
    ) {
        ImDrawList_AddImage(self, user_texture_id, p_min, p_max, uv_min, uv_max, col)
    }
    #[inline]
    pub unsafe fn AddImageQuad(
        &mut self,
        user_texture_id: ImTextureID,
        p1: *const ImVec2,
        p2: *const ImVec2,
        p3: *const ImVec2,
        p4: *const ImVec2,
        uv1: *const ImVec2,
        uv2: *const ImVec2,
        uv3: *const ImVec2,
        uv4: *const ImVec2,
        col: ImU32,
    ) {
        ImDrawList_AddImageQuad(
            self,
            user_texture_id,
            p1,
            p2,
            p3,
            p4,
            uv1,
            uv2,
            uv3,
            uv4,
            col,
        )
    }
    #[inline]
    pub unsafe fn AddImageRounded(
        &mut self,
        user_texture_id: ImTextureID,
        p_min: *const ImVec2,
        p_max: *const ImVec2,
        uv_min: *const ImVec2,
        uv_max: *const ImVec2,
        col: ImU32,
        rounding: f32,
        rounding_corners: ImDrawCornerFlags,
    ) {
        ImDrawList_AddImageRounded(
            self,
            user_texture_id,
            p_min,
            p_max,
            uv_min,
            uv_max,
            col,
            rounding,
            rounding_corners,
        )
    }
    #[inline]
    pub unsafe fn PathArcTo(
        &mut self,
        center: *const ImVec2,
        radius: f32,
        a_min: f32,
        a_max: f32,
        num_segments: ::std::os::raw::c_int,
    ) {
        ImDrawList_PathArcTo(self, center, radius, a_min, a_max, num_segments)
    }
    #[inline]
    pub unsafe fn PathArcToFast(
        &mut self,
        center: *const ImVec2,
        radius: f32,
        a_min_of_12: ::std::os::raw::c_int,
        a_max_of_12: ::std::os::raw::c_int,
    ) {
        ImDrawList_PathArcToFast(self, center, radius, a_min_of_12, a_max_of_12)
    }
    #[inline]
    pub unsafe fn PathBezierCurveTo(
        &mut self,
        p2: *const ImVec2,
        p3: *const ImVec2,
        p4: *const ImVec2,
        num_segments: ::std::os::raw::c_int,
    ) {
        ImDrawList_PathBezierCurveTo(self, p2, p3, p4, num_segments)
    }
    #[inline]
    pub unsafe fn PathRect(
        &mut self,
        rect_min: *const ImVec2,
        rect_max: *const ImVec2,
        rounding: f32,
        rounding_corners: ImDrawCornerFlags,
    ) {
        ImDrawList_PathRect(self, rect_min, rect_max, rounding, rounding_corners)
    }
    #[inline]
    pub unsafe fn AddCallback(
        &mut self,
        callback: ImDrawCallback,
        callback_data: *mut ::std::os::raw::c_void,
    ) {
        ImDrawList_AddCallback(self, callback, callback_data)
    }
    #[inline]
    pub unsafe fn AddDrawCmd(&mut self) {
        ImDrawList_AddDrawCmd(self)
    }
    #[inline]
    pub unsafe fn CloneOutput(&self) -> *mut ImDrawList {
        ImDrawList_CloneOutput(self)
    }
    #[inline]
    pub unsafe fn PrimReserve(
        &mut self,
        idx_count: ::std::os::raw::c_int,
        vtx_count: ::std::os::raw::c_int,
    ) {
        ImDrawList_PrimReserve(self, idx_count, vtx_count)
    }
    #[inline]
    pub unsafe fn PrimUnreserve(
        &mut self,
        idx_count: ::std::os::raw::c_int,
        vtx_count: ::std::os::raw::c_int,
    ) {
        ImDrawList_PrimUnreserve(self, idx_count, vtx_count)
    }
    #[inline]
    pub unsafe fn PrimRect(&mut self, a: *const ImVec2, b: *const ImVec2, col: ImU32) {
        ImDrawList_PrimRect(self, a, b, col)
    }
    #[inline]
    pub unsafe fn PrimRectUV(
        &mut self,
        a: *const ImVec2,
        b: *const ImVec2,
        uv_a: *const ImVec2,
        uv_b: *const ImVec2,
        col: ImU32,
    ) {
        ImDrawList_PrimRectUV(self, a, b, uv_a, uv_b, col)
    }
    #[inline]
    pub unsafe fn PrimQuadUV(
        &mut self,
        a: *const ImVec2,
        b: *const ImVec2,
        c: *const ImVec2,
        d: *const ImVec2,
        uv_a: *const ImVec2,
        uv_b: *const ImVec2,
        uv_c: *const ImVec2,
        uv_d: *const ImVec2,
        col: ImU32,
    ) {
        ImDrawList_PrimQuadUV(self, a, b, c, d, uv_a, uv_b, uv_c, uv_d, col)
    }
    #[inline]
    pub unsafe fn _ResetForNewFrame(&mut self) {
        ImDrawList__ResetForNewFrame(self)
    }
    #[inline]
    pub unsafe fn _ClearFreeMemory(&mut self) {
        ImDrawList__ClearFreeMemory(self)
    }
    #[inline]
    pub unsafe fn _PopUnusedDrawCmd(&mut self) {
        ImDrawList__PopUnusedDrawCmd(self)
    }
    #[inline]
    pub unsafe fn _OnChangedClipRect(&mut self) {
        ImDrawList__OnChangedClipRect(self)
    }
    #[inline]
    pub unsafe fn _OnChangedTextureID(&mut self) {
        ImDrawList__OnChangedTextureID(self)
    }
    #[inline]
    pub unsafe fn _OnChangedVtxOffset(&mut self) {
        ImDrawList__OnChangedVtxOffset(self)
    }
}
#[repr(C)]
#[derive(Debug)]
pub struct ImDrawData {
    pub Valid: bool,
    pub CmdLists: *mut *mut ImDrawList,
    pub CmdListsCount: ::std::os::raw::c_int,
    pub TotalIdxCount: ::std::os::raw::c_int,
    pub TotalVtxCount: ::std::os::raw::c_int,
    pub DisplayPos: ImVec2,
    pub DisplaySize: ImVec2,
    pub FramebufferScale: ImVec2,
}
#[test]
fn bindgen_test_layout_ImDrawData() {
    assert_eq!(
        ::std::mem::size_of::<ImDrawData>(),
        56usize,
        concat!("Size of: ", stringify!(ImDrawData))
    );
    assert_eq!(
        ::std::mem::align_of::<ImDrawData>(),
        8usize,
        concat!("Alignment of ", stringify!(ImDrawData))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImDrawData>())).Valid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawData),
            "::",
            stringify!(Valid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImDrawData>())).CmdLists as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawData),
            "::",
            stringify!(CmdLists)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImDrawData>())).CmdListsCount as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawData),
            "::",
            stringify!(CmdListsCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImDrawData>())).TotalIdxCount as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawData),
            "::",
            stringify!(TotalIdxCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImDrawData>())).TotalVtxCount as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawData),
            "::",
            stringify!(TotalVtxCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImDrawData>())).DisplayPos as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawData),
            "::",
            stringify!(DisplayPos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImDrawData>())).DisplaySize as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawData),
            "::",
            stringify!(DisplaySize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImDrawData>())).FramebufferScale as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawData),
            "::",
            stringify!(FramebufferScale)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}?DeIndexAllBuffers@ImDrawData@@QEAAXXZ"]
    pub fn ImDrawData_DeIndexAllBuffers(this: *mut ImDrawData);
}
extern "C" {
    #[link_name = "\u{1}?ScaleClipRects@ImDrawData@@QEAAXAEBUImVec2@@@Z"]
    pub fn ImDrawData_ScaleClipRects(this: *mut ImDrawData, fb_scale: *const ImVec2);
}
impl ImDrawData {
    #[inline]
    pub unsafe fn DeIndexAllBuffers(&mut self) {
        ImDrawData_DeIndexAllBuffers(self)
    }
    #[inline]
    pub unsafe fn ScaleClipRects(&mut self, fb_scale: *const ImVec2) {
        ImDrawData_ScaleClipRects(self, fb_scale)
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ImFontConfig {
    pub FontData: *mut ::std::os::raw::c_void,
    pub FontDataSize: ::std::os::raw::c_int,
    pub FontDataOwnedByAtlas: bool,
    pub FontNo: ::std::os::raw::c_int,
    pub SizePixels: f32,
    pub OversampleH: ::std::os::raw::c_int,
    pub OversampleV: ::std::os::raw::c_int,
    pub PixelSnapH: bool,
    pub GlyphExtraSpacing: ImVec2,
    pub GlyphOffset: ImVec2,
    pub GlyphRanges: *const ImWchar,
    pub GlyphMinAdvanceX: f32,
    pub GlyphMaxAdvanceX: f32,
    pub MergeMode: bool,
    pub RasterizerFlags: ::std::os::raw::c_uint,
    pub RasterizerMultiply: f32,
    pub EllipsisChar: ImWchar,
    pub Name: [::std::os::raw::c_char; 40usize],
    pub DstFont: *mut ImFont,
}
#[test]
fn bindgen_test_layout_ImFontConfig() {
    assert_eq!(
        ::std::mem::size_of::<ImFontConfig>(),
        136usize,
        concat!("Size of: ", stringify!(ImFontConfig))
    );
    assert_eq!(
        ::std::mem::align_of::<ImFontConfig>(),
        8usize,
        concat!("Alignment of ", stringify!(ImFontConfig))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontConfig>())).FontData as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontConfig),
            "::",
            stringify!(FontData)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontConfig>())).FontDataSize as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontConfig),
            "::",
            stringify!(FontDataSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImFontConfig>())).FontDataOwnedByAtlas as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontConfig),
            "::",
            stringify!(FontDataOwnedByAtlas)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontConfig>())).FontNo as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontConfig),
            "::",
            stringify!(FontNo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontConfig>())).SizePixels as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontConfig),
            "::",
            stringify!(SizePixels)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontConfig>())).OversampleH as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontConfig),
            "::",
            stringify!(OversampleH)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontConfig>())).OversampleV as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontConfig),
            "::",
            stringify!(OversampleV)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontConfig>())).PixelSnapH as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontConfig),
            "::",
            stringify!(PixelSnapH)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontConfig>())).GlyphExtraSpacing as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontConfig),
            "::",
            stringify!(GlyphExtraSpacing)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontConfig>())).GlyphOffset as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontConfig),
            "::",
            stringify!(GlyphOffset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontConfig>())).GlyphRanges as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontConfig),
            "::",
            stringify!(GlyphRanges)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontConfig>())).GlyphMinAdvanceX as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontConfig),
            "::",
            stringify!(GlyphMinAdvanceX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontConfig>())).GlyphMaxAdvanceX as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontConfig),
            "::",
            stringify!(GlyphMaxAdvanceX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontConfig>())).MergeMode as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontConfig),
            "::",
            stringify!(MergeMode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontConfig>())).RasterizerFlags as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontConfig),
            "::",
            stringify!(RasterizerFlags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontConfig>())).RasterizerMultiply as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontConfig),
            "::",
            stringify!(RasterizerMultiply)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontConfig>())).EllipsisChar as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontConfig),
            "::",
            stringify!(EllipsisChar)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontConfig>())).Name as *const _ as usize },
        86usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontConfig),
            "::",
            stringify!(Name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontConfig>())).DstFont as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontConfig),
            "::",
            stringify!(DstFont)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}??0ImFontConfig@@QEAA@XZ"]
    pub fn ImFontConfig_ImFontConfig(this: *mut ImFontConfig);
}
impl ImFontConfig {
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        ImFontConfig_ImFontConfig(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImFontGlyph {
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize], u32>,
    pub AdvanceX: f32,
    pub X0: f32,
    pub Y0: f32,
    pub X1: f32,
    pub Y1: f32,
    pub U0: f32,
    pub V0: f32,
    pub U1: f32,
    pub V1: f32,
}
#[test]
fn bindgen_test_layout_ImFontGlyph() {
    assert_eq!(
        ::std::mem::size_of::<ImFontGlyph>(),
        40usize,
        concat!("Size of: ", stringify!(ImFontGlyph))
    );
    assert_eq!(
        ::std::mem::align_of::<ImFontGlyph>(),
        4usize,
        concat!("Alignment of ", stringify!(ImFontGlyph))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontGlyph>())).AdvanceX as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontGlyph),
            "::",
            stringify!(AdvanceX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontGlyph>())).X0 as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontGlyph),
            "::",
            stringify!(X0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontGlyph>())).Y0 as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontGlyph),
            "::",
            stringify!(Y0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontGlyph>())).X1 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontGlyph),
            "::",
            stringify!(X1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontGlyph>())).Y1 as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontGlyph),
            "::",
            stringify!(Y1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontGlyph>())).U0 as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontGlyph),
            "::",
            stringify!(U0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontGlyph>())).V0 as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontGlyph),
            "::",
            stringify!(V0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontGlyph>())).U1 as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontGlyph),
            "::",
            stringify!(U1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontGlyph>())).V1 as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontGlyph),
            "::",
            stringify!(V1)
        )
    );
}
impl ImFontGlyph {
    #[inline]
    pub fn Codepoint(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 31u8) as u32) }
    }
    #[inline]
    pub fn set_Codepoint(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 31u8, val as u64)
        }
    }
    #[inline]
    pub fn Visible(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(31usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_Visible(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(31usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        Codepoint: ::std::os::raw::c_uint,
        Visible: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 4usize], u32> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize], u32> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 31u8, {
            let Codepoint: u32 = unsafe { ::std::mem::transmute(Codepoint) };
            Codepoint as u64
        });
        __bindgen_bitfield_unit.set(31usize, 1u8, {
            let Visible: u32 = unsafe { ::std::mem::transmute(Visible) };
            Visible as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug)]
pub struct ImFontGlyphRangesBuilder {
    pub UsedChars: ImVector<ImU32>,
}
#[test]
fn bindgen_test_layout_ImFontGlyphRangesBuilder() {
    assert_eq!(
        ::std::mem::size_of::<ImFontGlyphRangesBuilder>(),
        16usize,
        concat!("Size of: ", stringify!(ImFontGlyphRangesBuilder))
    );
    assert_eq!(
        ::std::mem::align_of::<ImFontGlyphRangesBuilder>(),
        8usize,
        concat!("Alignment of ", stringify!(ImFontGlyphRangesBuilder))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImFontGlyphRangesBuilder>())).UsedChars as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontGlyphRangesBuilder),
            "::",
            stringify!(UsedChars)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}?AddText@ImFontGlyphRangesBuilder@@QEAAXPEBD0@Z"]
    pub fn ImFontGlyphRangesBuilder_AddText(
        this: *mut ImFontGlyphRangesBuilder,
        text: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    #[link_name = "\u{1}?AddRanges@ImFontGlyphRangesBuilder@@QEAAXPEBG@Z"]
    pub fn ImFontGlyphRangesBuilder_AddRanges(
        this: *mut ImFontGlyphRangesBuilder,
        ranges: *const ImWchar,
    );
}
extern "C" {
    #[link_name = "\u{1}?BuildRanges@ImFontGlyphRangesBuilder@@QEAAXPEAU?$ImVector@G@@@Z"]
    pub fn ImFontGlyphRangesBuilder_BuildRanges(
        this: *mut ImFontGlyphRangesBuilder,
        out_ranges: *mut ImVector<ImWchar>,
    );
}
impl ImFontGlyphRangesBuilder {
    #[inline]
    pub unsafe fn AddText(
        &mut self,
        text: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
    ) {
        ImFontGlyphRangesBuilder_AddText(self, text, text_end)
    }
    #[inline]
    pub unsafe fn AddRanges(&mut self, ranges: *const ImWchar) {
        ImFontGlyphRangesBuilder_AddRanges(self, ranges)
    }
    #[inline]
    pub unsafe fn BuildRanges(&mut self, out_ranges: *mut ImVector<ImWchar>) {
        ImFontGlyphRangesBuilder_BuildRanges(self, out_ranges)
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImFontAtlasCustomRect {
    pub Width: ::std::os::raw::c_ushort,
    pub Height: ::std::os::raw::c_ushort,
    pub X: ::std::os::raw::c_ushort,
    pub Y: ::std::os::raw::c_ushort,
    pub GlyphID: ::std::os::raw::c_uint,
    pub GlyphAdvanceX: f32,
    pub GlyphOffset: ImVec2,
    pub Font: *mut ImFont,
}
#[test]
fn bindgen_test_layout_ImFontAtlasCustomRect() {
    assert_eq!(
        ::std::mem::size_of::<ImFontAtlasCustomRect>(),
        32usize,
        concat!("Size of: ", stringify!(ImFontAtlasCustomRect))
    );
    assert_eq!(
        ::std::mem::align_of::<ImFontAtlasCustomRect>(),
        8usize,
        concat!("Alignment of ", stringify!(ImFontAtlasCustomRect))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontAtlasCustomRect>())).Width as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlasCustomRect),
            "::",
            stringify!(Width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontAtlasCustomRect>())).Height as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlasCustomRect),
            "::",
            stringify!(Height)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontAtlasCustomRect>())).X as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlasCustomRect),
            "::",
            stringify!(X)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontAtlasCustomRect>())).Y as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlasCustomRect),
            "::",
            stringify!(Y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontAtlasCustomRect>())).GlyphID as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlasCustomRect),
            "::",
            stringify!(GlyphID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImFontAtlasCustomRect>())).GlyphAdvanceX as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlasCustomRect),
            "::",
            stringify!(GlyphAdvanceX)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImFontAtlasCustomRect>())).GlyphOffset as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlasCustomRect),
            "::",
            stringify!(GlyphOffset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontAtlasCustomRect>())).Font as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlasCustomRect),
            "::",
            stringify!(Font)
        )
    );
}
pub const ImFontAtlasFlags_None: ImFontAtlasFlags_ = 0;
pub const ImFontAtlasFlags_NoPowerOfTwoHeight: ImFontAtlasFlags_ = 1;
pub const ImFontAtlasFlags_NoMouseCursors: ImFontAtlasFlags_ = 2;
pub const ImFontAtlasFlags_NoBakedLines: ImFontAtlasFlags_ = 4;
pub type ImFontAtlasFlags_ = ::std::os::raw::c_int;
#[repr(C)]
pub struct ImFontAtlas {
    pub Locked: bool,
    pub Flags: ImFontAtlasFlags,
    pub TexID: ImTextureID,
    pub TexDesiredWidth: ::std::os::raw::c_int,
    pub TexGlyphPadding: ::std::os::raw::c_int,
    pub TexPixelsAlpha8: *mut ::std::os::raw::c_uchar,
    pub TexPixelsRGBA32: *mut ::std::os::raw::c_uint,
    pub TexWidth: ::std::os::raw::c_int,
    pub TexHeight: ::std::os::raw::c_int,
    pub TexUvScale: ImVec2,
    pub TexUvWhitePixel: ImVec2,
    pub Fonts: ImVector<*mut ImFont>,
    pub CustomRects: ImVector<ImFontAtlasCustomRect>,
    pub ConfigData: ImVector<ImFontConfig>,
    pub TexUvLines: [ImVec4; 64usize],
    pub PackIdMouseCursors: ::std::os::raw::c_int,
    pub PackIdLines: ::std::os::raw::c_int,
}
pub type ImFontAtlas_CustomRect = ImFontAtlasCustomRect;
pub type ImFontAtlas_GlyphRangesBuilder = ImFontGlyphRangesBuilder;
#[test]
fn bindgen_test_layout_ImFontAtlas() {
    assert_eq!(
        ::std::mem::size_of::<ImFontAtlas>(),
        1144usize,
        concat!("Size of: ", stringify!(ImFontAtlas))
    );
    assert_eq!(
        ::std::mem::align_of::<ImFontAtlas>(),
        8usize,
        concat!("Alignment of ", stringify!(ImFontAtlas))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontAtlas>())).Locked as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlas),
            "::",
            stringify!(Locked)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontAtlas>())).Flags as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlas),
            "::",
            stringify!(Flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontAtlas>())).TexID as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlas),
            "::",
            stringify!(TexID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontAtlas>())).TexDesiredWidth as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlas),
            "::",
            stringify!(TexDesiredWidth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontAtlas>())).TexGlyphPadding as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlas),
            "::",
            stringify!(TexGlyphPadding)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontAtlas>())).TexPixelsAlpha8 as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlas),
            "::",
            stringify!(TexPixelsAlpha8)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontAtlas>())).TexPixelsRGBA32 as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlas),
            "::",
            stringify!(TexPixelsRGBA32)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontAtlas>())).TexWidth as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlas),
            "::",
            stringify!(TexWidth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontAtlas>())).TexHeight as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlas),
            "::",
            stringify!(TexHeight)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontAtlas>())).TexUvScale as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlas),
            "::",
            stringify!(TexUvScale)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontAtlas>())).TexUvWhitePixel as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlas),
            "::",
            stringify!(TexUvWhitePixel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontAtlas>())).Fonts as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlas),
            "::",
            stringify!(Fonts)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontAtlas>())).CustomRects as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlas),
            "::",
            stringify!(CustomRects)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontAtlas>())).ConfigData as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlas),
            "::",
            stringify!(ConfigData)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontAtlas>())).TexUvLines as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlas),
            "::",
            stringify!(TexUvLines)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontAtlas>())).PackIdMouseCursors as *const _ as usize },
        1136usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlas),
            "::",
            stringify!(PackIdMouseCursors)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontAtlas>())).PackIdLines as *const _ as usize },
        1140usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlas),
            "::",
            stringify!(PackIdLines)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}?AddFont@ImFontAtlas@@QEAAPEAUImFont@@PEBUImFontConfig@@@Z"]
    pub fn ImFontAtlas_AddFont(
        this: *mut ImFontAtlas,
        font_cfg: *const ImFontConfig,
    ) -> *mut ImFont;
}
extern "C" {
    #[link_name = "\u{1}?AddFontDefault@ImFontAtlas@@QEAAPEAUImFont@@PEBUImFontConfig@@@Z"]
    pub fn ImFontAtlas_AddFontDefault(
        this: *mut ImFontAtlas,
        font_cfg: *const ImFontConfig,
    ) -> *mut ImFont;
}
extern "C" {
    #[link_name = "\u{1}?AddFontFromFileTTF@ImFontAtlas@@QEAAPEAUImFont@@PEBDMPEBUImFontConfig@@PEBG@Z"]
    pub fn ImFontAtlas_AddFontFromFileTTF(
        this: *mut ImFontAtlas,
        filename: *const ::std::os::raw::c_char,
        size_pixels: f32,
        font_cfg: *const ImFontConfig,
        glyph_ranges: *const ImWchar,
    ) -> *mut ImFont;
}
extern "C" {
    #[link_name = "\u{1}?AddFontFromMemoryTTF@ImFontAtlas@@QEAAPEAUImFont@@PEAXHMPEBUImFontConfig@@PEBG@Z"]
    pub fn ImFontAtlas_AddFontFromMemoryTTF(
        this: *mut ImFontAtlas,
        font_data: *mut ::std::os::raw::c_void,
        font_size: ::std::os::raw::c_int,
        size_pixels: f32,
        font_cfg: *const ImFontConfig,
        glyph_ranges: *const ImWchar,
    ) -> *mut ImFont;
}
extern "C" {
    #[link_name = "\u{1}?AddFontFromMemoryCompressedTTF@ImFontAtlas@@QEAAPEAUImFont@@PEBXHMPEBUImFontConfig@@PEBG@Z"]
    pub fn ImFontAtlas_AddFontFromMemoryCompressedTTF(
        this: *mut ImFontAtlas,
        compressed_font_data: *const ::std::os::raw::c_void,
        compressed_font_size: ::std::os::raw::c_int,
        size_pixels: f32,
        font_cfg: *const ImFontConfig,
        glyph_ranges: *const ImWchar,
    ) -> *mut ImFont;
}
extern "C" {
    #[link_name = "\u{1}?AddFontFromMemoryCompressedBase85TTF@ImFontAtlas@@QEAAPEAUImFont@@PEBDMPEBUImFontConfig@@PEBG@Z"]
    pub fn ImFontAtlas_AddFontFromMemoryCompressedBase85TTF(
        this: *mut ImFontAtlas,
        compressed_font_data_base85: *const ::std::os::raw::c_char,
        size_pixels: f32,
        font_cfg: *const ImFontConfig,
        glyph_ranges: *const ImWchar,
    ) -> *mut ImFont;
}
extern "C" {
    #[link_name = "\u{1}?ClearInputData@ImFontAtlas@@QEAAXXZ"]
    pub fn ImFontAtlas_ClearInputData(this: *mut ImFontAtlas);
}
extern "C" {
    #[link_name = "\u{1}?ClearTexData@ImFontAtlas@@QEAAXXZ"]
    pub fn ImFontAtlas_ClearTexData(this: *mut ImFontAtlas);
}
extern "C" {
    #[link_name = "\u{1}?ClearFonts@ImFontAtlas@@QEAAXXZ"]
    pub fn ImFontAtlas_ClearFonts(this: *mut ImFontAtlas);
}
extern "C" {
    #[link_name = "\u{1}?Clear@ImFontAtlas@@QEAAXXZ"]
    pub fn ImFontAtlas_Clear(this: *mut ImFontAtlas);
}
extern "C" {
    #[link_name = "\u{1}?Build@ImFontAtlas@@QEAA_NXZ"]
    pub fn ImFontAtlas_Build(this: *mut ImFontAtlas) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?GetTexDataAsAlpha8@ImFontAtlas@@QEAAXPEAPEAEPEAH11@Z"]
    pub fn ImFontAtlas_GetTexDataAsAlpha8(
        this: *mut ImFontAtlas,
        out_pixels: *mut *mut ::std::os::raw::c_uchar,
        out_width: *mut ::std::os::raw::c_int,
        out_height: *mut ::std::os::raw::c_int,
        out_bytes_per_pixel: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}?GetTexDataAsRGBA32@ImFontAtlas@@QEAAXPEAPEAEPEAH11@Z"]
    pub fn ImFontAtlas_GetTexDataAsRGBA32(
        this: *mut ImFontAtlas,
        out_pixels: *mut *mut ::std::os::raw::c_uchar,
        out_width: *mut ::std::os::raw::c_int,
        out_height: *mut ::std::os::raw::c_int,
        out_bytes_per_pixel: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}?GetGlyphRangesDefault@ImFontAtlas@@QEAAPEBGXZ"]
    pub fn ImFontAtlas_GetGlyphRangesDefault(this: *mut ImFontAtlas) -> *const ImWchar;
}
extern "C" {
    #[link_name = "\u{1}?GetGlyphRangesKorean@ImFontAtlas@@QEAAPEBGXZ"]
    pub fn ImFontAtlas_GetGlyphRangesKorean(this: *mut ImFontAtlas) -> *const ImWchar;
}
extern "C" {
    #[link_name = "\u{1}?GetGlyphRangesJapanese@ImFontAtlas@@QEAAPEBGXZ"]
    pub fn ImFontAtlas_GetGlyphRangesJapanese(this: *mut ImFontAtlas) -> *const ImWchar;
}
extern "C" {
    #[link_name = "\u{1}?GetGlyphRangesChineseFull@ImFontAtlas@@QEAAPEBGXZ"]
    pub fn ImFontAtlas_GetGlyphRangesChineseFull(this: *mut ImFontAtlas) -> *const ImWchar;
}
extern "C" {
    #[link_name = "\u{1}?GetGlyphRangesChineseSimplifiedCommon@ImFontAtlas@@QEAAPEBGXZ"]
    pub fn ImFontAtlas_GetGlyphRangesChineseSimplifiedCommon(
        this: *mut ImFontAtlas,
    ) -> *const ImWchar;
}
extern "C" {
    #[link_name = "\u{1}?GetGlyphRangesCyrillic@ImFontAtlas@@QEAAPEBGXZ"]
    pub fn ImFontAtlas_GetGlyphRangesCyrillic(this: *mut ImFontAtlas) -> *const ImWchar;
}
extern "C" {
    #[link_name = "\u{1}?GetGlyphRangesThai@ImFontAtlas@@QEAAPEBGXZ"]
    pub fn ImFontAtlas_GetGlyphRangesThai(this: *mut ImFontAtlas) -> *const ImWchar;
}
extern "C" {
    #[link_name = "\u{1}?GetGlyphRangesVietnamese@ImFontAtlas@@QEAAPEBGXZ"]
    pub fn ImFontAtlas_GetGlyphRangesVietnamese(this: *mut ImFontAtlas) -> *const ImWchar;
}
extern "C" {
    #[link_name = "\u{1}?AddCustomRectRegular@ImFontAtlas@@QEAAHHH@Z"]
    pub fn ImFontAtlas_AddCustomRectRegular(
        this: *mut ImFontAtlas,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?AddCustomRectFontGlyph@ImFontAtlas@@QEAAHPEAUImFont@@GHHMAEBUImVec2@@@Z"]
    pub fn ImFontAtlas_AddCustomRectFontGlyph(
        this: *mut ImFontAtlas,
        font: *mut ImFont,
        id: ImWchar,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        advance_x: f32,
        offset: *const ImVec2,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?CalcCustomRectUV@ImFontAtlas@@QEBAXPEBUImFontAtlasCustomRect@@PEAUImVec2@@1@Z"]
    pub fn ImFontAtlas_CalcCustomRectUV(
        this: *const ImFontAtlas,
        rect: *const ImFontAtlasCustomRect,
        out_uv_min: *mut ImVec2,
        out_uv_max: *mut ImVec2,
    );
}
extern "C" {
    #[link_name = "\u{1}?GetMouseCursorTexData@ImFontAtlas@@QEAA_NHPEAUImVec2@@0QEAU2@1@Z"]
    pub fn ImFontAtlas_GetMouseCursorTexData(
        this: *mut ImFontAtlas,
        cursor: ImGuiMouseCursor,
        out_offset: *mut ImVec2,
        out_size: *mut ImVec2,
        out_uv_border: *mut ImVec2,
        out_uv_fill: *mut ImVec2,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}??0ImFontAtlas@@QEAA@XZ"]
    pub fn ImFontAtlas_ImFontAtlas(this: *mut ImFontAtlas);
}
extern "C" {
    #[link_name = "\u{1}??_DImFontAtlas@@QEAAXXZ"]
    pub fn ImFontAtlas_ImFontAtlas_destructor(this: *mut ImFontAtlas);
}
impl ImFontAtlas {
    #[inline]
    pub unsafe fn AddFont(&mut self, font_cfg: *const ImFontConfig) -> *mut ImFont {
        ImFontAtlas_AddFont(self, font_cfg)
    }
    #[inline]
    pub unsafe fn AddFontDefault(&mut self, font_cfg: *const ImFontConfig) -> *mut ImFont {
        ImFontAtlas_AddFontDefault(self, font_cfg)
    }
    #[inline]
    pub unsafe fn AddFontFromFileTTF(
        &mut self,
        filename: *const ::std::os::raw::c_char,
        size_pixels: f32,
        font_cfg: *const ImFontConfig,
        glyph_ranges: *const ImWchar,
    ) -> *mut ImFont {
        ImFontAtlas_AddFontFromFileTTF(self, filename, size_pixels, font_cfg, glyph_ranges)
    }
    #[inline]
    pub unsafe fn AddFontFromMemoryTTF(
        &mut self,
        font_data: *mut ::std::os::raw::c_void,
        font_size: ::std::os::raw::c_int,
        size_pixels: f32,
        font_cfg: *const ImFontConfig,
        glyph_ranges: *const ImWchar,
    ) -> *mut ImFont {
        ImFontAtlas_AddFontFromMemoryTTF(
            self,
            font_data,
            font_size,
            size_pixels,
            font_cfg,
            glyph_ranges,
        )
    }
    #[inline]
    pub unsafe fn AddFontFromMemoryCompressedTTF(
        &mut self,
        compressed_font_data: *const ::std::os::raw::c_void,
        compressed_font_size: ::std::os::raw::c_int,
        size_pixels: f32,
        font_cfg: *const ImFontConfig,
        glyph_ranges: *const ImWchar,
    ) -> *mut ImFont {
        ImFontAtlas_AddFontFromMemoryCompressedTTF(
            self,
            compressed_font_data,
            compressed_font_size,
            size_pixels,
            font_cfg,
            glyph_ranges,
        )
    }
    #[inline]
    pub unsafe fn AddFontFromMemoryCompressedBase85TTF(
        &mut self,
        compressed_font_data_base85: *const ::std::os::raw::c_char,
        size_pixels: f32,
        font_cfg: *const ImFontConfig,
        glyph_ranges: *const ImWchar,
    ) -> *mut ImFont {
        ImFontAtlas_AddFontFromMemoryCompressedBase85TTF(
            self,
            compressed_font_data_base85,
            size_pixels,
            font_cfg,
            glyph_ranges,
        )
    }
    #[inline]
    pub unsafe fn ClearInputData(&mut self) {
        ImFontAtlas_ClearInputData(self)
    }
    #[inline]
    pub unsafe fn ClearTexData(&mut self) {
        ImFontAtlas_ClearTexData(self)
    }
    #[inline]
    pub unsafe fn ClearFonts(&mut self) {
        ImFontAtlas_ClearFonts(self)
    }
    #[inline]
    pub unsafe fn Clear(&mut self) {
        ImFontAtlas_Clear(self)
    }
    #[inline]
    pub unsafe fn Build(&mut self) -> bool {
        ImFontAtlas_Build(self)
    }
    #[inline]
    pub unsafe fn GetTexDataAsAlpha8(
        &mut self,
        out_pixels: *mut *mut ::std::os::raw::c_uchar,
        out_width: *mut ::std::os::raw::c_int,
        out_height: *mut ::std::os::raw::c_int,
        out_bytes_per_pixel: *mut ::std::os::raw::c_int,
    ) {
        ImFontAtlas_GetTexDataAsAlpha8(self, out_pixels, out_width, out_height, out_bytes_per_pixel)
    }
    #[inline]
    pub unsafe fn GetTexDataAsRGBA32(
        &mut self,
        out_pixels: *mut *mut ::std::os::raw::c_uchar,
        out_width: *mut ::std::os::raw::c_int,
        out_height: *mut ::std::os::raw::c_int,
        out_bytes_per_pixel: *mut ::std::os::raw::c_int,
    ) {
        ImFontAtlas_GetTexDataAsRGBA32(self, out_pixels, out_width, out_height, out_bytes_per_pixel)
    }
    #[inline]
    pub unsafe fn GetGlyphRangesDefault(&mut self) -> *const ImWchar {
        ImFontAtlas_GetGlyphRangesDefault(self)
    }
    #[inline]
    pub unsafe fn GetGlyphRangesKorean(&mut self) -> *const ImWchar {
        ImFontAtlas_GetGlyphRangesKorean(self)
    }
    #[inline]
    pub unsafe fn GetGlyphRangesJapanese(&mut self) -> *const ImWchar {
        ImFontAtlas_GetGlyphRangesJapanese(self)
    }
    #[inline]
    pub unsafe fn GetGlyphRangesChineseFull(&mut self) -> *const ImWchar {
        ImFontAtlas_GetGlyphRangesChineseFull(self)
    }
    #[inline]
    pub unsafe fn GetGlyphRangesChineseSimplifiedCommon(&mut self) -> *const ImWchar {
        ImFontAtlas_GetGlyphRangesChineseSimplifiedCommon(self)
    }
    #[inline]
    pub unsafe fn GetGlyphRangesCyrillic(&mut self) -> *const ImWchar {
        ImFontAtlas_GetGlyphRangesCyrillic(self)
    }
    #[inline]
    pub unsafe fn GetGlyphRangesThai(&mut self) -> *const ImWchar {
        ImFontAtlas_GetGlyphRangesThai(self)
    }
    #[inline]
    pub unsafe fn GetGlyphRangesVietnamese(&mut self) -> *const ImWchar {
        ImFontAtlas_GetGlyphRangesVietnamese(self)
    }
    #[inline]
    pub unsafe fn AddCustomRectRegular(
        &mut self,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        ImFontAtlas_AddCustomRectRegular(self, width, height)
    }
    #[inline]
    pub unsafe fn AddCustomRectFontGlyph(
        &mut self,
        font: *mut ImFont,
        id: ImWchar,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        advance_x: f32,
        offset: *const ImVec2,
    ) -> ::std::os::raw::c_int {
        ImFontAtlas_AddCustomRectFontGlyph(self, font, id, width, height, advance_x, offset)
    }
    #[inline]
    pub unsafe fn CalcCustomRectUV(
        &self,
        rect: *const ImFontAtlasCustomRect,
        out_uv_min: *mut ImVec2,
        out_uv_max: *mut ImVec2,
    ) {
        ImFontAtlas_CalcCustomRectUV(self, rect, out_uv_min, out_uv_max)
    }
    #[inline]
    pub unsafe fn GetMouseCursorTexData(
        &mut self,
        cursor: ImGuiMouseCursor,
        out_offset: *mut ImVec2,
        out_size: *mut ImVec2,
        out_uv_border: *mut ImVec2,
        out_uv_fill: *mut ImVec2,
    ) -> bool {
        ImFontAtlas_GetMouseCursorTexData(
            self,
            cursor,
            out_offset,
            out_size,
            out_uv_border,
            out_uv_fill,
        )
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        ImFontAtlas_ImFontAtlas(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        ImFontAtlas_ImFontAtlas_destructor(self)
    }
}
#[repr(C)]
#[derive(Debug)]
pub struct ImFont {
    pub IndexAdvanceX: ImVector<f32>,
    pub FallbackAdvanceX: f32,
    pub FontSize: f32,
    pub IndexLookup: ImVector<ImWchar>,
    pub Glyphs: ImVector<ImFontGlyph>,
    pub FallbackGlyph: *const ImFontGlyph,
    pub ContainerAtlas: *mut ImFontAtlas,
    pub ConfigData: *const ImFontConfig,
    pub ConfigDataCount: ::std::os::raw::c_short,
    pub FallbackChar: ImWchar,
    pub EllipsisChar: ImWchar,
    pub DirtyLookupTables: bool,
    pub Scale: f32,
    pub Ascent: f32,
    pub Descent: f32,
    pub MetricsTotalSurface: ::std::os::raw::c_int,
    pub Used4kPagesMap: [ImU8; 2usize],
}
#[test]
fn bindgen_test_layout_ImFont() {
    assert_eq!(
        ::std::mem::size_of::<ImFont>(),
        112usize,
        concat!("Size of: ", stringify!(ImFont))
    );
    assert_eq!(
        ::std::mem::align_of::<ImFont>(),
        8usize,
        concat!("Alignment of ", stringify!(ImFont))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFont>())).IndexAdvanceX as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFont),
            "::",
            stringify!(IndexAdvanceX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFont>())).FallbackAdvanceX as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFont),
            "::",
            stringify!(FallbackAdvanceX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFont>())).FontSize as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFont),
            "::",
            stringify!(FontSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFont>())).IndexLookup as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFont),
            "::",
            stringify!(IndexLookup)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFont>())).Glyphs as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFont),
            "::",
            stringify!(Glyphs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFont>())).FallbackGlyph as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFont),
            "::",
            stringify!(FallbackGlyph)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFont>())).ContainerAtlas as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFont),
            "::",
            stringify!(ContainerAtlas)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFont>())).ConfigData as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFont),
            "::",
            stringify!(ConfigData)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFont>())).ConfigDataCount as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFont),
            "::",
            stringify!(ConfigDataCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFont>())).FallbackChar as *const _ as usize },
        82usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFont),
            "::",
            stringify!(FallbackChar)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFont>())).EllipsisChar as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFont),
            "::",
            stringify!(EllipsisChar)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFont>())).DirtyLookupTables as *const _ as usize },
        86usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFont),
            "::",
            stringify!(DirtyLookupTables)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFont>())).Scale as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFont),
            "::",
            stringify!(Scale)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFont>())).Ascent as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFont),
            "::",
            stringify!(Ascent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFont>())).Descent as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFont),
            "::",
            stringify!(Descent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFont>())).MetricsTotalSurface as *const _ as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFont),
            "::",
            stringify!(MetricsTotalSurface)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFont>())).Used4kPagesMap as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFont),
            "::",
            stringify!(Used4kPagesMap)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}?FindGlyph@ImFont@@QEBAPEBUImFontGlyph@@G@Z"]
    pub fn ImFont_FindGlyph(this: *const ImFont, c: ImWchar) -> *const ImFontGlyph;
}
extern "C" {
    #[link_name = "\u{1}?FindGlyphNoFallback@ImFont@@QEBAPEBUImFontGlyph@@G@Z"]
    pub fn ImFont_FindGlyphNoFallback(this: *const ImFont, c: ImWchar) -> *const ImFontGlyph;
}
extern "C" {
    #[link_name = "\u{1}?CalcTextSizeA@ImFont@@QEBA?AUImVec2@@MMMPEBD0PEAPEBD@Z"]
    pub fn ImFont_CalcTextSizeA(
        this: *const ImFont,
        size: f32,
        max_width: f32,
        wrap_width: f32,
        text_begin: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
        remaining: *mut *const ::std::os::raw::c_char,
    ) -> ImVec2;
}
extern "C" {
    #[link_name = "\u{1}?CalcWordWrapPositionA@ImFont@@QEBAPEBDMPEBD0M@Z"]
    pub fn ImFont_CalcWordWrapPositionA(
        this: *const ImFont,
        scale: f32,
        text: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
        wrap_width: f32,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}?RenderChar@ImFont@@QEBAXPEAUImDrawList@@MUImVec2@@IG@Z"]
    pub fn ImFont_RenderChar(
        this: *const ImFont,
        draw_list: *mut ImDrawList,
        size: f32,
        pos: ImVec2,
        col: ImU32,
        c: ImWchar,
    );
}
extern "C" {
    #[link_name = "\u{1}?RenderText@ImFont@@QEBAXPEAUImDrawList@@MUImVec2@@IAEBUImVec4@@PEBD3M_N@Z"]
    pub fn ImFont_RenderText(
        this: *const ImFont,
        draw_list: *mut ImDrawList,
        size: f32,
        pos: ImVec2,
        col: ImU32,
        clip_rect: *const ImVec4,
        text_begin: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
        wrap_width: f32,
        cpu_fine_clip: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?BuildLookupTable@ImFont@@QEAAXXZ"]
    pub fn ImFont_BuildLookupTable(this: *mut ImFont);
}
extern "C" {
    #[link_name = "\u{1}?ClearOutputData@ImFont@@QEAAXXZ"]
    pub fn ImFont_ClearOutputData(this: *mut ImFont);
}
extern "C" {
    #[link_name = "\u{1}?GrowIndex@ImFont@@QEAAXH@Z"]
    pub fn ImFont_GrowIndex(this: *mut ImFont, new_size: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}?AddGlyph@ImFont@@QEAAXPEBUImFontConfig@@GMMMMMMMMM@Z"]
    pub fn ImFont_AddGlyph(
        this: *mut ImFont,
        src_cfg: *const ImFontConfig,
        c: ImWchar,
        x0: f32,
        y0: f32,
        x1: f32,
        y1: f32,
        u0: f32,
        v0: f32,
        u1: f32,
        v1: f32,
        advance_x: f32,
    );
}
extern "C" {
    #[link_name = "\u{1}?AddRemapChar@ImFont@@QEAAXGG_N@Z"]
    pub fn ImFont_AddRemapChar(this: *mut ImFont, dst: ImWchar, src: ImWchar, overwrite_dst: bool);
}
extern "C" {
    #[link_name = "\u{1}?SetGlyphVisible@ImFont@@QEAAXG_N@Z"]
    pub fn ImFont_SetGlyphVisible(this: *mut ImFont, c: ImWchar, visible: bool);
}
extern "C" {
    #[link_name = "\u{1}?SetFallbackChar@ImFont@@QEAAXG@Z"]
    pub fn ImFont_SetFallbackChar(this: *mut ImFont, c: ImWchar);
}
extern "C" {
    #[link_name = "\u{1}?IsGlyphRangeUnused@ImFont@@QEAA_NII@Z"]
    pub fn ImFont_IsGlyphRangeUnused(
        this: *mut ImFont,
        c_begin: ::std::os::raw::c_uint,
        c_last: ::std::os::raw::c_uint,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}??0ImFont@@QEAA@XZ"]
    pub fn ImFont_ImFont(this: *mut ImFont);
}
extern "C" {
    #[link_name = "\u{1}??_DImFont@@QEAAXXZ"]
    pub fn ImFont_ImFont_destructor(this: *mut ImFont);
}
impl ImFont {
    #[inline]
    pub unsafe fn FindGlyph(&self, c: ImWchar) -> *const ImFontGlyph {
        ImFont_FindGlyph(self, c)
    }
    #[inline]
    pub unsafe fn FindGlyphNoFallback(&self, c: ImWchar) -> *const ImFontGlyph {
        ImFont_FindGlyphNoFallback(self, c)
    }
    #[inline]
    pub unsafe fn CalcTextSizeA(
        &self,
        size: f32,
        max_width: f32,
        wrap_width: f32,
        text_begin: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
        remaining: *mut *const ::std::os::raw::c_char,
    ) -> ImVec2 {
        ImFont_CalcTextSizeA(
            self, size, max_width, wrap_width, text_begin, text_end, remaining,
        )
    }
    #[inline]
    pub unsafe fn CalcWordWrapPositionA(
        &self,
        scale: f32,
        text: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
        wrap_width: f32,
    ) -> *const ::std::os::raw::c_char {
        ImFont_CalcWordWrapPositionA(self, scale, text, text_end, wrap_width)
    }
    #[inline]
    pub unsafe fn RenderChar(
        &self,
        draw_list: *mut ImDrawList,
        size: f32,
        pos: ImVec2,
        col: ImU32,
        c: ImWchar,
    ) {
        ImFont_RenderChar(self, draw_list, size, pos, col, c)
    }
    #[inline]
    pub unsafe fn RenderText(
        &self,
        draw_list: *mut ImDrawList,
        size: f32,
        pos: ImVec2,
        col: ImU32,
        clip_rect: *const ImVec4,
        text_begin: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
        wrap_width: f32,
        cpu_fine_clip: bool,
    ) {
        ImFont_RenderText(
            self,
            draw_list,
            size,
            pos,
            col,
            clip_rect,
            text_begin,
            text_end,
            wrap_width,
            cpu_fine_clip,
        )
    }
    #[inline]
    pub unsafe fn BuildLookupTable(&mut self) {
        ImFont_BuildLookupTable(self)
    }
    #[inline]
    pub unsafe fn ClearOutputData(&mut self) {
        ImFont_ClearOutputData(self)
    }
    #[inline]
    pub unsafe fn GrowIndex(&mut self, new_size: ::std::os::raw::c_int) {
        ImFont_GrowIndex(self, new_size)
    }
    #[inline]
    pub unsafe fn AddGlyph(
        &mut self,
        src_cfg: *const ImFontConfig,
        c: ImWchar,
        x0: f32,
        y0: f32,
        x1: f32,
        y1: f32,
        u0: f32,
        v0: f32,
        u1: f32,
        v1: f32,
        advance_x: f32,
    ) {
        ImFont_AddGlyph(self, src_cfg, c, x0, y0, x1, y1, u0, v0, u1, v1, advance_x)
    }
    #[inline]
    pub unsafe fn AddRemapChar(&mut self, dst: ImWchar, src: ImWchar, overwrite_dst: bool) {
        ImFont_AddRemapChar(self, dst, src, overwrite_dst)
    }
    #[inline]
    pub unsafe fn SetGlyphVisible(&mut self, c: ImWchar, visible: bool) {
        ImFont_SetGlyphVisible(self, c, visible)
    }
    #[inline]
    pub unsafe fn SetFallbackChar(&mut self, c: ImWchar) {
        ImFont_SetFallbackChar(self, c)
    }
    #[inline]
    pub unsafe fn IsGlyphRangeUnused(
        &mut self,
        c_begin: ::std::os::raw::c_uint,
        c_last: ::std::os::raw::c_uint,
    ) -> bool {
        ImFont_IsGlyphRangeUnused(self, c_begin, c_last)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        ImFont_ImFont(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        ImFont_ImFont_destructor(self)
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _iobuf {
    pub _Placeholder: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout__iobuf() {
    assert_eq!(
        ::std::mem::size_of::<_iobuf>(),
        8usize,
        concat!("Size of: ", stringify!(_iobuf))
    );
    assert_eq!(
        ::std::mem::align_of::<_iobuf>(),
        8usize,
        concat!("Alignment of ", stringify!(_iobuf))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_iobuf>()))._Placeholder as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_iobuf),
            "::",
            stringify!(_Placeholder)
        )
    );
}
pub type FILE = _iobuf;
extern "C" {
    pub fn __acrt_iob_func(_Ix: ::std::os::raw::c_uint) -> *mut FILE;
}
extern "C" {
    pub fn fgetwc(_Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _fgetwchar() -> wint_t;
}
extern "C" {
    pub fn fputwc(_Character: u16, _Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _fputwchar(_Character: u16) -> wint_t;
}
extern "C" {
    pub fn getwc(_Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn getwchar() -> wint_t;
}
extern "C" {
    pub fn fgetws(
        _Buffer: *mut u16,
        _BufferCount: ::std::os::raw::c_int,
        _Stream: *mut FILE,
    ) -> *mut u16;
}
extern "C" {
    pub fn fputws(_Buffer: *const u16, _Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _getws_s(_Buffer: *mut u16, _BufferCount: size_t) -> *mut u16;
}
extern "C" {
    pub fn putwc(_Character: u16, _Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn putwchar(_Character: u16) -> wint_t;
}
extern "C" {
    pub fn _putws(_Buffer: *const u16) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ungetwc(_Character: wint_t, _Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _wfdopen(_FileHandle: ::std::os::raw::c_int, _Mode: *const u16) -> *mut FILE;
}
extern "C" {
    pub fn _wfopen(_FileName: *const u16, _Mode: *const u16) -> *mut FILE;
}
extern "C" {
    pub fn _wfopen_s(_Stream: *mut *mut FILE, _FileName: *const u16, _Mode: *const u16) -> errno_t;
}
extern "C" {
    pub fn _wfreopen(_FileName: *const u16, _Mode: *const u16, _OldStream: *mut FILE) -> *mut FILE;
}
extern "C" {
    pub fn _wfreopen_s(
        _Stream: *mut *mut FILE,
        _FileName: *const u16,
        _Mode: *const u16,
        _OldStream: *mut FILE,
    ) -> errno_t;
}
extern "C" {
    pub fn _wfsopen(
        _FileName: *const u16,
        _Mode: *const u16,
        _ShFlag: ::std::os::raw::c_int,
    ) -> *mut FILE;
}
extern "C" {
    pub fn _wperror(_ErrorMessage: *const u16);
}
extern "C" {
    pub fn _wpopen(_Command: *const u16, _Mode: *const u16) -> *mut FILE;
}
extern "C" {
    pub fn _wremove(_FileName: *const u16) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wtempnam(_Directory: *const u16, _FilePrefix: *const u16) -> *mut u16;
}
extern "C" {
    pub fn _wtmpnam_s(_Buffer: *mut u16, _BufferCount: size_t) -> errno_t;
}
extern "C" {
    pub fn _wtmpnam(_Buffer: *mut u16) -> *mut u16;
}
extern "C" {
    pub fn _fgetwc_nolock(_Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _fputwc_nolock(_Character: u16, _Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _getwc_nolock(_Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _putwc_nolock(_Character: u16, _Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _ungetwc_nolock(_Character: wint_t, _Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn __stdio_common_vfwprintf(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const u16,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vfwprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const u16,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vfwprintf_p(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const u16,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vfwscanf(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const u16,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vswprintf(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut u16,
        _BufferCount: size_t,
        _Format: *const u16,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vswprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut u16,
        _BufferCount: size_t,
        _Format: *const u16,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vsnwprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut u16,
        _BufferCount: size_t,
        _MaxCount: size_t,
        _Format: *const u16,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vswprintf_p(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut u16,
        _BufferCount: size_t,
        _Format: *const u16,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vswscanf(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *const u16,
        _BufferCount: size_t,
        _Format: *const u16,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
pub type fpos_t = ::std::os::raw::c_longlong;
extern "C" {
    pub fn _get_stream_buffer_pointers(
        _Stream: *mut FILE,
        _Base: *mut *mut *mut ::std::os::raw::c_char,
        _Pointer: *mut *mut *mut ::std::os::raw::c_char,
        _Count: *mut *mut ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn clearerr_s(_Stream: *mut FILE) -> errno_t;
}
extern "C" {
    pub fn fopen_s(
        _Stream: *mut *mut FILE,
        _FileName: *const ::std::os::raw::c_char,
        _Mode: *const ::std::os::raw::c_char,
    ) -> errno_t;
}
extern "C" {
    pub fn fread_s(
        _Buffer: *mut ::std::os::raw::c_void,
        _BufferSize: size_t,
        _ElementSize: size_t,
        _ElementCount: size_t,
        _Stream: *mut FILE,
    ) -> size_t;
}
extern "C" {
    pub fn freopen_s(
        _Stream: *mut *mut FILE,
        _FileName: *const ::std::os::raw::c_char,
        _Mode: *const ::std::os::raw::c_char,
        _OldStream: *mut FILE,
    ) -> errno_t;
}
extern "C" {
    pub fn gets_s(
        _Buffer: *mut ::std::os::raw::c_char,
        _Size: rsize_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tmpfile_s(_Stream: *mut *mut FILE) -> errno_t;
}
extern "C" {
    pub fn tmpnam_s(_Buffer: *mut ::std::os::raw::c_char, _Size: rsize_t) -> errno_t;
}
extern "C" {
    pub fn clearerr(_Stream: *mut FILE);
}
extern "C" {
    pub fn fclose(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fcloseall() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fdopen(
        _FileHandle: ::std::os::raw::c_int,
        _Mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn feof(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fgetchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetpos(_Stream: *mut FILE, _Position: *mut fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgets(
        _Buffer: *mut ::std::os::raw::c_char,
        _MaxCount: ::std::os::raw::c_int,
        _Stream: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _fileno(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _flushall() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fopen(
        _FileName: *const ::std::os::raw::c_char,
        _Mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fputc(_Character: ::std::os::raw::c_int, _Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fputchar(_Character: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputs(
        _Buffer: *const ::std::os::raw::c_char,
        _Stream: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fread(
        _Buffer: *mut ::std::os::raw::c_void,
        _ElementSize: size_t,
        _ElementCount: size_t,
        _Stream: *mut FILE,
    ) -> size_t;
}
extern "C" {
    pub fn freopen(
        _FileName: *const ::std::os::raw::c_char,
        _Mode: *const ::std::os::raw::c_char,
        _Stream: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn _fsopen(
        _FileName: *const ::std::os::raw::c_char,
        _Mode: *const ::std::os::raw::c_char,
        _ShFlag: ::std::os::raw::c_int,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fsetpos(_Stream: *mut FILE, _Position: *const fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fseek(
        _Stream: *mut FILE,
        _Offset: ::std::os::raw::c_long,
        _Origin: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fseeki64(
        _Stream: *mut FILE,
        _Offset: ::std::os::raw::c_longlong,
        _Origin: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftell(_Stream: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _ftelli64(_Stream: *mut FILE) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn fwrite(
        _Buffer: *const ::std::os::raw::c_void,
        _ElementSize: size_t,
        _ElementCount: size_t,
        _Stream: *mut FILE,
    ) -> size_t;
}
extern "C" {
    pub fn getc(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _getmaxstdio() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _getw(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn perror(_ErrorMessage: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn _pclose(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _popen(
        _Command: *const ::std::os::raw::c_char,
        _Mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn putc(_Character: ::std::os::raw::c_int, _Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar(_Character: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn puts(_Buffer: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _putw(_Word: ::std::os::raw::c_int, _Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn remove(_FileName: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rename(
        _OldFileName: *const ::std::os::raw::c_char,
        _NewFileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _unlink(_FileName: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unlink(_FileName: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rewind(_Stream: *mut FILE);
}
extern "C" {
    pub fn _rmtmp() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuf(_Stream: *mut FILE, _Buffer: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn _setmaxstdio(_Maximum: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setvbuf(
        _Stream: *mut FILE,
        _Buffer: *mut ::std::os::raw::c_char,
        _Mode: ::std::os::raw::c_int,
        _Size: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _tempnam(
        _DirectoryName: *const ::std::os::raw::c_char,
        _FilePrefix: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    pub fn tmpnam(_Buffer: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ungetc(_Character: ::std::os::raw::c_int, _Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _lock_file(_Stream: *mut FILE);
}
extern "C" {
    pub fn _unlock_file(_Stream: *mut FILE);
}
extern "C" {
    pub fn _fclose_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fflush_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fgetc_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fputc_nolock(
        _Character: ::std::os::raw::c_int,
        _Stream: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fread_nolock(
        _Buffer: *mut ::std::os::raw::c_void,
        _ElementSize: size_t,
        _ElementCount: size_t,
        _Stream: *mut FILE,
    ) -> size_t;
}
extern "C" {
    pub fn _fread_nolock_s(
        _Buffer: *mut ::std::os::raw::c_void,
        _BufferSize: size_t,
        _ElementSize: size_t,
        _ElementCount: size_t,
        _Stream: *mut FILE,
    ) -> size_t;
}
extern "C" {
    pub fn _fseek_nolock(
        _Stream: *mut FILE,
        _Offset: ::std::os::raw::c_long,
        _Origin: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fseeki64_nolock(
        _Stream: *mut FILE,
        _Offset: ::std::os::raw::c_longlong,
        _Origin: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _ftell_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _ftelli64_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _fwrite_nolock(
        _Buffer: *const ::std::os::raw::c_void,
        _ElementSize: size_t,
        _ElementCount: size_t,
        _Stream: *mut FILE,
    ) -> size_t;
}
extern "C" {
    pub fn _getc_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _putc_nolock(
        _Character: ::std::os::raw::c_int,
        _Stream: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _ungetc_nolock(
        _Character: ::std::os::raw::c_int,
        _Stream: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __p__commode() -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vfprintf(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vfprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vfprintf_p(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _set_printf_count_output(_Value: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _get_printf_count_output() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vfscanf(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _Arglist: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vsprintf(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vsprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vsnprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
        _MaxCount: size_t,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vsprintf_p(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vsscanf(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *const ::std::os::raw::c_char,
        _BufferCount: size_t,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tempnam(
        _Directory: *const ::std::os::raw::c_char,
        _FilePrefix: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fcloseall() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fdopen(
        _FileHandle: ::std::os::raw::c_int,
        _Format: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fgetchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fileno(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flushall() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputchar(_Ch: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getw(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putw(_Ch: ::std::os::raw::c_int, _Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rmtmp() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _calloc_base(_Count: size_t, _Size: size_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn calloc(_Count: size_t, _Size: size_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _callnewh(_Size: size_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _expand(
        _Block: *mut ::std::os::raw::c_void,
        _Size: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _free_base(_Block: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn free(_Block: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn _malloc_base(_Size: size_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn malloc(_Size: size_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _msize_base(_Block: *mut ::std::os::raw::c_void) -> size_t;
}
extern "C" {
    pub fn _msize(_Block: *mut ::std::os::raw::c_void) -> size_t;
}
extern "C" {
    pub fn _realloc_base(
        _Block: *mut ::std::os::raw::c_void,
        _Size: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn realloc(
        _Block: *mut ::std::os::raw::c_void,
        _Size: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _recalloc_base(
        _Block: *mut ::std::os::raw::c_void,
        _Count: size_t,
        _Size: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _recalloc(
        _Block: *mut ::std::os::raw::c_void,
        _Count: size_t,
        _Size: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _aligned_free(_Block: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn _aligned_malloc(_Size: size_t, _Alignment: size_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _aligned_offset_malloc(
        _Size: size_t,
        _Alignment: size_t,
        _Offset: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _aligned_msize(
        _Block: *mut ::std::os::raw::c_void,
        _Alignment: size_t,
        _Offset: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn _aligned_offset_realloc(
        _Block: *mut ::std::os::raw::c_void,
        _Size: size_t,
        _Alignment: size_t,
        _Offset: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _aligned_offset_recalloc(
        _Block: *mut ::std::os::raw::c_void,
        _Count: size_t,
        _Size: size_t,
        _Alignment: size_t,
        _Offset: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _aligned_realloc(
        _Block: *mut ::std::os::raw::c_void,
        _Size: size_t,
        _Alignment: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _aligned_recalloc(
        _Block: *mut ::std::os::raw::c_void,
        _Count: size_t,
        _Size: size_t,
        _Alignment: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
pub type _CoreCrtSecureSearchSortCompareFunction = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
        arg3: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type _CoreCrtNonSecureSearchSortCompareFunction = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn bsearch_s(
        _Key: *const ::std::os::raw::c_void,
        _Base: *const ::std::os::raw::c_void,
        _NumOfElements: rsize_t,
        _SizeOfElements: rsize_t,
        _CompareFunction: _CoreCrtSecureSearchSortCompareFunction,
        _Context: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn qsort_s(
        _Base: *mut ::std::os::raw::c_void,
        _NumOfElements: rsize_t,
        _SizeOfElements: rsize_t,
        _CompareFunction: _CoreCrtSecureSearchSortCompareFunction,
        _Context: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn bsearch(
        _Key: *const ::std::os::raw::c_void,
        _Base: *const ::std::os::raw::c_void,
        _NumOfElements: size_t,
        _SizeOfElements: size_t,
        _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn qsort(
        _Base: *mut ::std::os::raw::c_void,
        _NumOfElements: size_t,
        _SizeOfElements: size_t,
        _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction,
    );
}
extern "C" {
    pub fn _lfind_s(
        _Key: *const ::std::os::raw::c_void,
        _Base: *const ::std::os::raw::c_void,
        _NumOfElements: *mut ::std::os::raw::c_uint,
        _SizeOfElements: size_t,
        _CompareFunction: _CoreCrtSecureSearchSortCompareFunction,
        _Context: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _lfind(
        _Key: *const ::std::os::raw::c_void,
        _Base: *const ::std::os::raw::c_void,
        _NumOfElements: *mut ::std::os::raw::c_uint,
        _SizeOfElements: ::std::os::raw::c_uint,
        _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _lsearch_s(
        _Key: *const ::std::os::raw::c_void,
        _Base: *mut ::std::os::raw::c_void,
        _NumOfElements: *mut ::std::os::raw::c_uint,
        _SizeOfElements: size_t,
        _CompareFunction: _CoreCrtSecureSearchSortCompareFunction,
        _Context: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _lsearch(
        _Key: *const ::std::os::raw::c_void,
        _Base: *mut ::std::os::raw::c_void,
        _NumOfElements: *mut ::std::os::raw::c_uint,
        _SizeOfElements: ::std::os::raw::c_uint,
        _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn lfind(
        _Key: *const ::std::os::raw::c_void,
        _Base: *const ::std::os::raw::c_void,
        _NumOfElements: *mut ::std::os::raw::c_uint,
        _SizeOfElements: ::std::os::raw::c_uint,
        _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn lsearch(
        _Key: *const ::std::os::raw::c_void,
        _Base: *mut ::std::os::raw::c_void,
        _NumOfElements: *mut ::std::os::raw::c_uint,
        _SizeOfElements: ::std::os::raw::c_uint,
        _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _itow_s(
        _Value: ::std::os::raw::c_int,
        _Buffer: *mut u16,
        _BufferCount: size_t,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _itow(
        _Value: ::std::os::raw::c_int,
        _Buffer: *mut u16,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut u16;
}
extern "C" {
    pub fn _ltow_s(
        _Value: ::std::os::raw::c_long,
        _Buffer: *mut u16,
        _BufferCount: size_t,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _ltow(
        _Value: ::std::os::raw::c_long,
        _Buffer: *mut u16,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut u16;
}
extern "C" {
    pub fn _ultow_s(
        _Value: ::std::os::raw::c_ulong,
        _Buffer: *mut u16,
        _BufferCount: size_t,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _ultow(
        _Value: ::std::os::raw::c_ulong,
        _Buffer: *mut u16,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut u16;
}
extern "C" {
    pub fn wcstod(_String: *const u16, _EndPtr: *mut *mut u16) -> f64;
}
extern "C" {
    pub fn _wcstod_l(_String: *const u16, _EndPtr: *mut *mut u16, _Locale: _locale_t) -> f64;
}
extern "C" {
    pub fn wcstol(
        _String: *const u16,
        _EndPtr: *mut *mut u16,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _wcstol_l(
        _String: *const u16,
        _EndPtr: *mut *mut u16,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn wcstoll(
        _String: *const u16,
        _EndPtr: *mut *mut u16,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _wcstoll_l(
        _String: *const u16,
        _EndPtr: *mut *mut u16,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn wcstoul(
        _String: *const u16,
        _EndPtr: *mut *mut u16,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn _wcstoul_l(
        _String: *const u16,
        _EndPtr: *mut *mut u16,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn wcstoull(
        _String: *const u16,
        _EndPtr: *mut *mut u16,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _wcstoull_l(
        _String: *const u16,
        _EndPtr: *mut *mut u16,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn wcstold(_String: *const u16, _EndPtr: *mut *mut u16) -> f64;
}
extern "C" {
    pub fn _wcstold_l(_String: *const u16, _EndPtr: *mut *mut u16, _Locale: _locale_t) -> f64;
}
extern "C" {
    pub fn wcstof(_String: *const u16, _EndPtr: *mut *mut u16) -> f32;
}
extern "C" {
    pub fn _wcstof_l(_String: *const u16, _EndPtr: *mut *mut u16, _Locale: _locale_t) -> f32;
}
extern "C" {
    pub fn _wtof(_String: *const u16) -> f64;
}
extern "C" {
    pub fn _wtof_l(_String: *const u16, _Locale: _locale_t) -> f64;
}
extern "C" {
    pub fn _wtoi(_String: *const u16) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wtoi_l(_String: *const u16, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wtol(_String: *const u16) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _wtol_l(_String: *const u16, _Locale: _locale_t) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _wtoll(_String: *const u16) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _wtoll_l(_String: *const u16, _Locale: _locale_t) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _i64tow_s(
        _Value: ::std::os::raw::c_longlong,
        _Buffer: *mut u16,
        _BufferCount: size_t,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _i64tow(
        _Value: ::std::os::raw::c_longlong,
        _Buffer: *mut u16,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut u16;
}
extern "C" {
    pub fn _ui64tow_s(
        _Value: ::std::os::raw::c_ulonglong,
        _Buffer: *mut u16,
        _BufferCount: size_t,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _ui64tow(
        _Value: ::std::os::raw::c_ulonglong,
        _Buffer: *mut u16,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut u16;
}
extern "C" {
    pub fn _wtoi64(_String: *const u16) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _wtoi64_l(_String: *const u16, _Locale: _locale_t) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _wcstoi64(
        _String: *const u16,
        _EndPtr: *mut *mut u16,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _wcstoi64_l(
        _String: *const u16,
        _EndPtr: *mut *mut u16,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _wcstoui64(
        _String: *const u16,
        _EndPtr: *mut *mut u16,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _wcstoui64_l(
        _String: *const u16,
        _EndPtr: *mut *mut u16,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _wfullpath(_Buffer: *mut u16, _Path: *const u16, _BufferCount: size_t) -> *mut u16;
}
extern "C" {
    pub fn _wmakepath_s(
        _Buffer: *mut u16,
        _BufferCount: size_t,
        _Drive: *const u16,
        _Dir: *const u16,
        _Filename: *const u16,
        _Ext: *const u16,
    ) -> errno_t;
}
extern "C" {
    pub fn _wmakepath(
        _Buffer: *mut u16,
        _Drive: *const u16,
        _Dir: *const u16,
        _Filename: *const u16,
        _Ext: *const u16,
    );
}
extern "C" {
    pub fn _wsplitpath(
        _FullPath: *const u16,
        _Drive: *mut u16,
        _Dir: *mut u16,
        _Filename: *mut u16,
        _Ext: *mut u16,
    );
}
extern "C" {
    pub fn _wsplitpath_s(
        _FullPath: *const u16,
        _Drive: *mut u16,
        _DriveCount: size_t,
        _Dir: *mut u16,
        _DirCount: size_t,
        _Filename: *mut u16,
        _FilenameCount: size_t,
        _Ext: *mut u16,
        _ExtCount: size_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wdupenv_s(
        _Buffer: *mut *mut u16,
        _BufferCount: *mut size_t,
        _VarName: *const u16,
    ) -> errno_t;
}
extern "C" {
    pub fn _wgetenv(_VarName: *const u16) -> *mut u16;
}
extern "C" {
    pub fn _wgetenv_s(
        _RequiredCount: *mut size_t,
        _Buffer: *mut u16,
        _BufferCount: size_t,
        _VarName: *const u16,
    ) -> errno_t;
}
extern "C" {
    pub fn _wputenv(_EnvString: *const u16) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wputenv_s(_Name: *const u16, _Value: *const u16) -> errno_t;
}
extern "C" {
    pub fn _wsearchenv_s(
        _Filename: *const u16,
        _VarName: *const u16,
        _Buffer: *mut u16,
        _BufferCount: size_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wsearchenv(_Filename: *const u16, _VarName: *const u16, _ResultPath: *mut u16);
}
extern "C" {
    pub fn _wsystem(_Command: *const u16) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _swab(
        _Buf1: *mut ::std::os::raw::c_char,
        _Buf2: *mut ::std::os::raw::c_char,
        _SizeInBytes: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn exit(_Code: ::std::os::raw::c_int);
}
extern "C" {
    pub fn _exit(_Code: ::std::os::raw::c_int);
}
extern "C" {
    pub fn _Exit(_Code: ::std::os::raw::c_int);
}
extern "C" {
    pub fn quick_exit(_Code: ::std::os::raw::c_int);
}
extern "C" {
    pub fn abort();
}
extern "C" {
    pub fn _set_abort_behavior(
        _Flags: ::std::os::raw::c_uint,
        _Mask: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
pub type _onexit_t = ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>;
extern "C" {
    pub fn atexit(arg1: ::std::option::Option<unsafe extern "C" fn()>) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _onexit(_Func: _onexit_t) -> _onexit_t;
}
extern "C" {
    pub fn at_quick_exit(
        arg1: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
pub type _purecall_handler = ::std::option::Option<unsafe extern "C" fn()>;
pub type _invalid_parameter_handler = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const u16,
        arg2: *const u16,
        arg3: *const u16,
        arg4: ::std::os::raw::c_uint,
        arg5: usize,
    ),
>;
extern "C" {
    pub fn _set_purecall_handler(_Handler: _purecall_handler) -> _purecall_handler;
}
extern "C" {
    pub fn _get_purecall_handler() -> _purecall_handler;
}
extern "C" {
    pub fn _set_invalid_parameter_handler(
        _Handler: _invalid_parameter_handler,
    ) -> _invalid_parameter_handler;
}
extern "C" {
    pub fn _get_invalid_parameter_handler() -> _invalid_parameter_handler;
}
extern "C" {
    pub fn _set_thread_local_invalid_parameter_handler(
        _Handler: _invalid_parameter_handler,
    ) -> _invalid_parameter_handler;
}
extern "C" {
    pub fn _get_thread_local_invalid_parameter_handler() -> _invalid_parameter_handler;
}
extern "C" {
    pub fn _set_error_mode(_Mode: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __sys_errlist() -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __sys_nerr() -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn __p__pgmptr() -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __p__wpgmptr() -> *mut *mut u16;
}
extern "C" {
    pub fn __p__fmode() -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn _get_pgmptr(_Value: *mut *mut ::std::os::raw::c_char) -> errno_t;
}
extern "C" {
    pub fn _get_wpgmptr(_Value: *mut *mut u16) -> errno_t;
}
extern "C" {
    pub fn _set_fmode(_Mode: ::std::os::raw::c_int) -> errno_t;
}
extern "C" {
    pub fn _get_fmode(_PMode: *mut ::std::os::raw::c_int) -> errno_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _div_t {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__div_t() {
    assert_eq!(
        ::std::mem::size_of::<_div_t>(),
        8usize,
        concat!("Size of: ", stringify!(_div_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_div_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_div_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_div_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_div_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_div_t>())).rem as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_div_t),
            "::",
            stringify!(rem)
        )
    );
}
pub type div_t = _div_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ldiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout__ldiv_t() {
    assert_eq!(
        ::std::mem::size_of::<_ldiv_t>(),
        8usize,
        concat!("Size of: ", stringify!(_ldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ldiv_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_ldiv_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ldiv_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ldiv_t>())).rem as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_ldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
pub type ldiv_t = _ldiv_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _lldiv_t {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout__lldiv_t() {
    assert_eq!(
        ::std::mem::size_of::<_lldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(_lldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_lldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_lldiv_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_lldiv_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_lldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_lldiv_t>())).rem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_lldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
pub type lldiv_t = _lldiv_t;
extern "C" {
    pub fn abs(_Number: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn labs(_Number: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llabs(_Number: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _abs64(_Number: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _byteswap_ushort(_Number: ::std::os::raw::c_ushort) -> ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn _byteswap_ulong(_Number: ::std::os::raw::c_ulong) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn _byteswap_uint64(_Number: ::std::os::raw::c_ulonglong) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn div(_Numerator: ::std::os::raw::c_int, _Denominator: ::std::os::raw::c_int) -> div_t;
}
extern "C" {
    pub fn ldiv(_Numerator: ::std::os::raw::c_long, _Denominator: ::std::os::raw::c_long)
        -> ldiv_t;
}
extern "C" {
    pub fn lldiv(
        _Numerator: ::std::os::raw::c_longlong,
        _Denominator: ::std::os::raw::c_longlong,
    ) -> lldiv_t;
}
extern "C" {
    pub fn _rotl(
        _Value: ::std::os::raw::c_uint,
        _Shift: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _lrotl(
        _Value: ::std::os::raw::c_ulong,
        _Shift: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn _rotl64(
        _Value: ::std::os::raw::c_ulonglong,
        _Shift: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _rotr(
        _Value: ::std::os::raw::c_uint,
        _Shift: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _lrotr(
        _Value: ::std::os::raw::c_ulong,
        _Shift: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn _rotr64(
        _Value: ::std::os::raw::c_ulonglong,
        _Shift: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn srand(_Seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn rand() -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _LDOUBLE {
    pub ld: [::std::os::raw::c_uchar; 10usize],
}
#[test]
fn bindgen_test_layout__LDOUBLE() {
    assert_eq!(
        ::std::mem::size_of::<_LDOUBLE>(),
        10usize,
        concat!("Size of: ", stringify!(_LDOUBLE))
    );
    assert_eq!(
        ::std::mem::align_of::<_LDOUBLE>(),
        1usize,
        concat!("Alignment of ", stringify!(_LDOUBLE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_LDOUBLE>())).ld as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_LDOUBLE),
            "::",
            stringify!(ld)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CRT_DOUBLE {
    pub x: f64,
}
#[test]
fn bindgen_test_layout__CRT_DOUBLE() {
    assert_eq!(
        ::std::mem::size_of::<_CRT_DOUBLE>(),
        8usize,
        concat!("Size of: ", stringify!(_CRT_DOUBLE))
    );
    assert_eq!(
        ::std::mem::align_of::<_CRT_DOUBLE>(),
        8usize,
        concat!("Alignment of ", stringify!(_CRT_DOUBLE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_CRT_DOUBLE>())).x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_CRT_DOUBLE),
            "::",
            stringify!(x)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CRT_FLOAT {
    pub f: f32,
}
#[test]
fn bindgen_test_layout__CRT_FLOAT() {
    assert_eq!(
        ::std::mem::size_of::<_CRT_FLOAT>(),
        4usize,
        concat!("Size of: ", stringify!(_CRT_FLOAT))
    );
    assert_eq!(
        ::std::mem::align_of::<_CRT_FLOAT>(),
        4usize,
        concat!("Alignment of ", stringify!(_CRT_FLOAT))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_CRT_FLOAT>())).f as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_CRT_FLOAT),
            "::",
            stringify!(f)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _LONGDOUBLE {
    pub x: f64,
}
#[test]
fn bindgen_test_layout__LONGDOUBLE() {
    assert_eq!(
        ::std::mem::size_of::<_LONGDOUBLE>(),
        8usize,
        concat!("Size of: ", stringify!(_LONGDOUBLE))
    );
    assert_eq!(
        ::std::mem::align_of::<_LONGDOUBLE>(),
        8usize,
        concat!("Alignment of ", stringify!(_LONGDOUBLE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_LONGDOUBLE>())).x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_LONGDOUBLE),
            "::",
            stringify!(x)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _LDBL12 {
    pub ld12: [::std::os::raw::c_uchar; 12usize],
}
#[test]
fn bindgen_test_layout__LDBL12() {
    assert_eq!(
        ::std::mem::size_of::<_LDBL12>(),
        12usize,
        concat!("Size of: ", stringify!(_LDBL12))
    );
    assert_eq!(
        ::std::mem::align_of::<_LDBL12>(),
        1usize,
        concat!("Alignment of ", stringify!(_LDBL12))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_LDBL12>())).ld12 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_LDBL12),
            "::",
            stringify!(ld12)
        )
    );
}
extern "C" {
    pub fn atof(_String: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn atoi(_String: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atol(_String: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn atoll(_String: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _atoi64(_String: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _atof_l(_String: *const ::std::os::raw::c_char, _Locale: _locale_t) -> f64;
}
extern "C" {
    pub fn _atoi_l(
        _String: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _atol_l(
        _String: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _atoll_l(
        _String: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _atoi64_l(
        _String: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _atoflt(
        _Result: *mut _CRT_FLOAT,
        _String: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _atodbl(
        _Result: *mut _CRT_DOUBLE,
        _String: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _atoldbl(
        _Result: *mut _LDOUBLE,
        _String: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _atoflt_l(
        _Result: *mut _CRT_FLOAT,
        _String: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _atodbl_l(
        _Result: *mut _CRT_DOUBLE,
        _String: *mut ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _atoldbl_l(
        _Result: *mut _LDOUBLE,
        _String: *mut ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strtof(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
    ) -> f32;
}
extern "C" {
    pub fn _strtof_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> f32;
}
extern "C" {
    pub fn strtod(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    pub fn _strtod_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> f64;
}
extern "C" {
    pub fn strtold(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    pub fn _strtold_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> f64;
}
extern "C" {
    pub fn strtol(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _strtol_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn strtoll(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _strtoll_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoul(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn _strtoul_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strtoull(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _strtoull_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _strtoi64(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _strtoi64_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _strtoui64(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _strtoui64_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _itoa_s(
        _Value: ::std::os::raw::c_int,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _itoa(
        _Value: ::std::os::raw::c_int,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _ltoa_s(
        _Value: ::std::os::raw::c_long,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _ltoa(
        _Value: ::std::os::raw::c_long,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _ultoa_s(
        _Value: ::std::os::raw::c_ulong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _ultoa(
        _Value: ::std::os::raw::c_ulong,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _i64toa_s(
        _Value: ::std::os::raw::c_longlong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _i64toa(
        _Value: ::std::os::raw::c_longlong,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _ui64toa_s(
        _Value: ::std::os::raw::c_ulonglong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _ui64toa(
        _Value: ::std::os::raw::c_ulonglong,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _ecvt_s(
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
        _Value: f64,
        _DigitCount: ::std::os::raw::c_int,
        _PtDec: *mut ::std::os::raw::c_int,
        _PtSign: *mut ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _ecvt(
        _Value: f64,
        _DigitCount: ::std::os::raw::c_int,
        _PtDec: *mut ::std::os::raw::c_int,
        _PtSign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _fcvt_s(
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
        _Value: f64,
        _FractionalDigitCount: ::std::os::raw::c_int,
        _PtDec: *mut ::std::os::raw::c_int,
        _PtSign: *mut ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _fcvt(
        _Value: f64,
        _FractionalDigitCount: ::std::os::raw::c_int,
        _PtDec: *mut ::std::os::raw::c_int,
        _PtSign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _gcvt_s(
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
        _Value: f64,
        _DigitCount: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _gcvt(
        _Value: f64,
        _DigitCount: ::std::os::raw::c_int,
        _Buffer: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ___mb_cur_max_func() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ___mb_cur_max_l_func(_Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mblen(_Ch: *const ::std::os::raw::c_char, _MaxCount: size_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mblen_l(
        _Ch: *const ::std::os::raw::c_char,
        _MaxCount: size_t,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mbstrlen(_String: *const ::std::os::raw::c_char) -> size_t;
}
extern "C" {
    pub fn _mbstrlen_l(_String: *const ::std::os::raw::c_char, _Locale: _locale_t) -> size_t;
}
extern "C" {
    pub fn _mbstrnlen(_String: *const ::std::os::raw::c_char, _MaxCount: size_t) -> size_t;
}
extern "C" {
    pub fn _mbstrnlen_l(
        _String: *const ::std::os::raw::c_char,
        _MaxCount: size_t,
        _Locale: _locale_t,
    ) -> size_t;
}
extern "C" {
    pub fn mbtowc(
        _DstCh: *mut u16,
        _SrcCh: *const ::std::os::raw::c_char,
        _SrcSizeInBytes: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mbtowc_l(
        _DstCh: *mut u16,
        _SrcCh: *const ::std::os::raw::c_char,
        _SrcSizeInBytes: size_t,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbstowcs_s(
        _PtNumOfCharConverted: *mut size_t,
        _DstBuf: *mut u16,
        _SizeInWords: size_t,
        _SrcBuf: *const ::std::os::raw::c_char,
        _MaxCount: size_t,
    ) -> errno_t;
}
extern "C" {
    pub fn mbstowcs(
        _Dest: *mut u16,
        _Source: *const ::std::os::raw::c_char,
        _MaxCount: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn _mbstowcs_s_l(
        _PtNumOfCharConverted: *mut size_t,
        _DstBuf: *mut u16,
        _SizeInWords: size_t,
        _SrcBuf: *const ::std::os::raw::c_char,
        _MaxCount: size_t,
        _Locale: _locale_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _mbstowcs_l(
        _Dest: *mut u16,
        _Source: *const ::std::os::raw::c_char,
        _MaxCount: size_t,
        _Locale: _locale_t,
    ) -> size_t;
}
extern "C" {
    pub fn wctomb(_MbCh: *mut ::std::os::raw::c_char, _WCh: u16) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wctomb_l(
        _MbCh: *mut ::std::os::raw::c_char,
        _WCh: u16,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wctomb_s(
        _SizeConverted: *mut ::std::os::raw::c_int,
        _MbCh: *mut ::std::os::raw::c_char,
        _SizeInBytes: rsize_t,
        _WCh: u16,
    ) -> errno_t;
}
extern "C" {
    pub fn _wctomb_s_l(
        _SizeConverted: *mut ::std::os::raw::c_int,
        _MbCh: *mut ::std::os::raw::c_char,
        _SizeInBytes: size_t,
        _WCh: u16,
        _Locale: _locale_t,
    ) -> errno_t;
}
extern "C" {
    pub fn wcstombs_s(
        _PtNumOfCharConverted: *mut size_t,
        _Dst: *mut ::std::os::raw::c_char,
        _DstSizeInBytes: size_t,
        _Src: *const u16,
        _MaxCountInBytes: size_t,
    ) -> errno_t;
}
extern "C" {
    pub fn wcstombs(
        _Dest: *mut ::std::os::raw::c_char,
        _Source: *const u16,
        _MaxCount: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn _wcstombs_s_l(
        _PtNumOfCharConverted: *mut size_t,
        _Dst: *mut ::std::os::raw::c_char,
        _DstSizeInBytes: size_t,
        _Src: *const u16,
        _MaxCountInBytes: size_t,
        _Locale: _locale_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wcstombs_l(
        _Dest: *mut ::std::os::raw::c_char,
        _Source: *const u16,
        _MaxCount: size_t,
        _Locale: _locale_t,
    ) -> size_t;
}
extern "C" {
    pub fn _fullpath(
        _Buffer: *mut ::std::os::raw::c_char,
        _Path: *const ::std::os::raw::c_char,
        _BufferCount: size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _makepath_s(
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
        _Drive: *const ::std::os::raw::c_char,
        _Dir: *const ::std::os::raw::c_char,
        _Filename: *const ::std::os::raw::c_char,
        _Ext: *const ::std::os::raw::c_char,
    ) -> errno_t;
}
extern "C" {
    pub fn _makepath(
        _Buffer: *mut ::std::os::raw::c_char,
        _Drive: *const ::std::os::raw::c_char,
        _Dir: *const ::std::os::raw::c_char,
        _Filename: *const ::std::os::raw::c_char,
        _Ext: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn _splitpath(
        _FullPath: *const ::std::os::raw::c_char,
        _Drive: *mut ::std::os::raw::c_char,
        _Dir: *mut ::std::os::raw::c_char,
        _Filename: *mut ::std::os::raw::c_char,
        _Ext: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn _splitpath_s(
        _FullPath: *const ::std::os::raw::c_char,
        _Drive: *mut ::std::os::raw::c_char,
        _DriveCount: size_t,
        _Dir: *mut ::std::os::raw::c_char,
        _DirCount: size_t,
        _Filename: *mut ::std::os::raw::c_char,
        _FilenameCount: size_t,
        _Ext: *mut ::std::os::raw::c_char,
        _ExtCount: size_t,
    ) -> errno_t;
}
extern "C" {
    pub fn getenv_s(
        _RequiredCount: *mut size_t,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: rsize_t,
        _VarName: *const ::std::os::raw::c_char,
    ) -> errno_t;
}
extern "C" {
    pub fn __p___argc() -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn __p___argv() -> *mut *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __p___wargv() -> *mut *mut *mut u16;
}
extern "C" {
    pub fn __p__environ() -> *mut *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __p__wenviron() -> *mut *mut *mut u16;
}
extern "C" {
    pub fn getenv(_VarName: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _dupenv_s(
        _Buffer: *mut *mut ::std::os::raw::c_char,
        _BufferCount: *mut size_t,
        _VarName: *const ::std::os::raw::c_char,
    ) -> errno_t;
}
extern "C" {
    pub fn system(_Command: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _putenv(_EnvString: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _putenv_s(
        _Name: *const ::std::os::raw::c_char,
        _Value: *const ::std::os::raw::c_char,
    ) -> errno_t;
}
extern "C" {
    pub fn _searchenv_s(
        _Filename: *const ::std::os::raw::c_char,
        _VarName: *const ::std::os::raw::c_char,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _searchenv(
        _Filename: *const ::std::os::raw::c_char,
        _VarName: *const ::std::os::raw::c_char,
        _Buffer: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn _seterrormode(_Mode: ::std::os::raw::c_int);
}
extern "C" {
    pub fn _beep(_Frequency: ::std::os::raw::c_uint, _Duration: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn _sleep(_Duration: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn ecvt(
        _Value: f64,
        _DigitCount: ::std::os::raw::c_int,
        _PtDec: *mut ::std::os::raw::c_int,
        _PtSign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fcvt(
        _Value: f64,
        _FractionalDigitCount: ::std::os::raw::c_int,
        _PtDec: *mut ::std::os::raw::c_int,
        _PtSign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn gcvt(
        _Value: f64,
        _DigitCount: ::std::os::raw::c_int,
        _DstBuf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn itoa(
        _Value: ::std::os::raw::c_int,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ltoa(
        _Value: ::std::os::raw::c_long,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn swab(
        _Buf1: *mut ::std::os::raw::c_char,
        _Buf2: *mut ::std::os::raw::c_char,
        _SizeInBytes: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ultoa(
        _Value: ::std::os::raw::c_ulong,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn putenv(_EnvString: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn onexit(_Func: _onexit_t) -> _onexit_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _exception {
    pub type_: ::std::os::raw::c_int,
    pub name: *mut ::std::os::raw::c_char,
    pub arg1: f64,
    pub arg2: f64,
    pub retval: f64,
}
#[test]
fn bindgen_test_layout__exception() {
    assert_eq!(
        ::std::mem::size_of::<_exception>(),
        40usize,
        concat!("Size of: ", stringify!(_exception))
    );
    assert_eq!(
        ::std::mem::align_of::<_exception>(),
        8usize,
        concat!("Alignment of ", stringify!(_exception))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_exception>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_exception),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_exception>())).name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_exception),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_exception>())).arg1 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_exception),
            "::",
            stringify!(arg1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_exception>())).arg2 as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_exception),
            "::",
            stringify!(arg2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_exception>())).retval as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_exception),
            "::",
            stringify!(retval)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _complex {
    pub x: f64,
    pub y: f64,
}
#[test]
fn bindgen_test_layout__complex() {
    assert_eq!(
        ::std::mem::size_of::<_complex>(),
        16usize,
        concat!("Size of: ", stringify!(_complex))
    );
    assert_eq!(
        ::std::mem::align_of::<_complex>(),
        8usize,
        concat!("Alignment of ", stringify!(_complex))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_complex>())).x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_complex),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_complex>())).y as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_complex),
            "::",
            stringify!(y)
        )
    );
}
pub type float_t = f32;
pub type double_t = f64;
extern "C" {
    pub static _HUGE: f64;
}
extern "C" {
    pub fn _fperrraise(_Except: ::std::os::raw::c_int);
}
extern "C" {
    pub fn _dclass(_X: f64) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn _ldclass(_X: f64) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn _fdclass(_X: f32) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn _dsign(_X: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _ldsign(_X: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fdsign(_X: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _dpcomp(_X: f64, _Y: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _ldpcomp(_X: f64, _Y: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fdpcomp(_X: f32, _Y: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _dtest(_Px: *mut f64) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn _ldtest(_Px: *mut f64) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn _fdtest(_Px: *mut f32) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn _d_int(_Px: *mut f64, _Xexp: ::std::os::raw::c_short) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn _ld_int(_Px: *mut f64, _Xexp: ::std::os::raw::c_short) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn _fd_int(_Px: *mut f32, _Xexp: ::std::os::raw::c_short) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn _dscale(_Px: *mut f64, _Lexp: ::std::os::raw::c_long) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn _ldscale(_Px: *mut f64, _Lexp: ::std::os::raw::c_long) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn _fdscale(_Px: *mut f32, _Lexp: ::std::os::raw::c_long) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn _dunscale(_Pex: *mut ::std::os::raw::c_short, _Px: *mut f64) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn _ldunscale(_Pex: *mut ::std::os::raw::c_short, _Px: *mut f64)
        -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn _fdunscale(_Pex: *mut ::std::os::raw::c_short, _Px: *mut f32)
        -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn _dexp(_Px: *mut f64, _Y: f64, _Eoff: ::std::os::raw::c_long) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn _ldexp(_Px: *mut f64, _Y: f64, _Eoff: ::std::os::raw::c_long)
        -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn _fdexp(_Px: *mut f32, _Y: f32, _Eoff: ::std::os::raw::c_long)
        -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn _dnorm(_Ps: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn _fdnorm(_Ps: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn _dpoly(_X: f64, _Tab: *const f64, _N: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn _ldpoly(_X: f64, _Tab: *const f64, _N: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn _fdpoly(_X: f32, _Tab: *const f32, _N: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn _dlog(_X: f64, _Baseflag: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn _ldlog(_X: f64, _Baseflag: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn _fdlog(_X: f32, _Baseflag: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn _dsin(_X: f64, _Qoff: ::std::os::raw::c_uint) -> f64;
}
extern "C" {
    pub fn _ldsin(_X: f64, _Qoff: ::std::os::raw::c_uint) -> f64;
}
extern "C" {
    pub fn _fdsin(_X: f32, _Qoff: ::std::os::raw::c_uint) -> f32;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _double_val {
    pub _Sh: [::std::os::raw::c_ushort; 4usize],
    pub _Val: f64,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout__double_val() {
    assert_eq!(
        ::std::mem::size_of::<_double_val>(),
        8usize,
        concat!("Size of: ", stringify!(_double_val))
    );
    assert_eq!(
        ::std::mem::align_of::<_double_val>(),
        8usize,
        concat!("Alignment of ", stringify!(_double_val))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_double_val>()))._Sh as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_double_val),
            "::",
            stringify!(_Sh)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_double_val>()))._Val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_double_val),
            "::",
            stringify!(_Val)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _float_val {
    pub _Sh: [::std::os::raw::c_ushort; 2usize],
    pub _Val: f32,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout__float_val() {
    assert_eq!(
        ::std::mem::size_of::<_float_val>(),
        4usize,
        concat!("Size of: ", stringify!(_float_val))
    );
    assert_eq!(
        ::std::mem::align_of::<_float_val>(),
        4usize,
        concat!("Alignment of ", stringify!(_float_val))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_float_val>()))._Sh as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_float_val),
            "::",
            stringify!(_Sh)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_float_val>()))._Val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_float_val),
            "::",
            stringify!(_Val)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _ldouble_val {
    pub _Sh: [::std::os::raw::c_ushort; 4usize],
    pub _Val: f64,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout__ldouble_val() {
    assert_eq!(
        ::std::mem::size_of::<_ldouble_val>(),
        8usize,
        concat!("Size of: ", stringify!(_ldouble_val))
    );
    assert_eq!(
        ::std::mem::align_of::<_ldouble_val>(),
        8usize,
        concat!("Alignment of ", stringify!(_ldouble_val))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ldouble_val>()))._Sh as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ldouble_val),
            "::",
            stringify!(_Sh)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ldouble_val>()))._Val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ldouble_val),
            "::",
            stringify!(_Val)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _float_const {
    pub _Word: [::std::os::raw::c_ushort; 4usize],
    pub _Float: f32,
    pub _Double: f64,
    pub _Long_double: f64,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout__float_const() {
    assert_eq!(
        ::std::mem::size_of::<_float_const>(),
        8usize,
        concat!("Size of: ", stringify!(_float_const))
    );
    assert_eq!(
        ::std::mem::align_of::<_float_const>(),
        8usize,
        concat!("Alignment of ", stringify!(_float_const))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_float_const>()))._Word as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_float_const),
            "::",
            stringify!(_Word)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_float_const>()))._Float as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_float_const),
            "::",
            stringify!(_Float)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_float_const>()))._Double as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_float_const),
            "::",
            stringify!(_Double)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_float_const>()))._Long_double as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_float_const),
            "::",
            stringify!(_Long_double)
        )
    );
}
extern "C" {
    pub static _Denorm_C: _float_const;
}
extern "C" {
    pub static _Inf_C: _float_const;
}
extern "C" {
    pub static _Nan_C: _float_const;
}
extern "C" {
    pub static _Snan_C: _float_const;
}
extern "C" {
    pub static _Hugeval_C: _float_const;
}
extern "C" {
    pub static _FDenorm_C: _float_const;
}
extern "C" {
    pub static _FInf_C: _float_const;
}
extern "C" {
    pub static _FNan_C: _float_const;
}
extern "C" {
    pub static _FSnan_C: _float_const;
}
extern "C" {
    pub static _LDenorm_C: _float_const;
}
extern "C" {
    pub static _LInf_C: _float_const;
}
extern "C" {
    pub static _LNan_C: _float_const;
}
extern "C" {
    pub static _LSnan_C: _float_const;
}
extern "C" {
    pub static _Eps_C: _float_const;
}
extern "C" {
    pub static _Rteps_C: _float_const;
}
extern "C" {
    pub static _FEps_C: _float_const;
}
extern "C" {
    pub static _FRteps_C: _float_const;
}
extern "C" {
    pub static _LEps_C: _float_const;
}
extern "C" {
    pub static _LRteps_C: _float_const;
}
extern "C" {
    pub static _Zero_C: f64;
}
extern "C" {
    pub static _Xbig_C: f64;
}
extern "C" {
    pub static _FZero_C: f32;
}
extern "C" {
    pub static _FXbig_C: f32;
}
extern "C" {
    pub static _LZero_C: f64;
}
extern "C" {
    pub static _LXbig_C: f64;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _Combined_type {
    pub _address: u8,
}
pub type _Combined_type__Type = f32;
#[test]
fn __bindgen_test_layout__Combined_type_open0_float_double_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<_Combined_type>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(_Combined_type)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_Combined_type>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(_Combined_type)
        )
    );
}
#[test]
fn __bindgen_test_layout__Combined_type_open0_float_long_double_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<_Combined_type>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(_Combined_type)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_Combined_type>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(_Combined_type)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _Real_widened {
    pub _address: u8,
}
pub type _Real_widened__Type = f64;
#[test]
fn __bindgen_test_layout__Real_widened_open0_float_float_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<_Real_widened>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(_Real_widened)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_Real_widened>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(_Real_widened)
        )
    );
}
#[test]
fn __bindgen_test_layout__Real_widened_open0_float_double_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<_Real_widened>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(_Real_widened)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_Real_widened>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(_Real_widened)
        )
    );
}
#[test]
fn __bindgen_test_layout__Real_widened_open0_double_float_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<_Real_widened>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(_Real_widened)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_Real_widened>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(_Real_widened)
        )
    );
}
#[test]
fn __bindgen_test_layout__Real_widened_open0_double_double_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<_Real_widened>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(_Real_widened)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_Real_widened>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(_Real_widened)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _Real_type {
    pub _address: u8,
}
pub type _Real_type__Type = f64;
#[test]
fn __bindgen_test_layout__Real_type_open0_float_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<_Real_type>(),
        1usize,
        concat!("Size of template specialization: ", stringify!(_Real_type))
    );
    assert_eq!(
        ::std::mem::align_of::<_Real_type>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(_Real_type)
        )
    );
}
#[test]
fn __bindgen_test_layout__Real_type_open0_long_double_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<_Real_type>(),
        1usize,
        concat!("Size of template specialization: ", stringify!(_Real_type))
    );
    assert_eq!(
        ::std::mem::align_of::<_Real_type>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(_Real_type)
        )
    );
}
extern "C" {
    pub fn acos(_X: f64) -> f64;
}
extern "C" {
    pub fn asin(_X: f64) -> f64;
}
extern "C" {
    pub fn atan(_X: f64) -> f64;
}
extern "C" {
    pub fn atan2(_Y: f64, _X: f64) -> f64;
}
extern "C" {
    pub fn cos(_X: f64) -> f64;
}
extern "C" {
    pub fn cosh(_X: f64) -> f64;
}
extern "C" {
    pub fn exp(_X: f64) -> f64;
}
extern "C" {
    pub fn fabs(_X: f64) -> f64;
}
extern "C" {
    pub fn fmod(_X: f64, _Y: f64) -> f64;
}
extern "C" {
    pub fn log(_X: f64) -> f64;
}
extern "C" {
    pub fn log10(_X: f64) -> f64;
}
extern "C" {
    pub fn pow(_X: f64, _Y: f64) -> f64;
}
extern "C" {
    pub fn sin(_X: f64) -> f64;
}
extern "C" {
    pub fn sinh(_X: f64) -> f64;
}
extern "C" {
    pub fn sqrt(_X: f64) -> f64;
}
extern "C" {
    pub fn tan(_X: f64) -> f64;
}
extern "C" {
    pub fn tanh(_X: f64) -> f64;
}
extern "C" {
    pub fn acosh(_X: f64) -> f64;
}
extern "C" {
    pub fn asinh(_X: f64) -> f64;
}
extern "C" {
    pub fn atanh(_X: f64) -> f64;
}
extern "C" {
    pub fn _cabs(_Complex_value: _complex) -> f64;
}
extern "C" {
    pub fn cbrt(_X: f64) -> f64;
}
extern "C" {
    pub fn ceil(_X: f64) -> f64;
}
extern "C" {
    pub fn copysign(_Number: f64, _Sign: f64) -> f64;
}
extern "C" {
    pub fn erf(_X: f64) -> f64;
}
extern "C" {
    pub fn erfc(_X: f64) -> f64;
}
extern "C" {
    pub fn exp2(_X: f64) -> f64;
}
extern "C" {
    pub fn expm1(_X: f64) -> f64;
}
extern "C" {
    pub fn fdim(_X: f64, _Y: f64) -> f64;
}
extern "C" {
    pub fn floor(_X: f64) -> f64;
}
extern "C" {
    pub fn fma(_X: f64, _Y: f64, _Z: f64) -> f64;
}
extern "C" {
    pub fn fmax(_X: f64, _Y: f64) -> f64;
}
extern "C" {
    pub fn fmin(_X: f64, _Y: f64) -> f64;
}
extern "C" {
    pub fn frexp(_X: f64, _Y: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn hypot(_X: f64, _Y: f64) -> f64;
}
extern "C" {
    pub fn _hypot(_X: f64, _Y: f64) -> f64;
}
extern "C" {
    pub fn ilogb(_X: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ldexp(_X: f64, _Y: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn lgamma(_X: f64) -> f64;
}
extern "C" {
    pub fn llrint(_X: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn llround(_X: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn log1p(_X: f64) -> f64;
}
extern "C" {
    pub fn log2(_X: f64) -> f64;
}
extern "C" {
    pub fn logb(_X: f64) -> f64;
}
extern "C" {
    pub fn lrint(_X: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn lround(_X: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _matherr(_Except: *mut _exception) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn modf(_X: f64, _Y: *mut f64) -> f64;
}
extern "C" {
    pub fn nan(_X: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn nearbyint(_X: f64) -> f64;
}
extern "C" {
    pub fn nextafter(_X: f64, _Y: f64) -> f64;
}
extern "C" {
    pub fn nexttoward(_X: f64, _Y: f64) -> f64;
}
extern "C" {
    pub fn remainder(_X: f64, _Y: f64) -> f64;
}
extern "C" {
    pub fn remquo(_X: f64, _Y: f64, _Z: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn rint(_X: f64) -> f64;
}
extern "C" {
    pub fn round(_X: f64) -> f64;
}
extern "C" {
    pub fn scalbln(_X: f64, _Y: ::std::os::raw::c_long) -> f64;
}
extern "C" {
    pub fn scalbn(_X: f64, _Y: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn tgamma(_X: f64) -> f64;
}
extern "C" {
    pub fn trunc(_X: f64) -> f64;
}
extern "C" {
    pub fn _j0(_X: f64) -> f64;
}
extern "C" {
    pub fn _j1(_X: f64) -> f64;
}
extern "C" {
    pub fn _jn(_X: ::std::os::raw::c_int, _Y: f64) -> f64;
}
extern "C" {
    pub fn _y0(_X: f64) -> f64;
}
extern "C" {
    pub fn _y1(_X: f64) -> f64;
}
extern "C" {
    pub fn _yn(_X: ::std::os::raw::c_int, _Y: f64) -> f64;
}
extern "C" {
    pub fn acoshf(_X: f32) -> f32;
}
extern "C" {
    pub fn asinhf(_X: f32) -> f32;
}
extern "C" {
    pub fn atanhf(_X: f32) -> f32;
}
extern "C" {
    pub fn cbrtf(_X: f32) -> f32;
}
extern "C" {
    pub fn _chgsignf(_X: f32) -> f32;
}
extern "C" {
    pub fn copysignf(_Number: f32, _Sign: f32) -> f32;
}
extern "C" {
    pub fn _copysignf(_Number: f32, _Sign: f32) -> f32;
}
extern "C" {
    pub fn erff(_X: f32) -> f32;
}
extern "C" {
    pub fn erfcf(_X: f32) -> f32;
}
extern "C" {
    pub fn expm1f(_X: f32) -> f32;
}
extern "C" {
    pub fn exp2f(_X: f32) -> f32;
}
extern "C" {
    pub fn fdimf(_X: f32, _Y: f32) -> f32;
}
extern "C" {
    pub fn fmaf(_X: f32, _Y: f32, _Z: f32) -> f32;
}
extern "C" {
    pub fn fmaxf(_X: f32, _Y: f32) -> f32;
}
extern "C" {
    pub fn fminf(_X: f32, _Y: f32) -> f32;
}
extern "C" {
    pub fn _hypotf(_X: f32, _Y: f32) -> f32;
}
extern "C" {
    pub fn ilogbf(_X: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lgammaf(_X: f32) -> f32;
}
extern "C" {
    pub fn llrintf(_X: f32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn llroundf(_X: f32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn log1pf(_X: f32) -> f32;
}
extern "C" {
    pub fn log2f(_X: f32) -> f32;
}
extern "C" {
    pub fn logbf(_X: f32) -> f32;
}
extern "C" {
    pub fn lrintf(_X: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn lroundf(_X: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn nanf(_X: *const ::std::os::raw::c_char) -> f32;
}
extern "C" {
    pub fn nearbyintf(_X: f32) -> f32;
}
extern "C" {
    pub fn nextafterf(_X: f32, _Y: f32) -> f32;
}
extern "C" {
    pub fn nexttowardf(_X: f32, _Y: f64) -> f32;
}
extern "C" {
    pub fn remainderf(_X: f32, _Y: f32) -> f32;
}
extern "C" {
    pub fn remquof(_X: f32, _Y: f32, _Z: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn rintf(_X: f32) -> f32;
}
extern "C" {
    pub fn roundf(_X: f32) -> f32;
}
extern "C" {
    pub fn scalblnf(_X: f32, _Y: ::std::os::raw::c_long) -> f32;
}
extern "C" {
    pub fn scalbnf(_X: f32, _Y: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn tgammaf(_X: f32) -> f32;
}
extern "C" {
    pub fn truncf(_X: f32) -> f32;
}
extern "C" {
    pub fn _logbf(_X: f32) -> f32;
}
extern "C" {
    pub fn _nextafterf(_X: f32, _Y: f32) -> f32;
}
extern "C" {
    pub fn _finitef(_X: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _isnanf(_X: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fpclassf(_X: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _set_FMA3_enable(_Flag: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _get_FMA3_enable() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acosf(_X: f32) -> f32;
}
extern "C" {
    pub fn asinf(_X: f32) -> f32;
}
extern "C" {
    pub fn atan2f(_Y: f32, _X: f32) -> f32;
}
extern "C" {
    pub fn atanf(_X: f32) -> f32;
}
extern "C" {
    pub fn ceilf(_X: f32) -> f32;
}
extern "C" {
    pub fn cosf(_X: f32) -> f32;
}
extern "C" {
    pub fn coshf(_X: f32) -> f32;
}
extern "C" {
    pub fn expf(_X: f32) -> f32;
}
extern "C" {
    pub fn floorf(_X: f32) -> f32;
}
extern "C" {
    pub fn fmodf(_X: f32, _Y: f32) -> f32;
}
extern "C" {
    pub fn log10f(_X: f32) -> f32;
}
extern "C" {
    pub fn logf(_X: f32) -> f32;
}
extern "C" {
    pub fn modff(_X: f32, _Y: *mut f32) -> f32;
}
extern "C" {
    pub fn powf(_X: f32, _Y: f32) -> f32;
}
extern "C" {
    pub fn sinf(_X: f32) -> f32;
}
extern "C" {
    pub fn sinhf(_X: f32) -> f32;
}
extern "C" {
    pub fn sqrtf(_X: f32) -> f32;
}
extern "C" {
    pub fn tanf(_X: f32) -> f32;
}
extern "C" {
    pub fn tanhf(_X: f32) -> f32;
}
extern "C" {
    pub fn acoshl(_X: f64) -> f64;
}
extern "C" {
    pub fn asinhl(_X: f64) -> f64;
}
extern "C" {
    pub fn atanhl(_X: f64) -> f64;
}
extern "C" {
    pub fn cbrtl(_X: f64) -> f64;
}
extern "C" {
    pub fn copysignl(_Number: f64, _Sign: f64) -> f64;
}
extern "C" {
    pub fn erfl(_X: f64) -> f64;
}
extern "C" {
    pub fn erfcl(_X: f64) -> f64;
}
extern "C" {
    pub fn exp2l(_X: f64) -> f64;
}
extern "C" {
    pub fn expm1l(_X: f64) -> f64;
}
extern "C" {
    pub fn fdiml(_X: f64, _Y: f64) -> f64;
}
extern "C" {
    pub fn fmal(_X: f64, _Y: f64, _Z: f64) -> f64;
}
extern "C" {
    pub fn fmaxl(_X: f64, _Y: f64) -> f64;
}
extern "C" {
    pub fn fminl(_X: f64, _Y: f64) -> f64;
}
extern "C" {
    pub fn ilogbl(_X: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lgammal(_X: f64) -> f64;
}
extern "C" {
    pub fn llrintl(_X: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn llroundl(_X: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn log1pl(_X: f64) -> f64;
}
extern "C" {
    pub fn log2l(_X: f64) -> f64;
}
extern "C" {
    pub fn logbl(_X: f64) -> f64;
}
extern "C" {
    pub fn lrintl(_X: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn lroundl(_X: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn nanl(_X: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn nearbyintl(_X: f64) -> f64;
}
extern "C" {
    pub fn nextafterl(_X: f64, _Y: f64) -> f64;
}
extern "C" {
    pub fn nexttowardl(_X: f64, _Y: f64) -> f64;
}
extern "C" {
    pub fn remainderl(_X: f64, _Y: f64) -> f64;
}
extern "C" {
    pub fn remquol(_X: f64, _Y: f64, _Z: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn rintl(_X: f64) -> f64;
}
extern "C" {
    pub fn roundl(_X: f64) -> f64;
}
extern "C" {
    pub fn scalblnl(_X: f64, _Y: ::std::os::raw::c_long) -> f64;
}
extern "C" {
    pub fn scalbnl(_X: f64, _Y: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn tgammal(_X: f64) -> f64;
}
extern "C" {
    pub fn truncl(_X: f64) -> f64;
}
extern "C" {
    pub static mut HUGE: f64;
}
extern "C" {
    pub fn j0(_X: f64) -> f64;
}
extern "C" {
    pub fn j1(_X: f64) -> f64;
}
extern "C" {
    pub fn jn(_X: ::std::os::raw::c_int, _Y: f64) -> f64;
}
extern "C" {
    pub fn y0(_X: f64) -> f64;
}
extern "C" {
    pub fn y1(_X: f64) -> f64;
}
extern "C" {
    pub fn yn(_X: ::std::os::raw::c_int, _Y: f64) -> f64;
}
pub type ImGuiLayoutType = ::std::os::raw::c_int;
pub type ImGuiItemFlags = ::std::os::raw::c_int;
pub type ImGuiItemStatusFlags = ::std::os::raw::c_int;
pub type ImGuiOldColumnFlags = ::std::os::raw::c_int;
pub type ImGuiNavHighlightFlags = ::std::os::raw::c_int;
pub type ImGuiNavDirSourceFlags = ::std::os::raw::c_int;
pub type ImGuiNavMoveFlags = ::std::os::raw::c_int;
pub type ImGuiNextItemDataFlags = ::std::os::raw::c_int;
pub type ImGuiNextWindowDataFlags = ::std::os::raw::c_int;
pub type ImGuiSeparatorFlags = ::std::os::raw::c_int;
pub type ImGuiTextFlags = ::std::os::raw::c_int;
pub type ImGuiTooltipFlags = ::std::os::raw::c_int;
pub type ImGuiErrorLogCallback = ::std::option::Option<
    unsafe extern "C" fn(
        user_data: *mut ::std::os::raw::c_void,
        fmt: *const ::std::os::raw::c_char,
        ...
    ),
>;
extern "C" {
    #[link_name = "\u{1}?GImGui@@3PEAUImGuiContext@@EA"]
    pub static mut GImGui: *mut ImGuiContext;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImStb_StbUndoRecord {
    pub where_: ::std::os::raw::c_int,
    pub insert_length: ::std::os::raw::c_int,
    pub delete_length: ::std::os::raw::c_int,
    pub char_storage: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ImStb_StbUndoRecord() {
    assert_eq!(
        ::std::mem::size_of::<ImStb_StbUndoRecord>(),
        16usize,
        concat!("Size of: ", stringify!(ImStb_StbUndoRecord))
    );
    assert_eq!(
        ::std::mem::align_of::<ImStb_StbUndoRecord>(),
        4usize,
        concat!("Alignment of ", stringify!(ImStb_StbUndoRecord))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImStb_StbUndoRecord>())).where_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImStb_StbUndoRecord),
            "::",
            stringify!(where_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImStb_StbUndoRecord>())).insert_length as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImStb_StbUndoRecord),
            "::",
            stringify!(insert_length)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImStb_StbUndoRecord>())).delete_length as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImStb_StbUndoRecord),
            "::",
            stringify!(delete_length)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImStb_StbUndoRecord>())).char_storage as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ImStb_StbUndoRecord),
            "::",
            stringify!(char_storage)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ImStb_StbUndoState {
    pub undo_rec: [ImStb_StbUndoRecord; 99usize],
    pub undo_char: [ImWchar; 999usize],
    pub undo_point: ::std::os::raw::c_short,
    pub redo_point: ::std::os::raw::c_short,
    pub undo_char_point: ::std::os::raw::c_int,
    pub redo_char_point: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ImStb_StbUndoState() {
    assert_eq!(
        ::std::mem::size_of::<ImStb_StbUndoState>(),
        3596usize,
        concat!("Size of: ", stringify!(ImStb_StbUndoState))
    );
    assert_eq!(
        ::std::mem::align_of::<ImStb_StbUndoState>(),
        4usize,
        concat!("Alignment of ", stringify!(ImStb_StbUndoState))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImStb_StbUndoState>())).undo_rec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImStb_StbUndoState),
            "::",
            stringify!(undo_rec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImStb_StbUndoState>())).undo_char as *const _ as usize },
        1584usize,
        concat!(
            "Offset of field: ",
            stringify!(ImStb_StbUndoState),
            "::",
            stringify!(undo_char)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImStb_StbUndoState>())).undo_point as *const _ as usize },
        3582usize,
        concat!(
            "Offset of field: ",
            stringify!(ImStb_StbUndoState),
            "::",
            stringify!(undo_point)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImStb_StbUndoState>())).redo_point as *const _ as usize },
        3584usize,
        concat!(
            "Offset of field: ",
            stringify!(ImStb_StbUndoState),
            "::",
            stringify!(redo_point)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImStb_StbUndoState>())).undo_char_point as *const _ as usize
        },
        3588usize,
        concat!(
            "Offset of field: ",
            stringify!(ImStb_StbUndoState),
            "::",
            stringify!(undo_char_point)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImStb_StbUndoState>())).redo_char_point as *const _ as usize
        },
        3592usize,
        concat!(
            "Offset of field: ",
            stringify!(ImStb_StbUndoState),
            "::",
            stringify!(redo_char_point)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ImStb_STB_TexteditState {
    #[doc = ""]
    pub cursor: ::std::os::raw::c_int,
    pub select_start: ::std::os::raw::c_int,
    pub select_end: ::std::os::raw::c_int,
    pub insert_mode: ::std::os::raw::c_uchar,
    pub row_count_per_page: ::std::os::raw::c_int,
    #[doc = ""]
    pub cursor_at_end_of_line: ::std::os::raw::c_uchar,
    pub initialized: ::std::os::raw::c_uchar,
    pub has_preferred_x: ::std::os::raw::c_uchar,
    pub single_line: ::std::os::raw::c_uchar,
    pub padding1: ::std::os::raw::c_uchar,
    pub padding2: ::std::os::raw::c_uchar,
    pub padding3: ::std::os::raw::c_uchar,
    pub preferred_x: f32,
    pub undostate: ImStb_StbUndoState,
}
#[test]
fn bindgen_test_layout_ImStb_STB_TexteditState() {
    assert_eq!(
        ::std::mem::size_of::<ImStb_STB_TexteditState>(),
        3628usize,
        concat!("Size of: ", stringify!(ImStb_STB_TexteditState))
    );
    assert_eq!(
        ::std::mem::align_of::<ImStb_STB_TexteditState>(),
        4usize,
        concat!("Alignment of ", stringify!(ImStb_STB_TexteditState))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImStb_STB_TexteditState>())).cursor as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImStb_STB_TexteditState),
            "::",
            stringify!(cursor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImStb_STB_TexteditState>())).select_start as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImStb_STB_TexteditState),
            "::",
            stringify!(select_start)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImStb_STB_TexteditState>())).select_end as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImStb_STB_TexteditState),
            "::",
            stringify!(select_end)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImStb_STB_TexteditState>())).insert_mode as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ImStb_STB_TexteditState),
            "::",
            stringify!(insert_mode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImStb_STB_TexteditState>())).row_count_per_page as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImStb_STB_TexteditState),
            "::",
            stringify!(row_count_per_page)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImStb_STB_TexteditState>())).cursor_at_end_of_line as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ImStb_STB_TexteditState),
            "::",
            stringify!(cursor_at_end_of_line)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImStb_STB_TexteditState>())).initialized as *const _ as usize
        },
        21usize,
        concat!(
            "Offset of field: ",
            stringify!(ImStb_STB_TexteditState),
            "::",
            stringify!(initialized)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImStb_STB_TexteditState>())).has_preferred_x as *const _ as usize
        },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(ImStb_STB_TexteditState),
            "::",
            stringify!(has_preferred_x)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImStb_STB_TexteditState>())).single_line as *const _ as usize
        },
        23usize,
        concat!(
            "Offset of field: ",
            stringify!(ImStb_STB_TexteditState),
            "::",
            stringify!(single_line)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImStb_STB_TexteditState>())).padding1 as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImStb_STB_TexteditState),
            "::",
            stringify!(padding1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImStb_STB_TexteditState>())).padding2 as *const _ as usize
        },
        25usize,
        concat!(
            "Offset of field: ",
            stringify!(ImStb_STB_TexteditState),
            "::",
            stringify!(padding2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImStb_STB_TexteditState>())).padding3 as *const _ as usize
        },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(ImStb_STB_TexteditState),
            "::",
            stringify!(padding3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImStb_STB_TexteditState>())).preferred_x as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ImStb_STB_TexteditState),
            "::",
            stringify!(preferred_x)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImStb_STB_TexteditState>())).undostate as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ImStb_STB_TexteditState),
            "::",
            stringify!(undostate)
        )
    );
}
#[doc = ""]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImStb_StbTexteditRow {
    pub x0: f32,
    pub x1: f32,
    pub baseline_y_delta: f32,
    pub ymin: f32,
    pub ymax: f32,
    pub num_chars: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ImStb_StbTexteditRow() {
    assert_eq!(
        ::std::mem::size_of::<ImStb_StbTexteditRow>(),
        24usize,
        concat!("Size of: ", stringify!(ImStb_StbTexteditRow))
    );
    assert_eq!(
        ::std::mem::align_of::<ImStb_StbTexteditRow>(),
        4usize,
        concat!("Alignment of ", stringify!(ImStb_StbTexteditRow))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImStb_StbTexteditRow>())).x0 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImStb_StbTexteditRow),
            "::",
            stringify!(x0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImStb_StbTexteditRow>())).x1 as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImStb_StbTexteditRow),
            "::",
            stringify!(x1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImStb_StbTexteditRow>())).baseline_y_delta as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImStb_StbTexteditRow),
            "::",
            stringify!(baseline_y_delta)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImStb_StbTexteditRow>())).ymin as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ImStb_StbTexteditRow),
            "::",
            stringify!(ymin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImStb_StbTexteditRow>())).ymax as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImStb_StbTexteditRow),
            "::",
            stringify!(ymax)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImStb_StbTexteditRow>())).num_chars as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ImStb_StbTexteditRow),
            "::",
            stringify!(num_chars)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}?ImHashData@@YAIPEBX_KI@Z"]
    pub fn ImHashData(
        data: *const ::std::os::raw::c_void,
        data_size: size_t,
        seed: ImU32,
    ) -> ImGuiID;
}
extern "C" {
    #[link_name = "\u{1}?ImHashStr@@YAIPEBD_KI@Z"]
    pub fn ImHashStr(
        data: *const ::std::os::raw::c_char,
        data_size: size_t,
        seed: ImU32,
    ) -> ImGuiID;
}
extern "C" {
    #[link_name = "\u{1}?ImAlphaBlendColors@@YAIII@Z"]
    pub fn ImAlphaBlendColors(col_a: ImU32, col_b: ImU32) -> ImU32;
}
extern "C" {
    #[link_name = "\u{1}?ImStricmp@@YAHPEBD0@Z"]
    pub fn ImStricmp(
        str1: *const ::std::os::raw::c_char,
        str2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ImStrnicmp@@YAHPEBD0_K@Z"]
    pub fn ImStrnicmp(
        str1: *const ::std::os::raw::c_char,
        str2: *const ::std::os::raw::c_char,
        count: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ImStrncpy@@YAXPEADPEBD_K@Z"]
    pub fn ImStrncpy(
        dst: *mut ::std::os::raw::c_char,
        src: *const ::std::os::raw::c_char,
        count: size_t,
    );
}
extern "C" {
    #[link_name = "\u{1}?ImStrdup@@YAPEADPEBD@Z"]
    pub fn ImStrdup(str_: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}?ImStrdupcpy@@YAPEADPEADPEA_KPEBD@Z"]
    pub fn ImStrdupcpy(
        dst: *mut ::std::os::raw::c_char,
        p_dst_size: *mut size_t,
        str_: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}?ImStrchrRange@@YAPEBDPEBD0D@Z"]
    pub fn ImStrchrRange(
        str_begin: *const ::std::os::raw::c_char,
        str_end: *const ::std::os::raw::c_char,
        c: ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}?ImStrlenW@@YAHPEBG@Z"]
    pub fn ImStrlenW(str_: *const ImWchar) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ImStreolRange@@YAPEBDPEBD0@Z"]
    pub fn ImStreolRange(
        str_: *const ::std::os::raw::c_char,
        str_end: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}?ImStrbolW@@YAPEBGPEBG0@Z"]
    pub fn ImStrbolW(buf_mid_line: *const ImWchar, buf_begin: *const ImWchar) -> *const ImWchar;
}
extern "C" {
    #[link_name = "\u{1}?ImStristr@@YAPEBDPEBD000@Z"]
    pub fn ImStristr(
        haystack: *const ::std::os::raw::c_char,
        haystack_end: *const ::std::os::raw::c_char,
        needle: *const ::std::os::raw::c_char,
        needle_end: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}?ImStrTrimBlanks@@YAXPEAD@Z"]
    pub fn ImStrTrimBlanks(str_: *mut ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "\u{1}?ImStrSkipBlank@@YAPEBDPEBD@Z"]
    pub fn ImStrSkipBlank(str_: *const ::std::os::raw::c_char) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}?ImFormatString@@YAHPEAD_KPEBDZZ"]
    pub fn ImFormatString(
        buf: *mut ::std::os::raw::c_char,
        buf_size: size_t,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ImFormatStringV@@YAHPEAD_KPEBD0@Z"]
    pub fn ImFormatStringV(
        buf: *mut ::std::os::raw::c_char,
        buf_size: size_t,
        fmt: *const ::std::os::raw::c_char,
        args: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ImParseFormatFindStart@@YAPEBDPEBD@Z"]
    pub fn ImParseFormatFindStart(
        format: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}?ImParseFormatFindEnd@@YAPEBDPEBD@Z"]
    pub fn ImParseFormatFindEnd(
        format: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}?ImParseFormatTrimDecorations@@YAPEBDPEBDPEAD_K@Z"]
    pub fn ImParseFormatTrimDecorations(
        format: *const ::std::os::raw::c_char,
        buf: *mut ::std::os::raw::c_char,
        buf_size: size_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}?ImParseFormatPrecision@@YAHPEBDH@Z"]
    pub fn ImParseFormatPrecision(
        format: *const ::std::os::raw::c_char,
        default_value: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ImTextStrToUtf8@@YAHPEADHPEBG1@Z"]
    pub fn ImTextStrToUtf8(
        buf: *mut ::std::os::raw::c_char,
        buf_size: ::std::os::raw::c_int,
        in_text: *const ImWchar,
        in_text_end: *const ImWchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ImTextCharFromUtf8@@YAHPEAIPEBD1@Z"]
    pub fn ImTextCharFromUtf8(
        out_char: *mut ::std::os::raw::c_uint,
        in_text: *const ::std::os::raw::c_char,
        in_text_end: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ImTextStrFromUtf8@@YAHPEAGHPEBD1PEAPEBD@Z"]
    pub fn ImTextStrFromUtf8(
        buf: *mut ImWchar,
        buf_size: ::std::os::raw::c_int,
        in_text: *const ::std::os::raw::c_char,
        in_text_end: *const ::std::os::raw::c_char,
        in_remaining: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ImTextCountCharsFromUtf8@@YAHPEBD0@Z"]
    pub fn ImTextCountCharsFromUtf8(
        in_text: *const ::std::os::raw::c_char,
        in_text_end: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ImTextCountUtf8BytesFromChar@@YAHPEBD0@Z"]
    pub fn ImTextCountUtf8BytesFromChar(
        in_text: *const ::std::os::raw::c_char,
        in_text_end: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ImTextCountUtf8BytesFromStr@@YAHPEBG0@Z"]
    pub fn ImTextCountUtf8BytesFromStr(
        in_text: *const ImWchar,
        in_text_end: *const ImWchar,
    ) -> ::std::os::raw::c_int;
}
pub type ImFileHandle = *mut FILE;
extern "C" {
    #[link_name = "\u{1}?ImFileOpen@@YAPEAU_iobuf@@PEBD0@Z"]
    pub fn ImFileOpen(
        filename: *const ::std::os::raw::c_char,
        mode: *const ::std::os::raw::c_char,
    ) -> ImFileHandle;
}
extern "C" {
    #[link_name = "\u{1}?ImFileClose@@YA_NPEAU_iobuf@@@Z"]
    pub fn ImFileClose(file: ImFileHandle) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?ImFileGetSize@@YA_KPEAU_iobuf@@@Z"]
    pub fn ImFileGetSize(file: ImFileHandle) -> ImU64;
}
extern "C" {
    #[link_name = "\u{1}?ImFileRead@@YA_KPEAX_K1PEAU_iobuf@@@Z"]
    pub fn ImFileRead(
        data: *mut ::std::os::raw::c_void,
        size: ImU64,
        count: ImU64,
        file: ImFileHandle,
    ) -> ImU64;
}
extern "C" {
    #[link_name = "\u{1}?ImFileWrite@@YA_KPEBX_K1PEAU_iobuf@@@Z"]
    pub fn ImFileWrite(
        data: *const ::std::os::raw::c_void,
        size: ImU64,
        count: ImU64,
        file: ImFileHandle,
    ) -> ImU64;
}
extern "C" {
    #[link_name = "\u{1}?ImFileLoadToMemory@@YAPEAXPEBD0PEA_KH@Z"]
    pub fn ImFileLoadToMemory(
        filename: *const ::std::os::raw::c_char,
        mode: *const ::std::os::raw::c_char,
        out_file_size: *mut size_t,
        padding_bytes: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}?ImBezierCalc@@YA?AUImVec2@@AEBU1@000M@Z"]
    pub fn ImBezierCalc(
        p1: *const ImVec2,
        p2: *const ImVec2,
        p3: *const ImVec2,
        p4: *const ImVec2,
        t: f32,
    ) -> ImVec2;
}
extern "C" {
    #[link_name = "\u{1}?ImBezierClosestPoint@@YA?AUImVec2@@AEBU1@0000H@Z"]
    pub fn ImBezierClosestPoint(
        p1: *const ImVec2,
        p2: *const ImVec2,
        p3: *const ImVec2,
        p4: *const ImVec2,
        p: *const ImVec2,
        num_segments: ::std::os::raw::c_int,
    ) -> ImVec2;
}
extern "C" {
    #[link_name = "\u{1}?ImBezierClosestPointCasteljau@@YA?AUImVec2@@AEBU1@0000M@Z"]
    pub fn ImBezierClosestPointCasteljau(
        p1: *const ImVec2,
        p2: *const ImVec2,
        p3: *const ImVec2,
        p4: *const ImVec2,
        p: *const ImVec2,
        tess_tol: f32,
    ) -> ImVec2;
}
extern "C" {
    #[link_name = "\u{1}?ImLineClosestPoint@@YA?AUImVec2@@AEBU1@00@Z"]
    pub fn ImLineClosestPoint(a: *const ImVec2, b: *const ImVec2, p: *const ImVec2) -> ImVec2;
}
extern "C" {
    #[link_name = "\u{1}?ImTriangleContainsPoint@@YA_NAEBUImVec2@@000@Z"]
    pub fn ImTriangleContainsPoint(
        a: *const ImVec2,
        b: *const ImVec2,
        c: *const ImVec2,
        p: *const ImVec2,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?ImTriangleClosestPoint@@YA?AUImVec2@@AEBU1@000@Z"]
    pub fn ImTriangleClosestPoint(
        a: *const ImVec2,
        b: *const ImVec2,
        c: *const ImVec2,
        p: *const ImVec2,
    ) -> ImVec2;
}
extern "C" {
    #[link_name = "\u{1}?ImTriangleBarycentricCoords@@YAXAEBUImVec2@@000AEAM11@Z"]
    pub fn ImTriangleBarycentricCoords(
        a: *const ImVec2,
        b: *const ImVec2,
        c: *const ImVec2,
        p: *const ImVec2,
        out_u: *mut f32,
        out_v: *mut f32,
        out_w: *mut f32,
    );
}
extern "C" {
    #[link_name = "\u{1}?ImGetDirQuadrantFromDelta@@YAHMM@Z"]
    pub fn ImGetDirQuadrantFromDelta(dx: f32, dy: f32) -> ImGuiDir;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVec1 {
    pub x: f32,
}
#[test]
fn bindgen_test_layout_ImVec1() {
    assert_eq!(
        ::std::mem::size_of::<ImVec1>(),
        4usize,
        concat!("Size of: ", stringify!(ImVec1))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVec1>(),
        4usize,
        concat!("Alignment of ", stringify!(ImVec1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVec1>())).x as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(ImVec1), "::", stringify!(x))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVec2ih {
    pub x: ::std::os::raw::c_short,
    pub y: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_ImVec2ih() {
    assert_eq!(
        ::std::mem::size_of::<ImVec2ih>(),
        4usize,
        concat!("Size of: ", stringify!(ImVec2ih))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVec2ih>(),
        2usize,
        concat!("Alignment of ", stringify!(ImVec2ih))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVec2ih>())).x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVec2ih),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVec2ih>())).y as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVec2ih),
            "::",
            stringify!(y)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImRect {
    pub Min: ImVec2,
    pub Max: ImVec2,
}
#[test]
fn bindgen_test_layout_ImRect() {
    assert_eq!(
        ::std::mem::size_of::<ImRect>(),
        16usize,
        concat!("Size of: ", stringify!(ImRect))
    );
    assert_eq!(
        ::std::mem::align_of::<ImRect>(),
        4usize,
        concat!("Alignment of ", stringify!(ImRect))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImRect>())).Min as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImRect),
            "::",
            stringify!(Min)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImRect>())).Max as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImRect),
            "::",
            stringify!(Max)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct ImBitVector {
    pub Storage: ImVector<ImU32>,
}
#[test]
fn bindgen_test_layout_ImBitVector() {
    assert_eq!(
        ::std::mem::size_of::<ImBitVector>(),
        16usize,
        concat!("Size of: ", stringify!(ImBitVector))
    );
    assert_eq!(
        ::std::mem::align_of::<ImBitVector>(),
        8usize,
        concat!("Alignment of ", stringify!(ImBitVector))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImBitVector>())).Storage as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImBitVector),
            "::",
            stringify!(Storage)
        )
    );
}
pub type ImPoolIdx = ::std::os::raw::c_int;
#[repr(C)]
pub struct ImPool<T> {
    pub Buf: ImVector<T>,
    pub Map: ImGuiStorage,
    pub FreeIdx: ImPoolIdx,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<T>>,
}
#[repr(C)]
#[derive(Debug)]
pub struct ImChunkStream {
    pub Buf: ImVector<::std::os::raw::c_char>,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ImDrawListSharedData {
    pub TexUvWhitePixel: ImVec2,
    pub Font: *mut ImFont,
    pub FontSize: f32,
    pub CurveTessellationTol: f32,
    pub CircleSegmentMaxError: f32,
    pub ClipRectFullscreen: ImVec4,
    pub InitialFlags: ImDrawListFlags,
    pub ArcFastVtx: [ImVec2; 12usize],
    pub CircleSegmentCounts: [ImU8; 64usize],
    pub TexUvLines: *const ImVec4,
}
#[test]
fn bindgen_test_layout_ImDrawListSharedData() {
    assert_eq!(
        ::std::mem::size_of::<ImDrawListSharedData>(),
        216usize,
        concat!("Size of: ", stringify!(ImDrawListSharedData))
    );
    assert_eq!(
        ::std::mem::align_of::<ImDrawListSharedData>(),
        8usize,
        concat!("Alignment of ", stringify!(ImDrawListSharedData))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImDrawListSharedData>())).TexUvWhitePixel as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawListSharedData),
            "::",
            stringify!(TexUvWhitePixel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImDrawListSharedData>())).Font as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawListSharedData),
            "::",
            stringify!(Font)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImDrawListSharedData>())).FontSize as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawListSharedData),
            "::",
            stringify!(FontSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImDrawListSharedData>())).CurveTessellationTol as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawListSharedData),
            "::",
            stringify!(CurveTessellationTol)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImDrawListSharedData>())).CircleSegmentMaxError as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawListSharedData),
            "::",
            stringify!(CircleSegmentMaxError)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImDrawListSharedData>())).ClipRectFullscreen as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawListSharedData),
            "::",
            stringify!(ClipRectFullscreen)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImDrawListSharedData>())).InitialFlags as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawListSharedData),
            "::",
            stringify!(InitialFlags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImDrawListSharedData>())).ArcFastVtx as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawListSharedData),
            "::",
            stringify!(ArcFastVtx)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImDrawListSharedData>())).CircleSegmentCounts as *const _
                as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawListSharedData),
            "::",
            stringify!(CircleSegmentCounts)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImDrawListSharedData>())).TexUvLines as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawListSharedData),
            "::",
            stringify!(TexUvLines)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}?SetCircleSegmentMaxError@ImDrawListSharedData@@QEAAXM@Z"]
    pub fn ImDrawListSharedData_SetCircleSegmentMaxError(
        this: *mut ImDrawListSharedData,
        max_error: f32,
    );
}
extern "C" {
    #[link_name = "\u{1}??0ImDrawListSharedData@@QEAA@XZ"]
    pub fn ImDrawListSharedData_ImDrawListSharedData(this: *mut ImDrawListSharedData);
}
impl ImDrawListSharedData {
    #[inline]
    pub unsafe fn SetCircleSegmentMaxError(&mut self, max_error: f32) {
        ImDrawListSharedData_SetCircleSegmentMaxError(self, max_error)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        ImDrawListSharedData_ImDrawListSharedData(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
}
#[repr(C)]
#[derive(Debug)]
pub struct ImDrawDataBuilder {
    pub Layers: [ImVector<*mut ImDrawList>; 2usize],
}
#[test]
fn bindgen_test_layout_ImDrawDataBuilder() {
    assert_eq!(
        ::std::mem::size_of::<ImDrawDataBuilder>(),
        32usize,
        concat!("Size of: ", stringify!(ImDrawDataBuilder))
    );
    assert_eq!(
        ::std::mem::align_of::<ImDrawDataBuilder>(),
        8usize,
        concat!("Alignment of ", stringify!(ImDrawDataBuilder))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImDrawDataBuilder>())).Layers as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawDataBuilder),
            "::",
            stringify!(Layers)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}?FlattenIntoSingleLayer@ImDrawDataBuilder@@QEAAXXZ"]
    pub fn ImDrawDataBuilder_FlattenIntoSingleLayer(this: *mut ImDrawDataBuilder);
}
impl ImDrawDataBuilder {
    #[inline]
    pub unsafe fn FlattenIntoSingleLayer(&mut self) {
        ImDrawDataBuilder_FlattenIntoSingleLayer(self)
    }
}
pub const ImGuiItemFlags_None: ImGuiItemFlags_ = 0;
pub const ImGuiItemFlags_NoTabStop: ImGuiItemFlags_ = 1;
pub const ImGuiItemFlags_ButtonRepeat: ImGuiItemFlags_ = 2;
pub const ImGuiItemFlags_Disabled: ImGuiItemFlags_ = 4;
pub const ImGuiItemFlags_NoNav: ImGuiItemFlags_ = 8;
pub const ImGuiItemFlags_NoNavDefaultFocus: ImGuiItemFlags_ = 16;
pub const ImGuiItemFlags_SelectableDontClosePopup: ImGuiItemFlags_ = 32;
pub const ImGuiItemFlags_MixedValue: ImGuiItemFlags_ = 64;
pub const ImGuiItemFlags_ReadOnly: ImGuiItemFlags_ = 128;
pub const ImGuiItemFlags_Default_: ImGuiItemFlags_ = 0;
pub type ImGuiItemFlags_ = ::std::os::raw::c_int;
pub const ImGuiItemStatusFlags_None: ImGuiItemStatusFlags_ = 0;
pub const ImGuiItemStatusFlags_HoveredRect: ImGuiItemStatusFlags_ = 1;
pub const ImGuiItemStatusFlags_HasDisplayRect: ImGuiItemStatusFlags_ = 2;
pub const ImGuiItemStatusFlags_Edited: ImGuiItemStatusFlags_ = 4;
pub const ImGuiItemStatusFlags_ToggledSelection: ImGuiItemStatusFlags_ = 8;
pub const ImGuiItemStatusFlags_ToggledOpen: ImGuiItemStatusFlags_ = 16;
pub const ImGuiItemStatusFlags_HasDeactivated: ImGuiItemStatusFlags_ = 32;
pub const ImGuiItemStatusFlags_Deactivated: ImGuiItemStatusFlags_ = 64;
pub type ImGuiItemStatusFlags_ = ::std::os::raw::c_int;
pub const ImGuiButtonFlags_PressedOnClick: ImGuiButtonFlagsPrivate_ = 16;
pub const ImGuiButtonFlags_PressedOnClickRelease: ImGuiButtonFlagsPrivate_ = 32;
pub const ImGuiButtonFlags_PressedOnClickReleaseAnywhere: ImGuiButtonFlagsPrivate_ = 64;
pub const ImGuiButtonFlags_PressedOnRelease: ImGuiButtonFlagsPrivate_ = 128;
pub const ImGuiButtonFlags_PressedOnDoubleClick: ImGuiButtonFlagsPrivate_ = 256;
pub const ImGuiButtonFlags_PressedOnDragDropHold: ImGuiButtonFlagsPrivate_ = 512;
pub const ImGuiButtonFlags_Repeat: ImGuiButtonFlagsPrivate_ = 1024;
pub const ImGuiButtonFlags_FlattenChildren: ImGuiButtonFlagsPrivate_ = 2048;
pub const ImGuiButtonFlags_AllowItemOverlap: ImGuiButtonFlagsPrivate_ = 4096;
pub const ImGuiButtonFlags_DontClosePopups: ImGuiButtonFlagsPrivate_ = 8192;
pub const ImGuiButtonFlags_Disabled: ImGuiButtonFlagsPrivate_ = 16384;
pub const ImGuiButtonFlags_AlignTextBaseLine: ImGuiButtonFlagsPrivate_ = 32768;
pub const ImGuiButtonFlags_NoKeyModifiers: ImGuiButtonFlagsPrivate_ = 65536;
pub const ImGuiButtonFlags_NoHoldingActiveId: ImGuiButtonFlagsPrivate_ = 131072;
pub const ImGuiButtonFlags_NoNavFocus: ImGuiButtonFlagsPrivate_ = 262144;
pub const ImGuiButtonFlags_NoHoveredOnFocus: ImGuiButtonFlagsPrivate_ = 524288;
pub const ImGuiButtonFlags_PressedOnMask_: ImGuiButtonFlagsPrivate_ = 1008;
pub const ImGuiButtonFlags_PressedOnDefault_: ImGuiButtonFlagsPrivate_ = 32;
pub type ImGuiButtonFlagsPrivate_ = ::std::os::raw::c_int;
pub const ImGuiSliderFlags_Vertical: ImGuiSliderFlagsPrivate_ = 1048576;
pub const ImGuiSliderFlags_ReadOnly: ImGuiSliderFlagsPrivate_ = 2097152;
pub type ImGuiSliderFlagsPrivate_ = ::std::os::raw::c_int;
pub const ImGuiSelectableFlags_NoHoldingActiveID: ImGuiSelectableFlagsPrivate_ = 1048576;
pub const ImGuiSelectableFlags_SelectOnClick: ImGuiSelectableFlagsPrivate_ = 2097152;
pub const ImGuiSelectableFlags_SelectOnRelease: ImGuiSelectableFlagsPrivate_ = 4194304;
pub const ImGuiSelectableFlags_SpanAvailWidth: ImGuiSelectableFlagsPrivate_ = 8388608;
pub const ImGuiSelectableFlags_DrawHoveredWhenHeld: ImGuiSelectableFlagsPrivate_ = 16777216;
pub const ImGuiSelectableFlags_SetNavIdOnHover: ImGuiSelectableFlagsPrivate_ = 33554432;
pub const ImGuiSelectableFlags_NoPadWithHalfSpacing: ImGuiSelectableFlagsPrivate_ = 67108864;
pub type ImGuiSelectableFlagsPrivate_ = ::std::os::raw::c_int;
pub const ImGuiTreeNodeFlags_ClipLabelForTrailingButton: ImGuiTreeNodeFlagsPrivate_ = 1048576;
pub type ImGuiTreeNodeFlagsPrivate_ = ::std::os::raw::c_int;
pub const ImGuiSeparatorFlags_None: ImGuiSeparatorFlags_ = 0;
pub const ImGuiSeparatorFlags_Horizontal: ImGuiSeparatorFlags_ = 1;
pub const ImGuiSeparatorFlags_Vertical: ImGuiSeparatorFlags_ = 2;
pub const ImGuiSeparatorFlags_SpanAllColumns: ImGuiSeparatorFlags_ = 4;
pub type ImGuiSeparatorFlags_ = ::std::os::raw::c_int;
pub const ImGuiTextFlags_None: ImGuiTextFlags_ = 0;
pub const ImGuiTextFlags_NoWidthForLargeClippedText: ImGuiTextFlags_ = 1;
pub type ImGuiTextFlags_ = ::std::os::raw::c_int;
pub const ImGuiTooltipFlags_None: ImGuiTooltipFlags_ = 0;
pub const ImGuiTooltipFlags_OverridePreviousTooltip: ImGuiTooltipFlags_ = 1;
pub type ImGuiTooltipFlags_ = ::std::os::raw::c_int;
pub const ImGuiLayoutType_Horizontal: ImGuiLayoutType_ = 0;
pub const ImGuiLayoutType_Vertical: ImGuiLayoutType_ = 1;
pub type ImGuiLayoutType_ = ::std::os::raw::c_int;
pub const ImGuiLogType_None: ImGuiLogType = 0;
pub const ImGuiLogType_TTY: ImGuiLogType = 1;
pub const ImGuiLogType_File: ImGuiLogType = 2;
pub const ImGuiLogType_Buffer: ImGuiLogType = 3;
pub const ImGuiLogType_Clipboard: ImGuiLogType = 4;
pub type ImGuiLogType = ::std::os::raw::c_int;
pub const ImGuiAxis_None: ImGuiAxis = -1;
pub const ImGuiAxis_X: ImGuiAxis = 0;
pub const ImGuiAxis_Y: ImGuiAxis = 1;
pub type ImGuiAxis = ::std::os::raw::c_int;
pub const ImGuiPlotType_Lines: ImGuiPlotType = 0;
pub const ImGuiPlotType_Histogram: ImGuiPlotType = 1;
pub type ImGuiPlotType = ::std::os::raw::c_int;
pub const ImGuiInputSource_None: ImGuiInputSource = 0;
pub const ImGuiInputSource_Mouse: ImGuiInputSource = 1;
pub const ImGuiInputSource_Nav: ImGuiInputSource = 2;
pub const ImGuiInputSource_NavKeyboard: ImGuiInputSource = 3;
pub const ImGuiInputSource_NavGamepad: ImGuiInputSource = 4;
pub const ImGuiInputSource_COUNT: ImGuiInputSource = 5;
pub type ImGuiInputSource = ::std::os::raw::c_int;
pub const ImGuiInputReadMode_Down: ImGuiInputReadMode = 0;
pub const ImGuiInputReadMode_Pressed: ImGuiInputReadMode = 1;
pub const ImGuiInputReadMode_Released: ImGuiInputReadMode = 2;
pub const ImGuiInputReadMode_Repeat: ImGuiInputReadMode = 3;
pub const ImGuiInputReadMode_RepeatSlow: ImGuiInputReadMode = 4;
pub const ImGuiInputReadMode_RepeatFast: ImGuiInputReadMode = 5;
pub type ImGuiInputReadMode = ::std::os::raw::c_int;
pub const ImGuiNavHighlightFlags_None: ImGuiNavHighlightFlags_ = 0;
pub const ImGuiNavHighlightFlags_TypeDefault: ImGuiNavHighlightFlags_ = 1;
pub const ImGuiNavHighlightFlags_TypeThin: ImGuiNavHighlightFlags_ = 2;
pub const ImGuiNavHighlightFlags_AlwaysDraw: ImGuiNavHighlightFlags_ = 4;
pub const ImGuiNavHighlightFlags_NoRounding: ImGuiNavHighlightFlags_ = 8;
pub type ImGuiNavHighlightFlags_ = ::std::os::raw::c_int;
pub const ImGuiNavDirSourceFlags_None: ImGuiNavDirSourceFlags_ = 0;
pub const ImGuiNavDirSourceFlags_Keyboard: ImGuiNavDirSourceFlags_ = 1;
pub const ImGuiNavDirSourceFlags_PadDPad: ImGuiNavDirSourceFlags_ = 2;
pub const ImGuiNavDirSourceFlags_PadLStick: ImGuiNavDirSourceFlags_ = 4;
pub type ImGuiNavDirSourceFlags_ = ::std::os::raw::c_int;
pub const ImGuiNavMoveFlags_None: ImGuiNavMoveFlags_ = 0;
pub const ImGuiNavMoveFlags_LoopX: ImGuiNavMoveFlags_ = 1;
pub const ImGuiNavMoveFlags_LoopY: ImGuiNavMoveFlags_ = 2;
pub const ImGuiNavMoveFlags_WrapX: ImGuiNavMoveFlags_ = 4;
pub const ImGuiNavMoveFlags_WrapY: ImGuiNavMoveFlags_ = 8;
pub const ImGuiNavMoveFlags_AllowCurrentNavId: ImGuiNavMoveFlags_ = 16;
pub const ImGuiNavMoveFlags_AlsoScoreVisibleSet: ImGuiNavMoveFlags_ = 32;
pub const ImGuiNavMoveFlags_ScrollToEdge: ImGuiNavMoveFlags_ = 64;
pub type ImGuiNavMoveFlags_ = ::std::os::raw::c_int;
pub const ImGuiNavForward_None: ImGuiNavForward = 0;
pub const ImGuiNavForward_ForwardQueued: ImGuiNavForward = 1;
pub const ImGuiNavForward_ForwardActive: ImGuiNavForward = 2;
pub type ImGuiNavForward = ::std::os::raw::c_int;
pub const ImGuiNavLayer_Main: ImGuiNavLayer = 0;
pub const ImGuiNavLayer_Menu: ImGuiNavLayer = 1;
pub const ImGuiNavLayer_COUNT: ImGuiNavLayer = 2;
pub type ImGuiNavLayer = ::std::os::raw::c_int;
pub const ImGuiPopupPositionPolicy_Default: ImGuiPopupPositionPolicy = 0;
pub const ImGuiPopupPositionPolicy_ComboBox: ImGuiPopupPositionPolicy = 1;
pub const ImGuiPopupPositionPolicy_Tooltip: ImGuiPopupPositionPolicy = 2;
pub type ImGuiPopupPositionPolicy = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiDataTypeTempStorage {
    pub Data: [ImU8; 8usize],
}
#[test]
fn bindgen_test_layout_ImGuiDataTypeTempStorage() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiDataTypeTempStorage>(),
        8usize,
        concat!("Size of: ", stringify!(ImGuiDataTypeTempStorage))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiDataTypeTempStorage>(),
        1usize,
        concat!("Alignment of ", stringify!(ImGuiDataTypeTempStorage))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiDataTypeTempStorage>())).Data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiDataTypeTempStorage),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiDataTypeInfo {
    pub Size: size_t,
    pub Name: *const ::std::os::raw::c_char,
    pub PrintFmt: *const ::std::os::raw::c_char,
    pub ScanFmt: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_ImGuiDataTypeInfo() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiDataTypeInfo>(),
        32usize,
        concat!("Size of: ", stringify!(ImGuiDataTypeInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiDataTypeInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiDataTypeInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiDataTypeInfo>())).Size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiDataTypeInfo),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiDataTypeInfo>())).Name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiDataTypeInfo),
            "::",
            stringify!(Name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiDataTypeInfo>())).PrintFmt as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiDataTypeInfo),
            "::",
            stringify!(PrintFmt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiDataTypeInfo>())).ScanFmt as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiDataTypeInfo),
            "::",
            stringify!(ScanFmt)
        )
    );
}
pub const ImGuiDataType_String: ImGuiDataTypePrivate_ = 11;
pub const ImGuiDataType_Pointer: ImGuiDataTypePrivate_ = 12;
pub const ImGuiDataType_ID: ImGuiDataTypePrivate_ = 13;
pub type ImGuiDataTypePrivate_ = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiColorMod {
    pub Col: ImGuiCol,
    pub BackupValue: ImVec4,
}
#[test]
fn bindgen_test_layout_ImGuiColorMod() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiColorMod>(),
        20usize,
        concat!("Size of: ", stringify!(ImGuiColorMod))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiColorMod>(),
        4usize,
        concat!("Alignment of ", stringify!(ImGuiColorMod))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiColorMod>())).Col as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiColorMod),
            "::",
            stringify!(Col)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiColorMod>())).BackupValue as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiColorMod),
            "::",
            stringify!(BackupValue)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ImGuiStyleMod {
    pub VarIdx: ImGuiStyleVar,
    pub __bindgen_anon_1: ImGuiStyleMod__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ImGuiStyleMod__bindgen_ty_1 {
    pub BackupInt: [::std::os::raw::c_int; 2usize],
    pub BackupFloat: [f32; 2usize],
    _bindgen_union_align: [u32; 2usize],
}
#[test]
fn bindgen_test_layout_ImGuiStyleMod__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiStyleMod__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(ImGuiStyleMod__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiStyleMod__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(ImGuiStyleMod__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiStyleMod__bindgen_ty_1>())).BackupInt as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyleMod__bindgen_ty_1),
            "::",
            stringify!(BackupInt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiStyleMod__bindgen_ty_1>())).BackupFloat as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyleMod__bindgen_ty_1),
            "::",
            stringify!(BackupFloat)
        )
    );
}
#[test]
fn bindgen_test_layout_ImGuiStyleMod() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiStyleMod>(),
        12usize,
        concat!("Size of: ", stringify!(ImGuiStyleMod))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiStyleMod>(),
        4usize,
        concat!("Alignment of ", stringify!(ImGuiStyleMod))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiStyleMod>())).VarIdx as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyleMod),
            "::",
            stringify!(VarIdx)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiGroupData {
    pub WindowID: ImGuiID,
    pub BackupCursorPos: ImVec2,
    pub BackupCursorMaxPos: ImVec2,
    pub BackupIndent: ImVec1,
    pub BackupGroupOffset: ImVec1,
    pub BackupCurrLineSize: ImVec2,
    pub BackupCurrLineTextBaseOffset: f32,
    pub BackupActiveIdIsAlive: ImGuiID,
    pub BackupActiveIdPreviousFrameIsAlive: bool,
    pub EmitItem: bool,
}
#[test]
fn bindgen_test_layout_ImGuiGroupData() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiGroupData>(),
        48usize,
        concat!("Size of: ", stringify!(ImGuiGroupData))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiGroupData>(),
        4usize,
        concat!("Alignment of ", stringify!(ImGuiGroupData))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiGroupData>())).WindowID as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiGroupData),
            "::",
            stringify!(WindowID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiGroupData>())).BackupCursorPos as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiGroupData),
            "::",
            stringify!(BackupCursorPos)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiGroupData>())).BackupCursorMaxPos as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiGroupData),
            "::",
            stringify!(BackupCursorMaxPos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiGroupData>())).BackupIndent as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiGroupData),
            "::",
            stringify!(BackupIndent)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiGroupData>())).BackupGroupOffset as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiGroupData),
            "::",
            stringify!(BackupGroupOffset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiGroupData>())).BackupCurrLineSize as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiGroupData),
            "::",
            stringify!(BackupCurrLineSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiGroupData>())).BackupCurrLineTextBaseOffset as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiGroupData),
            "::",
            stringify!(BackupCurrLineTextBaseOffset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiGroupData>())).BackupActiveIdIsAlive as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiGroupData),
            "::",
            stringify!(BackupActiveIdIsAlive)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiGroupData>())).BackupActiveIdPreviousFrameIsAlive
                as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiGroupData),
            "::",
            stringify!(BackupActiveIdPreviousFrameIsAlive)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiGroupData>())).EmitItem as *const _ as usize },
        45usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiGroupData),
            "::",
            stringify!(EmitItem)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiMenuColumns {
    pub Spacing: f32,
    pub Width: f32,
    pub NextWidth: f32,
    pub Pos: [f32; 3usize],
    pub NextWidths: [f32; 3usize],
}
#[test]
fn bindgen_test_layout_ImGuiMenuColumns() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiMenuColumns>(),
        36usize,
        concat!("Size of: ", stringify!(ImGuiMenuColumns))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiMenuColumns>(),
        4usize,
        concat!("Alignment of ", stringify!(ImGuiMenuColumns))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiMenuColumns>())).Spacing as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiMenuColumns),
            "::",
            stringify!(Spacing)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiMenuColumns>())).Width as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiMenuColumns),
            "::",
            stringify!(Width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiMenuColumns>())).NextWidth as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiMenuColumns),
            "::",
            stringify!(NextWidth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiMenuColumns>())).Pos as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiMenuColumns),
            "::",
            stringify!(Pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiMenuColumns>())).NextWidths as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiMenuColumns),
            "::",
            stringify!(NextWidths)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}?Update@ImGuiMenuColumns@@QEAAXHM_N@Z"]
    pub fn ImGuiMenuColumns_Update(
        this: *mut ImGuiMenuColumns,
        count: ::std::os::raw::c_int,
        spacing: f32,
        clear: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?DeclColumns@ImGuiMenuColumns@@QEAAMMMM@Z"]
    pub fn ImGuiMenuColumns_DeclColumns(
        this: *mut ImGuiMenuColumns,
        w0: f32,
        w1: f32,
        w2: f32,
    ) -> f32;
}
extern "C" {
    #[link_name = "\u{1}?CalcExtraSpace@ImGuiMenuColumns@@QEBAMM@Z"]
    pub fn ImGuiMenuColumns_CalcExtraSpace(this: *const ImGuiMenuColumns, avail_w: f32) -> f32;
}
impl ImGuiMenuColumns {
    #[inline]
    pub unsafe fn Update(&mut self, count: ::std::os::raw::c_int, spacing: f32, clear: bool) {
        ImGuiMenuColumns_Update(self, count, spacing, clear)
    }
    #[inline]
    pub unsafe fn DeclColumns(&mut self, w0: f32, w1: f32, w2: f32) -> f32 {
        ImGuiMenuColumns_DeclColumns(self, w0, w1, w2)
    }
    #[inline]
    pub unsafe fn CalcExtraSpace(&self, avail_w: f32) -> f32 {
        ImGuiMenuColumns_CalcExtraSpace(self, avail_w)
    }
}
#[repr(C)]
pub struct ImGuiInputTextState {
    pub ID: ImGuiID,
    pub CurLenW: ::std::os::raw::c_int,
    pub CurLenA: ::std::os::raw::c_int,
    pub TextW: ImVector<ImWchar>,
    pub TextA: ImVector<::std::os::raw::c_char>,
    pub InitialTextA: ImVector<::std::os::raw::c_char>,
    pub TextAIsValid: bool,
    pub BufCapacityA: ::std::os::raw::c_int,
    pub ScrollX: f32,
    pub Stb: ImStb_STB_TexteditState,
    pub CursorAnim: f32,
    pub CursorFollow: bool,
    pub SelectedAllMouseLock: bool,
    pub Edited: bool,
    pub UserFlags: ImGuiInputTextFlags,
    pub UserCallback: ImGuiInputTextCallback,
    pub UserCallbackData: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_ImGuiInputTextState() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiInputTextState>(),
        3736usize,
        concat!("Size of: ", stringify!(ImGuiInputTextState))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiInputTextState>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiInputTextState))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiInputTextState>())).ID as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputTextState),
            "::",
            stringify!(ID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiInputTextState>())).CurLenW as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputTextState),
            "::",
            stringify!(CurLenW)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiInputTextState>())).CurLenA as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputTextState),
            "::",
            stringify!(CurLenA)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiInputTextState>())).TextW as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputTextState),
            "::",
            stringify!(TextW)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiInputTextState>())).TextA as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputTextState),
            "::",
            stringify!(TextA)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiInputTextState>())).InitialTextA as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputTextState),
            "::",
            stringify!(InitialTextA)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiInputTextState>())).TextAIsValid as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputTextState),
            "::",
            stringify!(TextAIsValid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiInputTextState>())).BufCapacityA as *const _ as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputTextState),
            "::",
            stringify!(BufCapacityA)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiInputTextState>())).ScrollX as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputTextState),
            "::",
            stringify!(ScrollX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiInputTextState>())).Stb as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputTextState),
            "::",
            stringify!(Stb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiInputTextState>())).CursorAnim as *const _ as usize },
        3704usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputTextState),
            "::",
            stringify!(CursorAnim)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiInputTextState>())).CursorFollow as *const _ as usize
        },
        3708usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputTextState),
            "::",
            stringify!(CursorFollow)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiInputTextState>())).SelectedAllMouseLock as *const _
                as usize
        },
        3709usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputTextState),
            "::",
            stringify!(SelectedAllMouseLock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiInputTextState>())).Edited as *const _ as usize },
        3710usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputTextState),
            "::",
            stringify!(Edited)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiInputTextState>())).UserFlags as *const _ as usize },
        3712usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputTextState),
            "::",
            stringify!(UserFlags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiInputTextState>())).UserCallback as *const _ as usize
        },
        3720usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputTextState),
            "::",
            stringify!(UserCallback)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiInputTextState>())).UserCallbackData as *const _ as usize
        },
        3728usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputTextState),
            "::",
            stringify!(UserCallbackData)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}?OnKeyPressed@ImGuiInputTextState@@QEAAXH@Z"]
    pub fn ImGuiInputTextState_OnKeyPressed(
        this: *mut ImGuiInputTextState,
        key: ::std::os::raw::c_int,
    );
}
impl ImGuiInputTextState {
    #[inline]
    pub unsafe fn OnKeyPressed(&mut self, key: ::std::os::raw::c_int) {
        ImGuiInputTextState_OnKeyPressed(self, key)
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiPopupData {
    pub PopupId: ImGuiID,
    pub Window: *mut ImGuiWindow,
    pub SourceWindow: *mut ImGuiWindow,
    pub OpenFrameCount: ::std::os::raw::c_int,
    pub OpenParentId: ImGuiID,
    pub OpenPopupPos: ImVec2,
    pub OpenMousePos: ImVec2,
}
#[test]
fn bindgen_test_layout_ImGuiPopupData() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiPopupData>(),
        48usize,
        concat!("Size of: ", stringify!(ImGuiPopupData))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiPopupData>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiPopupData))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiPopupData>())).PopupId as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPopupData),
            "::",
            stringify!(PopupId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiPopupData>())).Window as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPopupData),
            "::",
            stringify!(Window)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiPopupData>())).SourceWindow as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPopupData),
            "::",
            stringify!(SourceWindow)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiPopupData>())).OpenFrameCount as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPopupData),
            "::",
            stringify!(OpenFrameCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiPopupData>())).OpenParentId as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPopupData),
            "::",
            stringify!(OpenParentId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiPopupData>())).OpenPopupPos as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPopupData),
            "::",
            stringify!(OpenPopupPos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiPopupData>())).OpenMousePos as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPopupData),
            "::",
            stringify!(OpenMousePos)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiNavMoveResult {
    pub Window: *mut ImGuiWindow,
    pub ID: ImGuiID,
    pub FocusScopeId: ImGuiID,
    pub DistBox: f32,
    pub DistCenter: f32,
    pub DistAxial: f32,
    pub RectRel: ImRect,
}
#[test]
fn bindgen_test_layout_ImGuiNavMoveResult() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiNavMoveResult>(),
        48usize,
        concat!("Size of: ", stringify!(ImGuiNavMoveResult))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiNavMoveResult>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiNavMoveResult))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiNavMoveResult>())).Window as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiNavMoveResult),
            "::",
            stringify!(Window)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiNavMoveResult>())).ID as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiNavMoveResult),
            "::",
            stringify!(ID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiNavMoveResult>())).FocusScopeId as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiNavMoveResult),
            "::",
            stringify!(FocusScopeId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiNavMoveResult>())).DistBox as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiNavMoveResult),
            "::",
            stringify!(DistBox)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiNavMoveResult>())).DistCenter as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiNavMoveResult),
            "::",
            stringify!(DistCenter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiNavMoveResult>())).DistAxial as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiNavMoveResult),
            "::",
            stringify!(DistAxial)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiNavMoveResult>())).RectRel as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiNavMoveResult),
            "::",
            stringify!(RectRel)
        )
    );
}
pub const ImGuiNextWindowDataFlags_None: ImGuiNextWindowDataFlags_ = 0;
pub const ImGuiNextWindowDataFlags_HasPos: ImGuiNextWindowDataFlags_ = 1;
pub const ImGuiNextWindowDataFlags_HasSize: ImGuiNextWindowDataFlags_ = 2;
pub const ImGuiNextWindowDataFlags_HasContentSize: ImGuiNextWindowDataFlags_ = 4;
pub const ImGuiNextWindowDataFlags_HasCollapsed: ImGuiNextWindowDataFlags_ = 8;
pub const ImGuiNextWindowDataFlags_HasSizeConstraint: ImGuiNextWindowDataFlags_ = 16;
pub const ImGuiNextWindowDataFlags_HasFocus: ImGuiNextWindowDataFlags_ = 32;
pub const ImGuiNextWindowDataFlags_HasBgAlpha: ImGuiNextWindowDataFlags_ = 64;
pub const ImGuiNextWindowDataFlags_HasScroll: ImGuiNextWindowDataFlags_ = 128;
pub type ImGuiNextWindowDataFlags_ = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiNextWindowData {
    pub Flags: ImGuiNextWindowDataFlags,
    pub PosCond: ImGuiCond,
    pub SizeCond: ImGuiCond,
    pub CollapsedCond: ImGuiCond,
    pub PosVal: ImVec2,
    pub PosPivotVal: ImVec2,
    pub SizeVal: ImVec2,
    pub ContentSizeVal: ImVec2,
    pub ScrollVal: ImVec2,
    pub CollapsedVal: bool,
    pub SizeConstraintRect: ImRect,
    pub SizeCallback: ImGuiSizeCallback,
    pub SizeCallbackUserData: *mut ::std::os::raw::c_void,
    pub BgAlphaVal: f32,
    pub MenuBarOffsetMinVal: ImVec2,
}
#[test]
fn bindgen_test_layout_ImGuiNextWindowData() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiNextWindowData>(),
        112usize,
        concat!("Size of: ", stringify!(ImGuiNextWindowData))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiNextWindowData>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiNextWindowData))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiNextWindowData>())).Flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiNextWindowData),
            "::",
            stringify!(Flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiNextWindowData>())).PosCond as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiNextWindowData),
            "::",
            stringify!(PosCond)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiNextWindowData>())).SizeCond as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiNextWindowData),
            "::",
            stringify!(SizeCond)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiNextWindowData>())).CollapsedCond as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiNextWindowData),
            "::",
            stringify!(CollapsedCond)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiNextWindowData>())).PosVal as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiNextWindowData),
            "::",
            stringify!(PosVal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiNextWindowData>())).PosPivotVal as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiNextWindowData),
            "::",
            stringify!(PosPivotVal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiNextWindowData>())).SizeVal as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiNextWindowData),
            "::",
            stringify!(SizeVal)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiNextWindowData>())).ContentSizeVal as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiNextWindowData),
            "::",
            stringify!(ContentSizeVal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiNextWindowData>())).ScrollVal as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiNextWindowData),
            "::",
            stringify!(ScrollVal)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiNextWindowData>())).CollapsedVal as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiNextWindowData),
            "::",
            stringify!(CollapsedVal)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiNextWindowData>())).SizeConstraintRect as *const _ as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiNextWindowData),
            "::",
            stringify!(SizeConstraintRect)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiNextWindowData>())).SizeCallback as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiNextWindowData),
            "::",
            stringify!(SizeCallback)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiNextWindowData>())).SizeCallbackUserData as *const _
                as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiNextWindowData),
            "::",
            stringify!(SizeCallbackUserData)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiNextWindowData>())).BgAlphaVal as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiNextWindowData),
            "::",
            stringify!(BgAlphaVal)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiNextWindowData>())).MenuBarOffsetMinVal as *const _ as usize
        },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiNextWindowData),
            "::",
            stringify!(MenuBarOffsetMinVal)
        )
    );
}
pub const ImGuiNextItemDataFlags_None: ImGuiNextItemDataFlags_ = 0;
pub const ImGuiNextItemDataFlags_HasWidth: ImGuiNextItemDataFlags_ = 1;
pub const ImGuiNextItemDataFlags_HasOpen: ImGuiNextItemDataFlags_ = 2;
pub type ImGuiNextItemDataFlags_ = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiNextItemData {
    pub Flags: ImGuiNextItemDataFlags,
    pub Width: f32,
    pub FocusScopeId: ImGuiID,
    pub OpenCond: ImGuiCond,
    pub OpenVal: bool,
}
#[test]
fn bindgen_test_layout_ImGuiNextItemData() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiNextItemData>(),
        20usize,
        concat!("Size of: ", stringify!(ImGuiNextItemData))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiNextItemData>(),
        4usize,
        concat!("Alignment of ", stringify!(ImGuiNextItemData))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiNextItemData>())).Flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiNextItemData),
            "::",
            stringify!(Flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiNextItemData>())).Width as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiNextItemData),
            "::",
            stringify!(Width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiNextItemData>())).FocusScopeId as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiNextItemData),
            "::",
            stringify!(FocusScopeId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiNextItemData>())).OpenCond as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiNextItemData),
            "::",
            stringify!(OpenCond)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiNextItemData>())).OpenVal as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiNextItemData),
            "::",
            stringify!(OpenVal)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiShrinkWidthItem {
    pub Index: ::std::os::raw::c_int,
    pub Width: f32,
}
#[test]
fn bindgen_test_layout_ImGuiShrinkWidthItem() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiShrinkWidthItem>(),
        8usize,
        concat!("Size of: ", stringify!(ImGuiShrinkWidthItem))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiShrinkWidthItem>(),
        4usize,
        concat!("Alignment of ", stringify!(ImGuiShrinkWidthItem))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiShrinkWidthItem>())).Index as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiShrinkWidthItem),
            "::",
            stringify!(Index)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiShrinkWidthItem>())).Width as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiShrinkWidthItem),
            "::",
            stringify!(Width)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiPtrOrIndex {
    pub Ptr: *mut ::std::os::raw::c_void,
    pub Index: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ImGuiPtrOrIndex() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiPtrOrIndex>(),
        16usize,
        concat!("Size of: ", stringify!(ImGuiPtrOrIndex))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiPtrOrIndex>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiPtrOrIndex))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiPtrOrIndex>())).Ptr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPtrOrIndex),
            "::",
            stringify!(Ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiPtrOrIndex>())).Index as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPtrOrIndex),
            "::",
            stringify!(Index)
        )
    );
}
pub const ImGuiOldColumnFlags_None: ImGuiOldColumnFlags_ = 0;
pub const ImGuiOldColumnFlags_NoBorder: ImGuiOldColumnFlags_ = 1;
pub const ImGuiOldColumnFlags_NoResize: ImGuiOldColumnFlags_ = 2;
pub const ImGuiOldColumnFlags_NoPreserveWidths: ImGuiOldColumnFlags_ = 4;
pub const ImGuiOldColumnFlags_NoForceWithinWindow: ImGuiOldColumnFlags_ = 8;
pub const ImGuiOldColumnFlags_GrowParentContentsSize: ImGuiOldColumnFlags_ = 16;
pub const ImGuiColumnsFlags_None: ImGuiOldColumnFlags_ = 0;
pub const ImGuiColumnsFlags_NoBorder: ImGuiOldColumnFlags_ = 1;
pub const ImGuiColumnsFlags_NoResize: ImGuiOldColumnFlags_ = 2;
pub const ImGuiColumnsFlags_NoPreserveWidths: ImGuiOldColumnFlags_ = 4;
pub const ImGuiColumnsFlags_NoForceWithinWindow: ImGuiOldColumnFlags_ = 8;
pub const ImGuiColumnsFlags_GrowParentContentsSize: ImGuiOldColumnFlags_ = 16;
pub type ImGuiOldColumnFlags_ = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiOldColumnData {
    pub OffsetNorm: f32,
    pub OffsetNormBeforeResize: f32,
    pub Flags: ImGuiOldColumnFlags,
    pub ClipRect: ImRect,
}
#[test]
fn bindgen_test_layout_ImGuiOldColumnData() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiOldColumnData>(),
        28usize,
        concat!("Size of: ", stringify!(ImGuiOldColumnData))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiOldColumnData>(),
        4usize,
        concat!("Alignment of ", stringify!(ImGuiOldColumnData))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiOldColumnData>())).OffsetNorm as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiOldColumnData),
            "::",
            stringify!(OffsetNorm)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiOldColumnData>())).OffsetNormBeforeResize as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiOldColumnData),
            "::",
            stringify!(OffsetNormBeforeResize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiOldColumnData>())).Flags as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiOldColumnData),
            "::",
            stringify!(Flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiOldColumnData>())).ClipRect as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiOldColumnData),
            "::",
            stringify!(ClipRect)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct ImGuiOldColumns {
    pub ID: ImGuiID,
    pub Flags: ImGuiOldColumnFlags,
    pub IsFirstFrame: bool,
    pub IsBeingResized: bool,
    pub Current: ::std::os::raw::c_int,
    pub Count: ::std::os::raw::c_int,
    pub OffMinX: f32,
    pub OffMaxX: f32,
    pub LineMinY: f32,
    pub LineMaxY: f32,
    pub HostCursorPosY: f32,
    pub HostCursorMaxPosX: f32,
    pub HostInitialClipRect: ImRect,
    pub HostBackupClipRect: ImRect,
    pub HostBackupParentWorkRect: ImRect,
    pub Columns: ImVector<ImGuiOldColumnData>,
    pub Splitter: ImDrawListSplitter,
}
#[test]
fn bindgen_test_layout_ImGuiOldColumns() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiOldColumns>(),
        136usize,
        concat!("Size of: ", stringify!(ImGuiOldColumns))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiOldColumns>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiOldColumns))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiOldColumns>())).ID as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiOldColumns),
            "::",
            stringify!(ID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiOldColumns>())).Flags as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiOldColumns),
            "::",
            stringify!(Flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiOldColumns>())).IsFirstFrame as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiOldColumns),
            "::",
            stringify!(IsFirstFrame)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiOldColumns>())).IsBeingResized as *const _ as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiOldColumns),
            "::",
            stringify!(IsBeingResized)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiOldColumns>())).Current as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiOldColumns),
            "::",
            stringify!(Current)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiOldColumns>())).Count as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiOldColumns),
            "::",
            stringify!(Count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiOldColumns>())).OffMinX as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiOldColumns),
            "::",
            stringify!(OffMinX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiOldColumns>())).OffMaxX as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiOldColumns),
            "::",
            stringify!(OffMaxX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiOldColumns>())).LineMinY as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiOldColumns),
            "::",
            stringify!(LineMinY)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiOldColumns>())).LineMaxY as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiOldColumns),
            "::",
            stringify!(LineMaxY)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiOldColumns>())).HostCursorPosY as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiOldColumns),
            "::",
            stringify!(HostCursorPosY)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiOldColumns>())).HostCursorMaxPosX as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiOldColumns),
            "::",
            stringify!(HostCursorMaxPosX)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiOldColumns>())).HostInitialClipRect as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiOldColumns),
            "::",
            stringify!(HostInitialClipRect)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiOldColumns>())).HostBackupClipRect as *const _ as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiOldColumns),
            "::",
            stringify!(HostBackupClipRect)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiOldColumns>())).HostBackupParentWorkRect as *const _
                as usize
        },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiOldColumns),
            "::",
            stringify!(HostBackupParentWorkRect)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiOldColumns>())).Columns as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiOldColumns),
            "::",
            stringify!(Columns)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiOldColumns>())).Splitter as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiOldColumns),
            "::",
            stringify!(Splitter)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiWindowSettings {
    pub ID: ImGuiID,
    pub Pos: ImVec2ih,
    pub Size: ImVec2ih,
    pub Collapsed: bool,
    pub WantApply: bool,
}
#[test]
fn bindgen_test_layout_ImGuiWindowSettings() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiWindowSettings>(),
        16usize,
        concat!("Size of: ", stringify!(ImGuiWindowSettings))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiWindowSettings>(),
        4usize,
        concat!("Alignment of ", stringify!(ImGuiWindowSettings))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindowSettings>())).ID as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowSettings),
            "::",
            stringify!(ID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindowSettings>())).Pos as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowSettings),
            "::",
            stringify!(Pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindowSettings>())).Size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowSettings),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindowSettings>())).Collapsed as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowSettings),
            "::",
            stringify!(Collapsed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindowSettings>())).WantApply as *const _ as usize },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowSettings),
            "::",
            stringify!(WantApply)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiSettingsHandler {
    pub TypeName: *const ::std::os::raw::c_char,
    pub TypeHash: ImGuiID,
    pub ClearAllFn: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut ImGuiContext, handler: *mut ImGuiSettingsHandler),
    >,
    pub ReadInitFn: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut ImGuiContext, handler: *mut ImGuiSettingsHandler),
    >,
    pub ReadOpenFn: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut ImGuiContext,
            handler: *mut ImGuiSettingsHandler,
            name: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub ReadLineFn: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut ImGuiContext,
            handler: *mut ImGuiSettingsHandler,
            entry: *mut ::std::os::raw::c_void,
            line: *const ::std::os::raw::c_char,
        ),
    >,
    pub ApplyAllFn: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut ImGuiContext, handler: *mut ImGuiSettingsHandler),
    >,
    pub WriteAllFn: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut ImGuiContext,
            handler: *mut ImGuiSettingsHandler,
            out_buf: *mut ImGuiTextBuffer,
        ),
    >,
    pub UserData: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_ImGuiSettingsHandler() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiSettingsHandler>(),
        72usize,
        concat!("Size of: ", stringify!(ImGuiSettingsHandler))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiSettingsHandler>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiSettingsHandler))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiSettingsHandler>())).TypeName as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiSettingsHandler),
            "::",
            stringify!(TypeName)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiSettingsHandler>())).TypeHash as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiSettingsHandler),
            "::",
            stringify!(TypeHash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiSettingsHandler>())).ClearAllFn as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiSettingsHandler),
            "::",
            stringify!(ClearAllFn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiSettingsHandler>())).ReadInitFn as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiSettingsHandler),
            "::",
            stringify!(ReadInitFn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiSettingsHandler>())).ReadOpenFn as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiSettingsHandler),
            "::",
            stringify!(ReadOpenFn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiSettingsHandler>())).ReadLineFn as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiSettingsHandler),
            "::",
            stringify!(ReadLineFn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiSettingsHandler>())).ApplyAllFn as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiSettingsHandler),
            "::",
            stringify!(ApplyAllFn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiSettingsHandler>())).WriteAllFn as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiSettingsHandler),
            "::",
            stringify!(WriteAllFn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiSettingsHandler>())).UserData as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiSettingsHandler),
            "::",
            stringify!(UserData)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiMetricsConfig {
    pub ShowWindowsRects: bool,
    pub ShowWindowsBeginOrder: bool,
    pub ShowTablesRects: bool,
    pub ShowDrawCmdMesh: bool,
    pub ShowDrawCmdBoundingBoxes: bool,
    pub ShowWindowsRectsType: ::std::os::raw::c_int,
    pub ShowTablesRectsType: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ImGuiMetricsConfig() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiMetricsConfig>(),
        16usize,
        concat!("Size of: ", stringify!(ImGuiMetricsConfig))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiMetricsConfig>(),
        4usize,
        concat!("Alignment of ", stringify!(ImGuiMetricsConfig))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiMetricsConfig>())).ShowWindowsRects as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiMetricsConfig),
            "::",
            stringify!(ShowWindowsRects)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiMetricsConfig>())).ShowWindowsBeginOrder as *const _
                as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiMetricsConfig),
            "::",
            stringify!(ShowWindowsBeginOrder)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiMetricsConfig>())).ShowTablesRects as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiMetricsConfig),
            "::",
            stringify!(ShowTablesRects)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiMetricsConfig>())).ShowDrawCmdMesh as *const _ as usize
        },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiMetricsConfig),
            "::",
            stringify!(ShowDrawCmdMesh)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiMetricsConfig>())).ShowDrawCmdBoundingBoxes as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiMetricsConfig),
            "::",
            stringify!(ShowDrawCmdBoundingBoxes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiMetricsConfig>())).ShowWindowsRectsType as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiMetricsConfig),
            "::",
            stringify!(ShowWindowsRectsType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiMetricsConfig>())).ShowTablesRectsType as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiMetricsConfig),
            "::",
            stringify!(ShowTablesRectsType)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiStackSizes {
    pub SizeOfIDStack: ::std::os::raw::c_short,
    pub SizeOfColorStack: ::std::os::raw::c_short,
    pub SizeOfStyleVarStack: ::std::os::raw::c_short,
    pub SizeOfFontStack: ::std::os::raw::c_short,
    pub SizeOfFocusScopeStack: ::std::os::raw::c_short,
    pub SizeOfGroupStack: ::std::os::raw::c_short,
    pub SizeOfBeginPopupStack: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_ImGuiStackSizes() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiStackSizes>(),
        14usize,
        concat!("Size of: ", stringify!(ImGuiStackSizes))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiStackSizes>(),
        2usize,
        concat!("Alignment of ", stringify!(ImGuiStackSizes))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiStackSizes>())).SizeOfIDStack as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStackSizes),
            "::",
            stringify!(SizeOfIDStack)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiStackSizes>())).SizeOfColorStack as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStackSizes),
            "::",
            stringify!(SizeOfColorStack)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiStackSizes>())).SizeOfStyleVarStack as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStackSizes),
            "::",
            stringify!(SizeOfStyleVarStack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiStackSizes>())).SizeOfFontStack as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStackSizes),
            "::",
            stringify!(SizeOfFontStack)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiStackSizes>())).SizeOfFocusScopeStack as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStackSizes),
            "::",
            stringify!(SizeOfFocusScopeStack)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiStackSizes>())).SizeOfGroupStack as *const _ as usize
        },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStackSizes),
            "::",
            stringify!(SizeOfGroupStack)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiStackSizes>())).SizeOfBeginPopupStack as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStackSizes),
            "::",
            stringify!(SizeOfBeginPopupStack)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}?SetToCurrentState@ImGuiStackSizes@@QEAAXXZ"]
    pub fn ImGuiStackSizes_SetToCurrentState(this: *mut ImGuiStackSizes);
}
extern "C" {
    #[link_name = "\u{1}?CompareWithCurrentState@ImGuiStackSizes@@QEAAXXZ"]
    pub fn ImGuiStackSizes_CompareWithCurrentState(this: *mut ImGuiStackSizes);
}
impl ImGuiStackSizes {
    #[inline]
    pub unsafe fn SetToCurrentState(&mut self) {
        ImGuiStackSizes_SetToCurrentState(self)
    }
    #[inline]
    pub unsafe fn CompareWithCurrentState(&mut self) {
        ImGuiStackSizes_CompareWithCurrentState(self)
    }
}
pub type ImGuiContextHookCallback = ::std::option::Option<
    unsafe extern "C" fn(ctx: *mut ImGuiContext, hook: *mut ImGuiContextHook),
>;
pub const ImGuiContextHookType_NewFramePre: ImGuiContextHookType = 0;
pub const ImGuiContextHookType_NewFramePost: ImGuiContextHookType = 1;
pub const ImGuiContextHookType_EndFramePre: ImGuiContextHookType = 2;
pub const ImGuiContextHookType_EndFramePost: ImGuiContextHookType = 3;
pub const ImGuiContextHookType_RenderPre: ImGuiContextHookType = 4;
pub const ImGuiContextHookType_RenderPost: ImGuiContextHookType = 5;
pub const ImGuiContextHookType_Shutdown: ImGuiContextHookType = 6;
pub type ImGuiContextHookType = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiContextHook {
    pub Type: ImGuiContextHookType,
    pub Owner: ImGuiID,
    pub Callback: ImGuiContextHookCallback,
    pub UserData: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_ImGuiContextHook() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiContextHook>(),
        24usize,
        concat!("Size of: ", stringify!(ImGuiContextHook))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiContextHook>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiContextHook))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContextHook>())).Type as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContextHook),
            "::",
            stringify!(Type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContextHook>())).Owner as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContextHook),
            "::",
            stringify!(Owner)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContextHook>())).Callback as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContextHook),
            "::",
            stringify!(Callback)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContextHook>())).UserData as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContextHook),
            "::",
            stringify!(UserData)
        )
    );
}
#[repr(C)]
pub struct ImGuiContext {
    pub Initialized: bool,
    pub FontAtlasOwnedByContext: bool,
    pub IO: ImGuiIO,
    pub Style: ImGuiStyle,
    pub Font: *mut ImFont,
    pub FontSize: f32,
    pub FontBaseSize: f32,
    pub DrawListSharedData: ImDrawListSharedData,
    pub Time: f64,
    pub FrameCount: ::std::os::raw::c_int,
    pub FrameCountEnded: ::std::os::raw::c_int,
    pub FrameCountRendered: ::std::os::raw::c_int,
    pub WithinFrameScope: bool,
    pub WithinFrameScopeWithImplicitWindow: bool,
    pub WithinEndChild: bool,
    pub GcCompactAll: bool,
    pub TestEngineHookItems: bool,
    pub TestEngineHookIdInfo: ImGuiID,
    pub TestEngine: *mut ::std::os::raw::c_void,
    pub Windows: ImVector<*mut ImGuiWindow>,
    pub WindowsFocusOrder: ImVector<*mut ImGuiWindow>,
    pub WindowsTempSortBuffer: ImVector<*mut ImGuiWindow>,
    pub CurrentWindowStack: ImVector<*mut ImGuiWindow>,
    pub WindowsById: ImGuiStorage,
    pub WindowsActiveCount: ::std::os::raw::c_int,
    pub CurrentWindow: *mut ImGuiWindow,
    pub HoveredWindow: *mut ImGuiWindow,
    pub HoveredRootWindow: *mut ImGuiWindow,
    pub HoveredWindowUnderMovingWindow: *mut ImGuiWindow,
    pub MovingWindow: *mut ImGuiWindow,
    pub WheelingWindow: *mut ImGuiWindow,
    pub WheelingWindowRefMousePos: ImVec2,
    pub WheelingWindowTimer: f32,
    pub HoveredId: ImGuiID,
    pub HoveredIdPreviousFrame: ImGuiID,
    pub HoveredIdAllowOverlap: bool,
    pub HoveredIdDisabled: bool,
    pub HoveredIdTimer: f32,
    pub HoveredIdNotActiveTimer: f32,
    pub ActiveId: ImGuiID,
    pub ActiveIdIsAlive: ImGuiID,
    pub ActiveIdTimer: f32,
    pub ActiveIdIsJustActivated: bool,
    pub ActiveIdAllowOverlap: bool,
    pub ActiveIdNoClearOnFocusLoss: bool,
    pub ActiveIdHasBeenPressedBefore: bool,
    pub ActiveIdHasBeenEditedBefore: bool,
    pub ActiveIdHasBeenEditedThisFrame: bool,
    pub ActiveIdUsingNavDirMask: ImU32,
    pub ActiveIdUsingNavInputMask: ImU32,
    pub ActiveIdUsingKeyInputMask: ImU64,
    pub ActiveIdClickOffset: ImVec2,
    pub ActiveIdWindow: *mut ImGuiWindow,
    pub ActiveIdSource: ImGuiInputSource,
    pub ActiveIdMouseButton: ::std::os::raw::c_int,
    pub ActiveIdPreviousFrame: ImGuiID,
    pub ActiveIdPreviousFrameIsAlive: bool,
    pub ActiveIdPreviousFrameHasBeenEditedBefore: bool,
    pub ActiveIdPreviousFrameWindow: *mut ImGuiWindow,
    pub LastActiveId: ImGuiID,
    pub LastActiveIdTimer: f32,
    pub NextWindowData: ImGuiNextWindowData,
    pub NextItemData: ImGuiNextItemData,
    pub ColorStack: ImVector<ImGuiColorMod>,
    pub StyleVarStack: ImVector<ImGuiStyleMod>,
    pub FontStack: ImVector<*mut ImFont>,
    pub FocusScopeStack: ImVector<ImGuiID>,
    pub ItemFlagsStack: ImVector<ImGuiItemFlags>,
    pub GroupStack: ImVector<ImGuiGroupData>,
    pub OpenPopupStack: ImVector<ImGuiPopupData>,
    pub BeginPopupStack: ImVector<ImGuiPopupData>,
    pub NavWindow: *mut ImGuiWindow,
    pub NavId: ImGuiID,
    pub NavFocusScopeId: ImGuiID,
    pub NavActivateId: ImGuiID,
    pub NavActivateDownId: ImGuiID,
    pub NavActivatePressedId: ImGuiID,
    pub NavInputId: ImGuiID,
    pub NavJustTabbedId: ImGuiID,
    pub NavJustMovedToId: ImGuiID,
    pub NavJustMovedToFocusScopeId: ImGuiID,
    pub NavJustMovedToKeyMods: ImGuiKeyModFlags,
    pub NavNextActivateId: ImGuiID,
    pub NavInputSource: ImGuiInputSource,
    pub NavScoringRect: ImRect,
    pub NavScoringCount: ::std::os::raw::c_int,
    pub NavLayer: ImGuiNavLayer,
    pub NavIdTabCounter: ::std::os::raw::c_int,
    pub NavIdIsAlive: bool,
    pub NavMousePosDirty: bool,
    pub NavDisableHighlight: bool,
    pub NavDisableMouseHover: bool,
    pub NavAnyRequest: bool,
    pub NavInitRequest: bool,
    pub NavInitRequestFromMove: bool,
    pub NavInitResultId: ImGuiID,
    pub NavInitResultRectRel: ImRect,
    pub NavMoveRequest: bool,
    pub NavMoveRequestFlags: ImGuiNavMoveFlags,
    pub NavMoveRequestForward: ImGuiNavForward,
    pub NavMoveRequestKeyMods: ImGuiKeyModFlags,
    pub NavMoveDir: ImGuiDir,
    pub NavMoveDirLast: ImGuiDir,
    pub NavMoveClipDir: ImGuiDir,
    pub NavMoveResultLocal: ImGuiNavMoveResult,
    pub NavMoveResultLocalVisibleSet: ImGuiNavMoveResult,
    pub NavMoveResultOther: ImGuiNavMoveResult,
    pub NavWrapRequestWindow: *mut ImGuiWindow,
    pub NavWrapRequestFlags: ImGuiNavMoveFlags,
    pub NavWindowingTarget: *mut ImGuiWindow,
    pub NavWindowingTargetAnim: *mut ImGuiWindow,
    pub NavWindowingListWindow: *mut ImGuiWindow,
    pub NavWindowingTimer: f32,
    pub NavWindowingHighlightAlpha: f32,
    pub NavWindowingToggleLayer: bool,
    pub FocusRequestCurrWindow: *mut ImGuiWindow,
    pub FocusRequestNextWindow: *mut ImGuiWindow,
    pub FocusRequestCurrCounterRegular: ::std::os::raw::c_int,
    pub FocusRequestCurrCounterTabStop: ::std::os::raw::c_int,
    pub FocusRequestNextCounterRegular: ::std::os::raw::c_int,
    pub FocusRequestNextCounterTabStop: ::std::os::raw::c_int,
    pub FocusTabPressed: bool,
    pub DrawData: ImDrawData,
    pub DrawDataBuilder: ImDrawDataBuilder,
    pub DimBgRatio: f32,
    pub BackgroundDrawList: ImDrawList,
    pub ForegroundDrawList: ImDrawList,
    pub MouseCursor: ImGuiMouseCursor,
    pub DragDropActive: bool,
    pub DragDropWithinSource: bool,
    pub DragDropWithinTarget: bool,
    pub DragDropSourceFlags: ImGuiDragDropFlags,
    pub DragDropSourceFrameCount: ::std::os::raw::c_int,
    pub DragDropMouseButton: ::std::os::raw::c_int,
    pub DragDropPayload: ImGuiPayload,
    pub DragDropTargetRect: ImRect,
    pub DragDropTargetId: ImGuiID,
    pub DragDropAcceptFlags: ImGuiDragDropFlags,
    pub DragDropAcceptIdCurrRectSurface: f32,
    pub DragDropAcceptIdCurr: ImGuiID,
    pub DragDropAcceptIdPrev: ImGuiID,
    pub DragDropAcceptFrameCount: ::std::os::raw::c_int,
    pub DragDropHoldJustPressedId: ImGuiID,
    pub DragDropPayloadBufHeap: ImVector<::std::os::raw::c_uchar>,
    pub DragDropPayloadBufLocal: [::std::os::raw::c_uchar; 16usize],
    pub CurrentTabBar: *mut ImGuiTabBar,
    pub TabBars: ImPool<ImGuiTabBar>,
    pub CurrentTabBarStack: ImVector<ImGuiPtrOrIndex>,
    pub ShrinkWidthBuffer: ImVector<ImGuiShrinkWidthItem>,
    pub LastValidMousePos: ImVec2,
    pub InputTextState: ImGuiInputTextState,
    pub InputTextPasswordFont: ImFont,
    pub TempInputId: ImGuiID,
    pub ColorEditOptions: ImGuiColorEditFlags,
    pub ColorEditLastHue: f32,
    pub ColorEditLastSat: f32,
    pub ColorEditLastColor: [f32; 3usize],
    pub ColorPickerRef: ImVec4,
    pub SliderCurrentAccum: f32,
    pub SliderCurrentAccumDirty: bool,
    pub DragCurrentAccumDirty: bool,
    pub DragCurrentAccum: f32,
    pub DragSpeedDefaultRatio: f32,
    pub ScrollbarClickDeltaToGrabCenter: f32,
    pub TooltipOverrideCount: ::std::os::raw::c_int,
    pub ClipboardHandlerData: ImVector<::std::os::raw::c_char>,
    pub MenusIdSubmittedThisFrame: ImVector<ImGuiID>,
    pub PlatformImePos: ImVec2,
    pub PlatformImeLastPos: ImVec2,
    pub PlatformLocaleDecimalPoint: ::std::os::raw::c_char,
    pub SettingsLoaded: bool,
    pub SettingsDirtyTimer: f32,
    pub SettingsIniData: ImGuiTextBuffer,
    pub SettingsHandlers: ImVector<ImGuiSettingsHandler>,
    pub SettingsWindows: ImChunkStream,
    pub Hooks: ImVector<ImGuiContextHook>,
    pub LogEnabled: bool,
    pub LogType: ImGuiLogType,
    pub LogFile: ImFileHandle,
    pub LogBuffer: ImGuiTextBuffer,
    pub LogLinePosY: f32,
    pub LogLineFirstItem: bool,
    pub LogDepthRef: ::std::os::raw::c_int,
    pub LogDepthToExpand: ::std::os::raw::c_int,
    pub LogDepthToExpandDefault: ::std::os::raw::c_int,
    pub DebugItemPickerActive: bool,
    pub DebugItemPickerBreakId: ImGuiID,
    pub DebugMetricsConfig: ImGuiMetricsConfig,
    pub FramerateSecPerFrame: [f32; 120usize],
    pub FramerateSecPerFrameIdx: ::std::os::raw::c_int,
    pub FramerateSecPerFrameAccum: f32,
    pub WantCaptureMouseNextFrame: ::std::os::raw::c_int,
    pub WantCaptureKeyboardNextFrame: ::std::os::raw::c_int,
    pub WantTextInputNextFrame: ::std::os::raw::c_int,
    pub TempBuffer: [::std::os::raw::c_char; 3073usize],
}
#[test]
fn bindgen_test_layout_ImGuiContext() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiContext>(),
        16040usize,
        concat!("Size of: ", stringify!(ImGuiContext))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiContext>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiContext))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).Initialized as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(Initialized)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).FontAtlasOwnedByContext as *const _ as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(FontAtlasOwnedByContext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).IO as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(IO)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).Style as *const _ as usize },
        5472usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(Style)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).Font as *const _ as usize },
        6432usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(Font)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).FontSize as *const _ as usize },
        6440usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(FontSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).FontBaseSize as *const _ as usize },
        6444usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(FontBaseSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).DrawListSharedData as *const _ as usize },
        6448usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(DrawListSharedData)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).Time as *const _ as usize },
        6664usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(Time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).FrameCount as *const _ as usize },
        6672usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(FrameCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).FrameCountEnded as *const _ as usize },
        6676usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(FrameCountEnded)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).FrameCountRendered as *const _ as usize },
        6680usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(FrameCountRendered)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).WithinFrameScope as *const _ as usize },
        6684usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(WithinFrameScope)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).WithinFrameScopeWithImplicitWindow as *const _
                as usize
        },
        6685usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(WithinFrameScopeWithImplicitWindow)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).WithinEndChild as *const _ as usize },
        6686usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(WithinEndChild)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).GcCompactAll as *const _ as usize },
        6687usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(GcCompactAll)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).TestEngineHookItems as *const _ as usize
        },
        6688usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(TestEngineHookItems)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).TestEngineHookIdInfo as *const _ as usize
        },
        6692usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(TestEngineHookIdInfo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).TestEngine as *const _ as usize },
        6696usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(TestEngine)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).Windows as *const _ as usize },
        6704usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(Windows)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).WindowsFocusOrder as *const _ as usize },
        6720usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(WindowsFocusOrder)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).WindowsTempSortBuffer as *const _ as usize
        },
        6736usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(WindowsTempSortBuffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).CurrentWindowStack as *const _ as usize },
        6752usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(CurrentWindowStack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).WindowsById as *const _ as usize },
        6768usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(WindowsById)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).WindowsActiveCount as *const _ as usize },
        6784usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(WindowsActiveCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).CurrentWindow as *const _ as usize },
        6792usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(CurrentWindow)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).HoveredWindow as *const _ as usize },
        6800usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(HoveredWindow)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).HoveredRootWindow as *const _ as usize },
        6808usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(HoveredRootWindow)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).HoveredWindowUnderMovingWindow as *const _
                as usize
        },
        6816usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(HoveredWindowUnderMovingWindow)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).MovingWindow as *const _ as usize },
        6824usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(MovingWindow)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).WheelingWindow as *const _ as usize },
        6832usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(WheelingWindow)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).WheelingWindowRefMousePos as *const _ as usize
        },
        6840usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(WheelingWindowRefMousePos)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).WheelingWindowTimer as *const _ as usize
        },
        6848usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(WheelingWindowTimer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).HoveredId as *const _ as usize },
        6852usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(HoveredId)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).HoveredIdPreviousFrame as *const _ as usize
        },
        6856usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(HoveredIdPreviousFrame)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).HoveredIdAllowOverlap as *const _ as usize
        },
        6860usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(HoveredIdAllowOverlap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).HoveredIdDisabled as *const _ as usize },
        6861usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(HoveredIdDisabled)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).HoveredIdTimer as *const _ as usize },
        6864usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(HoveredIdTimer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).HoveredIdNotActiveTimer as *const _ as usize
        },
        6868usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(HoveredIdNotActiveTimer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).ActiveId as *const _ as usize },
        6872usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(ActiveId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).ActiveIdIsAlive as *const _ as usize },
        6876usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(ActiveIdIsAlive)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).ActiveIdTimer as *const _ as usize },
        6880usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(ActiveIdTimer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).ActiveIdIsJustActivated as *const _ as usize
        },
        6884usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(ActiveIdIsJustActivated)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).ActiveIdAllowOverlap as *const _ as usize
        },
        6885usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(ActiveIdAllowOverlap)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).ActiveIdNoClearOnFocusLoss as *const _ as usize
        },
        6886usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(ActiveIdNoClearOnFocusLoss)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).ActiveIdHasBeenPressedBefore as *const _
                as usize
        },
        6887usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(ActiveIdHasBeenPressedBefore)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).ActiveIdHasBeenEditedBefore as *const _
                as usize
        },
        6888usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(ActiveIdHasBeenEditedBefore)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).ActiveIdHasBeenEditedThisFrame as *const _
                as usize
        },
        6889usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(ActiveIdHasBeenEditedThisFrame)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).ActiveIdUsingNavDirMask as *const _ as usize
        },
        6892usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(ActiveIdUsingNavDirMask)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).ActiveIdUsingNavInputMask as *const _ as usize
        },
        6896usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(ActiveIdUsingNavInputMask)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).ActiveIdUsingKeyInputMask as *const _ as usize
        },
        6904usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(ActiveIdUsingKeyInputMask)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).ActiveIdClickOffset as *const _ as usize
        },
        6912usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(ActiveIdClickOffset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).ActiveIdWindow as *const _ as usize },
        6920usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(ActiveIdWindow)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).ActiveIdSource as *const _ as usize },
        6928usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(ActiveIdSource)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).ActiveIdMouseButton as *const _ as usize
        },
        6932usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(ActiveIdMouseButton)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).ActiveIdPreviousFrame as *const _ as usize
        },
        6936usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(ActiveIdPreviousFrame)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).ActiveIdPreviousFrameIsAlive as *const _
                as usize
        },
        6940usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(ActiveIdPreviousFrameIsAlive)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).ActiveIdPreviousFrameHasBeenEditedBefore
                as *const _ as usize
        },
        6941usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(ActiveIdPreviousFrameHasBeenEditedBefore)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).ActiveIdPreviousFrameWindow as *const _
                as usize
        },
        6944usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(ActiveIdPreviousFrameWindow)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).LastActiveId as *const _ as usize },
        6952usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(LastActiveId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).LastActiveIdTimer as *const _ as usize },
        6956usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(LastActiveIdTimer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).NextWindowData as *const _ as usize },
        6960usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NextWindowData)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).NextItemData as *const _ as usize },
        7072usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NextItemData)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).ColorStack as *const _ as usize },
        7096usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(ColorStack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).StyleVarStack as *const _ as usize },
        7112usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(StyleVarStack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).FontStack as *const _ as usize },
        7128usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(FontStack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).FocusScopeStack as *const _ as usize },
        7144usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(FocusScopeStack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).ItemFlagsStack as *const _ as usize },
        7160usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(ItemFlagsStack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).GroupStack as *const _ as usize },
        7176usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(GroupStack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).OpenPopupStack as *const _ as usize },
        7192usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(OpenPopupStack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).BeginPopupStack as *const _ as usize },
        7208usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(BeginPopupStack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).NavWindow as *const _ as usize },
        7224usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavWindow)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).NavId as *const _ as usize },
        7232usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).NavFocusScopeId as *const _ as usize },
        7236usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavFocusScopeId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).NavActivateId as *const _ as usize },
        7240usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavActivateId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).NavActivateDownId as *const _ as usize },
        7244usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavActivateDownId)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).NavActivatePressedId as *const _ as usize
        },
        7248usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavActivatePressedId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).NavInputId as *const _ as usize },
        7252usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavInputId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).NavJustTabbedId as *const _ as usize },
        7256usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavJustTabbedId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).NavJustMovedToId as *const _ as usize },
        7260usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavJustMovedToId)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).NavJustMovedToFocusScopeId as *const _ as usize
        },
        7264usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavJustMovedToFocusScopeId)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).NavJustMovedToKeyMods as *const _ as usize
        },
        7268usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavJustMovedToKeyMods)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).NavNextActivateId as *const _ as usize },
        7272usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavNextActivateId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).NavInputSource as *const _ as usize },
        7276usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavInputSource)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).NavScoringRect as *const _ as usize },
        7280usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavScoringRect)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).NavScoringCount as *const _ as usize },
        7296usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavScoringCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).NavLayer as *const _ as usize },
        7300usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavLayer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).NavIdTabCounter as *const _ as usize },
        7304usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavIdTabCounter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).NavIdIsAlive as *const _ as usize },
        7308usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavIdIsAlive)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).NavMousePosDirty as *const _ as usize },
        7309usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavMousePosDirty)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).NavDisableHighlight as *const _ as usize
        },
        7310usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavDisableHighlight)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).NavDisableMouseHover as *const _ as usize
        },
        7311usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavDisableMouseHover)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).NavAnyRequest as *const _ as usize },
        7312usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavAnyRequest)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).NavInitRequest as *const _ as usize },
        7313usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavInitRequest)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).NavInitRequestFromMove as *const _ as usize
        },
        7314usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavInitRequestFromMove)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).NavInitResultId as *const _ as usize },
        7316usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavInitResultId)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).NavInitResultRectRel as *const _ as usize
        },
        7320usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavInitResultRectRel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).NavMoveRequest as *const _ as usize },
        7336usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavMoveRequest)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).NavMoveRequestFlags as *const _ as usize
        },
        7340usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavMoveRequestFlags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).NavMoveRequestForward as *const _ as usize
        },
        7344usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavMoveRequestForward)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).NavMoveRequestKeyMods as *const _ as usize
        },
        7348usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavMoveRequestKeyMods)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).NavMoveDir as *const _ as usize },
        7352usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavMoveDir)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).NavMoveDirLast as *const _ as usize },
        7356usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavMoveDirLast)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).NavMoveClipDir as *const _ as usize },
        7360usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavMoveClipDir)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).NavMoveResultLocal as *const _ as usize },
        7368usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavMoveResultLocal)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).NavMoveResultLocalVisibleSet as *const _
                as usize
        },
        7416usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavMoveResultLocalVisibleSet)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).NavMoveResultOther as *const _ as usize },
        7464usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavMoveResultOther)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).NavWrapRequestWindow as *const _ as usize
        },
        7512usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavWrapRequestWindow)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).NavWrapRequestFlags as *const _ as usize
        },
        7520usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavWrapRequestFlags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).NavWindowingTarget as *const _ as usize },
        7528usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavWindowingTarget)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).NavWindowingTargetAnim as *const _ as usize
        },
        7536usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavWindowingTargetAnim)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).NavWindowingListWindow as *const _ as usize
        },
        7544usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavWindowingListWindow)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).NavWindowingTimer as *const _ as usize },
        7552usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavWindowingTimer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).NavWindowingHighlightAlpha as *const _ as usize
        },
        7556usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavWindowingHighlightAlpha)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).NavWindowingToggleLayer as *const _ as usize
        },
        7560usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavWindowingToggleLayer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).FocusRequestCurrWindow as *const _ as usize
        },
        7568usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(FocusRequestCurrWindow)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).FocusRequestNextWindow as *const _ as usize
        },
        7576usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(FocusRequestNextWindow)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).FocusRequestCurrCounterRegular as *const _
                as usize
        },
        7584usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(FocusRequestCurrCounterRegular)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).FocusRequestCurrCounterTabStop as *const _
                as usize
        },
        7588usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(FocusRequestCurrCounterTabStop)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).FocusRequestNextCounterRegular as *const _
                as usize
        },
        7592usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(FocusRequestNextCounterRegular)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).FocusRequestNextCounterTabStop as *const _
                as usize
        },
        7596usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(FocusRequestNextCounterTabStop)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).FocusTabPressed as *const _ as usize },
        7600usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(FocusTabPressed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).DrawData as *const _ as usize },
        7608usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(DrawData)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).DrawDataBuilder as *const _ as usize },
        7664usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(DrawDataBuilder)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).DimBgRatio as *const _ as usize },
        7696usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(DimBgRatio)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).BackgroundDrawList as *const _ as usize },
        7704usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(BackgroundDrawList)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).ForegroundDrawList as *const _ as usize },
        7896usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(ForegroundDrawList)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).MouseCursor as *const _ as usize },
        8088usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(MouseCursor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).DragDropActive as *const _ as usize },
        8092usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(DragDropActive)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).DragDropWithinSource as *const _ as usize
        },
        8093usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(DragDropWithinSource)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).DragDropWithinTarget as *const _ as usize
        },
        8094usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(DragDropWithinTarget)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).DragDropSourceFlags as *const _ as usize
        },
        8096usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(DragDropSourceFlags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).DragDropSourceFrameCount as *const _ as usize
        },
        8100usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(DragDropSourceFrameCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).DragDropMouseButton as *const _ as usize
        },
        8104usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(DragDropMouseButton)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).DragDropPayload as *const _ as usize },
        8112usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(DragDropPayload)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).DragDropTargetRect as *const _ as usize },
        8176usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(DragDropTargetRect)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).DragDropTargetId as *const _ as usize },
        8192usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(DragDropTargetId)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).DragDropAcceptFlags as *const _ as usize
        },
        8196usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(DragDropAcceptFlags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).DragDropAcceptIdCurrRectSurface as *const _
                as usize
        },
        8200usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(DragDropAcceptIdCurrRectSurface)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).DragDropAcceptIdCurr as *const _ as usize
        },
        8204usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(DragDropAcceptIdCurr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).DragDropAcceptIdPrev as *const _ as usize
        },
        8208usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(DragDropAcceptIdPrev)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).DragDropAcceptFrameCount as *const _ as usize
        },
        8212usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(DragDropAcceptFrameCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).DragDropHoldJustPressedId as *const _ as usize
        },
        8216usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(DragDropHoldJustPressedId)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).DragDropPayloadBufHeap as *const _ as usize
        },
        8224usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(DragDropPayloadBufHeap)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).DragDropPayloadBufLocal as *const _ as usize
        },
        8240usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(DragDropPayloadBufLocal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).CurrentTabBar as *const _ as usize },
        8256usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(CurrentTabBar)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).TabBars as *const _ as usize },
        8264usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(TabBars)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).CurrentTabBarStack as *const _ as usize },
        8304usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(CurrentTabBarStack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).ShrinkWidthBuffer as *const _ as usize },
        8320usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(ShrinkWidthBuffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).LastValidMousePos as *const _ as usize },
        8336usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(LastValidMousePos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).InputTextState as *const _ as usize },
        8344usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(InputTextState)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).InputTextPasswordFont as *const _ as usize
        },
        12080usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(InputTextPasswordFont)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).TempInputId as *const _ as usize },
        12192usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(TempInputId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).ColorEditOptions as *const _ as usize },
        12196usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(ColorEditOptions)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).ColorEditLastHue as *const _ as usize },
        12200usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(ColorEditLastHue)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).ColorEditLastSat as *const _ as usize },
        12204usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(ColorEditLastSat)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).ColorEditLastColor as *const _ as usize },
        12208usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(ColorEditLastColor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).ColorPickerRef as *const _ as usize },
        12220usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(ColorPickerRef)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).SliderCurrentAccum as *const _ as usize },
        12236usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(SliderCurrentAccum)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).SliderCurrentAccumDirty as *const _ as usize
        },
        12240usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(SliderCurrentAccumDirty)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).DragCurrentAccumDirty as *const _ as usize
        },
        12241usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(DragCurrentAccumDirty)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).DragCurrentAccum as *const _ as usize },
        12244usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(DragCurrentAccum)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).DragSpeedDefaultRatio as *const _ as usize
        },
        12248usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(DragSpeedDefaultRatio)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).ScrollbarClickDeltaToGrabCenter as *const _
                as usize
        },
        12252usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(ScrollbarClickDeltaToGrabCenter)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).TooltipOverrideCount as *const _ as usize
        },
        12256usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(TooltipOverrideCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).ClipboardHandlerData as *const _ as usize
        },
        12264usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(ClipboardHandlerData)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).MenusIdSubmittedThisFrame as *const _ as usize
        },
        12280usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(MenusIdSubmittedThisFrame)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).PlatformImePos as *const _ as usize },
        12296usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(PlatformImePos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).PlatformImeLastPos as *const _ as usize },
        12304usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(PlatformImeLastPos)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).PlatformLocaleDecimalPoint as *const _ as usize
        },
        12312usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(PlatformLocaleDecimalPoint)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).SettingsLoaded as *const _ as usize },
        12313usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(SettingsLoaded)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).SettingsDirtyTimer as *const _ as usize },
        12316usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(SettingsDirtyTimer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).SettingsIniData as *const _ as usize },
        12320usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(SettingsIniData)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).SettingsHandlers as *const _ as usize },
        12336usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(SettingsHandlers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).SettingsWindows as *const _ as usize },
        12352usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(SettingsWindows)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).Hooks as *const _ as usize },
        12368usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(Hooks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).LogEnabled as *const _ as usize },
        12384usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(LogEnabled)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).LogType as *const _ as usize },
        12388usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(LogType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).LogFile as *const _ as usize },
        12392usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(LogFile)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).LogBuffer as *const _ as usize },
        12400usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(LogBuffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).LogLinePosY as *const _ as usize },
        12416usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(LogLinePosY)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).LogLineFirstItem as *const _ as usize },
        12420usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(LogLineFirstItem)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).LogDepthRef as *const _ as usize },
        12424usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(LogDepthRef)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).LogDepthToExpand as *const _ as usize },
        12428usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(LogDepthToExpand)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).LogDepthToExpandDefault as *const _ as usize
        },
        12432usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(LogDepthToExpandDefault)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).DebugItemPickerActive as *const _ as usize
        },
        12436usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(DebugItemPickerActive)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).DebugItemPickerBreakId as *const _ as usize
        },
        12440usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(DebugItemPickerBreakId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).DebugMetricsConfig as *const _ as usize },
        12444usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(DebugMetricsConfig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).FramerateSecPerFrame as *const _ as usize
        },
        12460usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(FramerateSecPerFrame)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).FramerateSecPerFrameIdx as *const _ as usize
        },
        12940usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(FramerateSecPerFrameIdx)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).FramerateSecPerFrameAccum as *const _ as usize
        },
        12944usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(FramerateSecPerFrameAccum)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).WantCaptureMouseNextFrame as *const _ as usize
        },
        12948usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(WantCaptureMouseNextFrame)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).WantCaptureKeyboardNextFrame as *const _
                as usize
        },
        12952usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(WantCaptureKeyboardNextFrame)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).WantTextInputNextFrame as *const _ as usize
        },
        12956usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(WantTextInputNextFrame)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).TempBuffer as *const _ as usize },
        12960usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(TempBuffer)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct ImGuiWindowTempData {
    pub CursorPos: ImVec2,
    pub CursorPosPrevLine: ImVec2,
    pub CursorStartPos: ImVec2,
    pub CursorMaxPos: ImVec2,
    pub CurrLineSize: ImVec2,
    pub PrevLineSize: ImVec2,
    pub CurrLineTextBaseOffset: f32,
    pub PrevLineTextBaseOffset: f32,
    pub Indent: ImVec1,
    pub ColumnsOffset: ImVec1,
    pub GroupOffset: ImVec1,
    pub LastItemId: ImGuiID,
    pub LastItemStatusFlags: ImGuiItemStatusFlags,
    pub LastItemRect: ImRect,
    pub LastItemDisplayRect: ImRect,
    pub NavLayerCurrent: ImGuiNavLayer,
    pub NavLayerActiveMask: ::std::os::raw::c_int,
    pub NavLayerActiveMaskNext: ::std::os::raw::c_int,
    pub NavFocusScopeIdCurrent: ImGuiID,
    pub NavHideHighlightOneFrame: bool,
    pub NavHasScroll: bool,
    pub MenuBarAppending: bool,
    pub MenuBarOffset: ImVec2,
    pub MenuColumns: ImGuiMenuColumns,
    pub TreeDepth: ::std::os::raw::c_int,
    pub TreeJumpToParentOnPopMask: ImU32,
    pub ChildWindows: ImVector<*mut ImGuiWindow>,
    pub StateStorage: *mut ImGuiStorage,
    pub CurrentColumns: *mut ImGuiOldColumns,
    pub LayoutType: ImGuiLayoutType,
    pub ParentLayoutType: ImGuiLayoutType,
    pub FocusCounterRegular: ::std::os::raw::c_int,
    pub FocusCounterTabStop: ::std::os::raw::c_int,
    pub ItemFlags: ImGuiItemFlags,
    pub ItemWidth: f32,
    pub TextWrapPos: f32,
    pub ItemWidthStack: ImVector<f32>,
    pub TextWrapPosStack: ImVector<f32>,
    pub StackSizesOnBegin: ImGuiStackSizes,
}
#[test]
fn bindgen_test_layout_ImGuiWindowTempData() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiWindowTempData>(),
        296usize,
        concat!("Size of: ", stringify!(ImGuiWindowTempData))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiWindowTempData>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiWindowTempData))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindowTempData>())).CursorPos as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(CursorPos)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiWindowTempData>())).CursorPosPrevLine as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(CursorPosPrevLine)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiWindowTempData>())).CursorStartPos as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(CursorStartPos)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiWindowTempData>())).CursorMaxPos as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(CursorMaxPos)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiWindowTempData>())).CurrLineSize as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(CurrLineSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiWindowTempData>())).PrevLineSize as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(PrevLineSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiWindowTempData>())).CurrLineTextBaseOffset as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(CurrLineTextBaseOffset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiWindowTempData>())).PrevLineTextBaseOffset as *const _
                as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(PrevLineTextBaseOffset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindowTempData>())).Indent as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(Indent)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiWindowTempData>())).ColumnsOffset as *const _ as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(ColumnsOffset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindowTempData>())).GroupOffset as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(GroupOffset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindowTempData>())).LastItemId as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(LastItemId)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiWindowTempData>())).LastItemStatusFlags as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(LastItemStatusFlags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiWindowTempData>())).LastItemRect as *const _ as usize
        },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(LastItemRect)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiWindowTempData>())).LastItemDisplayRect as *const _ as usize
        },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(LastItemDisplayRect)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiWindowTempData>())).NavLayerCurrent as *const _ as usize
        },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(NavLayerCurrent)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiWindowTempData>())).NavLayerActiveMask as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(NavLayerActiveMask)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiWindowTempData>())).NavLayerActiveMaskNext as *const _
                as usize
        },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(NavLayerActiveMaskNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiWindowTempData>())).NavFocusScopeIdCurrent as *const _
                as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(NavFocusScopeIdCurrent)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiWindowTempData>())).NavHideHighlightOneFrame as *const _
                as usize
        },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(NavHideHighlightOneFrame)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiWindowTempData>())).NavHasScroll as *const _ as usize
        },
        125usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(NavHasScroll)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiWindowTempData>())).MenuBarAppending as *const _ as usize
        },
        126usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(MenuBarAppending)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiWindowTempData>())).MenuBarOffset as *const _ as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(MenuBarOffset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindowTempData>())).MenuColumns as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(MenuColumns)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindowTempData>())).TreeDepth as *const _ as usize },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(TreeDepth)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiWindowTempData>())).TreeJumpToParentOnPopMask as *const _
                as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(TreeJumpToParentOnPopMask)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiWindowTempData>())).ChildWindows as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(ChildWindows)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiWindowTempData>())).StateStorage as *const _ as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(StateStorage)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiWindowTempData>())).CurrentColumns as *const _ as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(CurrentColumns)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindowTempData>())).LayoutType as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(LayoutType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiWindowTempData>())).ParentLayoutType as *const _ as usize
        },
        220usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(ParentLayoutType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiWindowTempData>())).FocusCounterRegular as *const _ as usize
        },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(FocusCounterRegular)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiWindowTempData>())).FocusCounterTabStop as *const _ as usize
        },
        228usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(FocusCounterTabStop)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindowTempData>())).ItemFlags as *const _ as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(ItemFlags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindowTempData>())).ItemWidth as *const _ as usize },
        236usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(ItemWidth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindowTempData>())).TextWrapPos as *const _ as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(TextWrapPos)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiWindowTempData>())).ItemWidthStack as *const _ as usize
        },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(ItemWidthStack)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiWindowTempData>())).TextWrapPosStack as *const _ as usize
        },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(TextWrapPosStack)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiWindowTempData>())).StackSizesOnBegin as *const _ as usize
        },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(StackSizesOnBegin)
        )
    );
}
#[repr(C)]
pub struct ImGuiWindow {
    pub Name: *mut ::std::os::raw::c_char,
    pub ID: ImGuiID,
    pub Flags: ImGuiWindowFlags,
    pub Pos: ImVec2,
    pub Size: ImVec2,
    pub SizeFull: ImVec2,
    pub ContentSize: ImVec2,
    pub ContentSizeExplicit: ImVec2,
    pub WindowPadding: ImVec2,
    pub WindowRounding: f32,
    pub WindowBorderSize: f32,
    pub NameBufLen: ::std::os::raw::c_int,
    pub MoveId: ImGuiID,
    pub ChildId: ImGuiID,
    pub Scroll: ImVec2,
    pub ScrollMax: ImVec2,
    pub ScrollTarget: ImVec2,
    pub ScrollTargetCenterRatio: ImVec2,
    pub ScrollTargetEdgeSnapDist: ImVec2,
    pub ScrollbarSizes: ImVec2,
    pub ScrollbarX: bool,
    pub ScrollbarY: bool,
    pub Active: bool,
    pub WasActive: bool,
    pub WriteAccessed: bool,
    pub Collapsed: bool,
    pub WantCollapseToggle: bool,
    pub SkipItems: bool,
    pub Appearing: bool,
    pub Hidden: bool,
    pub IsFallbackWindow: bool,
    pub HasCloseButton: bool,
    pub ResizeBorderHeld: ::std::os::raw::c_schar,
    pub BeginCount: ::std::os::raw::c_short,
    pub BeginOrderWithinParent: ::std::os::raw::c_short,
    pub BeginOrderWithinContext: ::std::os::raw::c_short,
    pub PopupId: ImGuiID,
    pub AutoFitFramesX: ImS8,
    pub AutoFitFramesY: ImS8,
    pub AutoFitChildAxises: ImS8,
    pub AutoFitOnlyGrows: bool,
    pub AutoPosLastDirection: ImGuiDir,
    pub HiddenFramesCanSkipItems: ::std::os::raw::c_int,
    pub HiddenFramesCannotSkipItems: ::std::os::raw::c_int,
    pub SetWindowPosAllowFlags: ImGuiCond,
    pub SetWindowSizeAllowFlags: ImGuiCond,
    pub SetWindowCollapsedAllowFlags: ImGuiCond,
    pub SetWindowPosVal: ImVec2,
    pub SetWindowPosPivot: ImVec2,
    pub IDStack: ImVector<ImGuiID>,
    pub DC: ImGuiWindowTempData,
    pub OuterRectClipped: ImRect,
    pub InnerRect: ImRect,
    pub InnerClipRect: ImRect,
    pub WorkRect: ImRect,
    pub ParentWorkRect: ImRect,
    pub ClipRect: ImRect,
    pub ContentRegionRect: ImRect,
    pub HitTestHoleSize: ImVec2ih,
    pub HitTestHoleOffset: ImVec2ih,
    pub LastFrameActive: ::std::os::raw::c_int,
    pub LastTimeActive: f32,
    pub ItemWidthDefault: f32,
    pub StateStorage: ImGuiStorage,
    pub ColumnsStorage: ImVector<ImGuiOldColumns>,
    pub FontWindowScale: f32,
    pub SettingsOffset: ::std::os::raw::c_int,
    pub DrawList: *mut ImDrawList,
    pub DrawListInst: ImDrawList,
    pub ParentWindow: *mut ImGuiWindow,
    pub RootWindow: *mut ImGuiWindow,
    pub RootWindowForTitleBarHighlight: *mut ImGuiWindow,
    pub RootWindowForNav: *mut ImGuiWindow,
    pub NavLastChildNavWindow: *mut ImGuiWindow,
    pub NavLastIds: [ImGuiID; 2usize],
    pub NavRectRel: [ImRect; 2usize],
    pub MemoryDrawListIdxCapacity: ::std::os::raw::c_int,
    pub MemoryDrawListVtxCapacity: ::std::os::raw::c_int,
    pub MemoryCompacted: bool,
}
#[test]
fn bindgen_test_layout_ImGuiWindow() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiWindow>(),
        984usize,
        concat!("Size of: ", stringify!(ImGuiWindow))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiWindow>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiWindow))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).Name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(Name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).ID as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(ID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).Flags as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(Flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).Pos as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(Pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).Size as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).SizeFull as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(SizeFull)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).ContentSize as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(ContentSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).ContentSizeExplicit as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(ContentSizeExplicit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).WindowPadding as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(WindowPadding)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).WindowRounding as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(WindowRounding)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).WindowBorderSize as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(WindowBorderSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).NameBufLen as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(NameBufLen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).MoveId as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(MoveId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).ChildId as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(ChildId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).Scroll as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(Scroll)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).ScrollMax as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(ScrollMax)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).ScrollTarget as *const _ as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(ScrollTarget)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiWindow>())).ScrollTargetCenterRatio as *const _ as usize
        },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(ScrollTargetCenterRatio)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiWindow>())).ScrollTargetEdgeSnapDist as *const _ as usize
        },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(ScrollTargetEdgeSnapDist)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).ScrollbarSizes as *const _ as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(ScrollbarSizes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).ScrollbarX as *const _ as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(ScrollbarX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).ScrollbarY as *const _ as usize },
        133usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(ScrollbarY)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).Active as *const _ as usize },
        134usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(Active)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).WasActive as *const _ as usize },
        135usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(WasActive)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).WriteAccessed as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(WriteAccessed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).Collapsed as *const _ as usize },
        137usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(Collapsed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).WantCollapseToggle as *const _ as usize },
        138usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(WantCollapseToggle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).SkipItems as *const _ as usize },
        139usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(SkipItems)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).Appearing as *const _ as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(Appearing)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).Hidden as *const _ as usize },
        141usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(Hidden)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).IsFallbackWindow as *const _ as usize },
        142usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(IsFallbackWindow)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).HasCloseButton as *const _ as usize },
        143usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(HasCloseButton)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).ResizeBorderHeld as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(ResizeBorderHeld)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).BeginCount as *const _ as usize },
        146usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(BeginCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiWindow>())).BeginOrderWithinParent as *const _ as usize
        },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(BeginOrderWithinParent)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiWindow>())).BeginOrderWithinContext as *const _ as usize
        },
        150usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(BeginOrderWithinContext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).PopupId as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(PopupId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).AutoFitFramesX as *const _ as usize },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(AutoFitFramesX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).AutoFitFramesY as *const _ as usize },
        157usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(AutoFitFramesY)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).AutoFitChildAxises as *const _ as usize },
        158usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(AutoFitChildAxises)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).AutoFitOnlyGrows as *const _ as usize },
        159usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(AutoFitOnlyGrows)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiWindow>())).AutoPosLastDirection as *const _ as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(AutoPosLastDirection)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiWindow>())).HiddenFramesCanSkipItems as *const _ as usize
        },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(HiddenFramesCanSkipItems)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiWindow>())).HiddenFramesCannotSkipItems as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(HiddenFramesCannotSkipItems)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiWindow>())).SetWindowPosAllowFlags as *const _ as usize
        },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(SetWindowPosAllowFlags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiWindow>())).SetWindowSizeAllowFlags as *const _ as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(SetWindowSizeAllowFlags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiWindow>())).SetWindowCollapsedAllowFlags as *const _
                as usize
        },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(SetWindowCollapsedAllowFlags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).SetWindowPosVal as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(SetWindowPosVal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).SetWindowPosPivot as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(SetWindowPosPivot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).IDStack as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(IDStack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).DC as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(DC)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).OuterRectClipped as *const _ as usize },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(OuterRectClipped)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).InnerRect as *const _ as usize },
        528usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(InnerRect)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).InnerClipRect as *const _ as usize },
        544usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(InnerClipRect)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).WorkRect as *const _ as usize },
        560usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(WorkRect)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).ParentWorkRect as *const _ as usize },
        576usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(ParentWorkRect)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).ClipRect as *const _ as usize },
        592usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(ClipRect)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).ContentRegionRect as *const _ as usize },
        608usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(ContentRegionRect)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).HitTestHoleSize as *const _ as usize },
        624usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(HitTestHoleSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).HitTestHoleOffset as *const _ as usize },
        628usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(HitTestHoleOffset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).LastFrameActive as *const _ as usize },
        632usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(LastFrameActive)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).LastTimeActive as *const _ as usize },
        636usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(LastTimeActive)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).ItemWidthDefault as *const _ as usize },
        640usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(ItemWidthDefault)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).StateStorage as *const _ as usize },
        648usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(StateStorage)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).ColumnsStorage as *const _ as usize },
        664usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(ColumnsStorage)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).FontWindowScale as *const _ as usize },
        680usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(FontWindowScale)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).SettingsOffset as *const _ as usize },
        684usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(SettingsOffset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).DrawList as *const _ as usize },
        688usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(DrawList)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).DrawListInst as *const _ as usize },
        696usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(DrawListInst)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).ParentWindow as *const _ as usize },
        888usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(ParentWindow)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).RootWindow as *const _ as usize },
        896usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(RootWindow)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiWindow>())).RootWindowForTitleBarHighlight as *const _
                as usize
        },
        904usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(RootWindowForTitleBarHighlight)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).RootWindowForNav as *const _ as usize },
        912usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(RootWindowForNav)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiWindow>())).NavLastChildNavWindow as *const _ as usize
        },
        920usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(NavLastChildNavWindow)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).NavLastIds as *const _ as usize },
        928usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(NavLastIds)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).NavRectRel as *const _ as usize },
        936usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(NavRectRel)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiWindow>())).MemoryDrawListIdxCapacity as *const _ as usize
        },
        968usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(MemoryDrawListIdxCapacity)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiWindow>())).MemoryDrawListVtxCapacity as *const _ as usize
        },
        972usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(MemoryDrawListVtxCapacity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).MemoryCompacted as *const _ as usize },
        976usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(MemoryCompacted)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}?GetID@ImGuiWindow@@QEAAIPEBD0@Z"]
    pub fn ImGuiWindow_GetID(
        this: *mut ImGuiWindow,
        str_: *const ::std::os::raw::c_char,
        str_end: *const ::std::os::raw::c_char,
    ) -> ImGuiID;
}
extern "C" {
    #[link_name = "\u{1}?GetID@ImGuiWindow@@QEAAIPEBX@Z"]
    pub fn ImGuiWindow_GetID1(
        this: *mut ImGuiWindow,
        ptr: *const ::std::os::raw::c_void,
    ) -> ImGuiID;
}
extern "C" {
    #[link_name = "\u{1}?GetID@ImGuiWindow@@QEAAIH@Z"]
    pub fn ImGuiWindow_GetID2(this: *mut ImGuiWindow, n: ::std::os::raw::c_int) -> ImGuiID;
}
extern "C" {
    #[link_name = "\u{1}?GetIDNoKeepAlive@ImGuiWindow@@QEAAIPEBD0@Z"]
    pub fn ImGuiWindow_GetIDNoKeepAlive(
        this: *mut ImGuiWindow,
        str_: *const ::std::os::raw::c_char,
        str_end: *const ::std::os::raw::c_char,
    ) -> ImGuiID;
}
extern "C" {
    #[link_name = "\u{1}?GetIDNoKeepAlive@ImGuiWindow@@QEAAIPEBX@Z"]
    pub fn ImGuiWindow_GetIDNoKeepAlive1(
        this: *mut ImGuiWindow,
        ptr: *const ::std::os::raw::c_void,
    ) -> ImGuiID;
}
extern "C" {
    #[link_name = "\u{1}?GetIDNoKeepAlive@ImGuiWindow@@QEAAIH@Z"]
    pub fn ImGuiWindow_GetIDNoKeepAlive2(
        this: *mut ImGuiWindow,
        n: ::std::os::raw::c_int,
    ) -> ImGuiID;
}
extern "C" {
    #[link_name = "\u{1}?GetIDFromRectangle@ImGuiWindow@@QEAAIAEBUImRect@@@Z"]
    pub fn ImGuiWindow_GetIDFromRectangle(this: *mut ImGuiWindow, r_abs: *const ImRect) -> ImGuiID;
}
extern "C" {
    #[link_name = "\u{1}??0ImGuiWindow@@QEAA@PEAUImGuiContext@@PEBD@Z"]
    pub fn ImGuiWindow_ImGuiWindow(
        this: *mut ImGuiWindow,
        context: *mut ImGuiContext,
        name: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    #[link_name = "\u{1}??_DImGuiWindow@@QEAAXXZ"]
    pub fn ImGuiWindow_ImGuiWindow_destructor(this: *mut ImGuiWindow);
}
impl ImGuiWindow {
    #[inline]
    pub unsafe fn GetID(
        &mut self,
        str_: *const ::std::os::raw::c_char,
        str_end: *const ::std::os::raw::c_char,
    ) -> ImGuiID {
        ImGuiWindow_GetID(self, str_, str_end)
    }
    #[inline]
    pub unsafe fn GetID1(&mut self, ptr: *const ::std::os::raw::c_void) -> ImGuiID {
        ImGuiWindow_GetID1(self, ptr)
    }
    #[inline]
    pub unsafe fn GetID2(&mut self, n: ::std::os::raw::c_int) -> ImGuiID {
        ImGuiWindow_GetID2(self, n)
    }
    #[inline]
    pub unsafe fn GetIDNoKeepAlive(
        &mut self,
        str_: *const ::std::os::raw::c_char,
        str_end: *const ::std::os::raw::c_char,
    ) -> ImGuiID {
        ImGuiWindow_GetIDNoKeepAlive(self, str_, str_end)
    }
    #[inline]
    pub unsafe fn GetIDNoKeepAlive1(&mut self, ptr: *const ::std::os::raw::c_void) -> ImGuiID {
        ImGuiWindow_GetIDNoKeepAlive1(self, ptr)
    }
    #[inline]
    pub unsafe fn GetIDNoKeepAlive2(&mut self, n: ::std::os::raw::c_int) -> ImGuiID {
        ImGuiWindow_GetIDNoKeepAlive2(self, n)
    }
    #[inline]
    pub unsafe fn GetIDFromRectangle(&mut self, r_abs: *const ImRect) -> ImGuiID {
        ImGuiWindow_GetIDFromRectangle(self, r_abs)
    }
    #[inline]
    pub unsafe fn new(context: *mut ImGuiContext, name: *const ::std::os::raw::c_char) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        ImGuiWindow_ImGuiWindow(__bindgen_tmp.as_mut_ptr(), context, name);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        ImGuiWindow_ImGuiWindow_destructor(self)
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiLastItemDataBackup {
    pub LastItemId: ImGuiID,
    pub LastItemStatusFlags: ImGuiItemStatusFlags,
    pub LastItemRect: ImRect,
    pub LastItemDisplayRect: ImRect,
}
#[test]
fn bindgen_test_layout_ImGuiLastItemDataBackup() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiLastItemDataBackup>(),
        40usize,
        concat!("Size of: ", stringify!(ImGuiLastItemDataBackup))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiLastItemDataBackup>(),
        4usize,
        concat!("Alignment of ", stringify!(ImGuiLastItemDataBackup))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiLastItemDataBackup>())).LastItemId as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiLastItemDataBackup),
            "::",
            stringify!(LastItemId)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiLastItemDataBackup>())).LastItemStatusFlags as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiLastItemDataBackup),
            "::",
            stringify!(LastItemStatusFlags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiLastItemDataBackup>())).LastItemRect as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiLastItemDataBackup),
            "::",
            stringify!(LastItemRect)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiLastItemDataBackup>())).LastItemDisplayRect as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiLastItemDataBackup),
            "::",
            stringify!(LastItemDisplayRect)
        )
    );
}
pub const ImGuiTabBarFlags_DockNode: ImGuiTabBarFlagsPrivate_ = 1048576;
pub const ImGuiTabBarFlags_IsFocused: ImGuiTabBarFlagsPrivate_ = 2097152;
pub const ImGuiTabBarFlags_SaveSettings: ImGuiTabBarFlagsPrivate_ = 4194304;
pub type ImGuiTabBarFlagsPrivate_ = ::std::os::raw::c_int;
pub const ImGuiTabItemFlags_NoCloseButton: ImGuiTabItemFlagsPrivate_ = 1048576;
pub const ImGuiTabItemFlags_Button: ImGuiTabItemFlagsPrivate_ = 2097152;
pub type ImGuiTabItemFlagsPrivate_ = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiTabItem {
    pub ID: ImGuiID,
    pub Flags: ImGuiTabItemFlags,
    pub LastFrameVisible: ::std::os::raw::c_int,
    pub LastFrameSelected: ::std::os::raw::c_int,
    pub Offset: f32,
    pub Width: f32,
    pub ContentWidth: f32,
    pub NameOffset: ImS16,
    pub BeginOrder: ImS16,
    pub IndexDuringLayout: ImS16,
    pub WantClose: bool,
}
#[test]
fn bindgen_test_layout_ImGuiTabItem() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiTabItem>(),
        36usize,
        concat!("Size of: ", stringify!(ImGuiTabItem))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiTabItem>(),
        4usize,
        concat!("Alignment of ", stringify!(ImGuiTabItem))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTabItem>())).ID as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabItem),
            "::",
            stringify!(ID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTabItem>())).Flags as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabItem),
            "::",
            stringify!(Flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTabItem>())).LastFrameVisible as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabItem),
            "::",
            stringify!(LastFrameVisible)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTabItem>())).LastFrameSelected as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabItem),
            "::",
            stringify!(LastFrameSelected)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTabItem>())).Offset as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabItem),
            "::",
            stringify!(Offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTabItem>())).Width as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabItem),
            "::",
            stringify!(Width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTabItem>())).ContentWidth as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabItem),
            "::",
            stringify!(ContentWidth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTabItem>())).NameOffset as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabItem),
            "::",
            stringify!(NameOffset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTabItem>())).BeginOrder as *const _ as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabItem),
            "::",
            stringify!(BeginOrder)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTabItem>())).IndexDuringLayout as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabItem),
            "::",
            stringify!(IndexDuringLayout)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTabItem>())).WantClose as *const _ as usize },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabItem),
            "::",
            stringify!(WantClose)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct ImGuiTabBar {
    pub Tabs: ImVector<ImGuiTabItem>,
    pub Flags: ImGuiTabBarFlags,
    pub ID: ImGuiID,
    pub SelectedTabId: ImGuiID,
    pub NextSelectedTabId: ImGuiID,
    pub VisibleTabId: ImGuiID,
    pub CurrFrameVisible: ::std::os::raw::c_int,
    pub PrevFrameVisible: ::std::os::raw::c_int,
    pub BarRect: ImRect,
    pub CurrTabsContentsHeight: f32,
    pub PrevTabsContentsHeight: f32,
    pub WidthAllTabs: f32,
    pub WidthAllTabsIdeal: f32,
    pub ScrollingAnim: f32,
    pub ScrollingTarget: f32,
    pub ScrollingTargetDistToVisibility: f32,
    pub ScrollingSpeed: f32,
    pub ScrollingRectMinX: f32,
    pub ScrollingRectMaxX: f32,
    pub ReorderRequestTabId: ImGuiID,
    pub ReorderRequestDir: ImS8,
    pub BeginCount: ImS8,
    pub WantLayout: bool,
    pub VisibleTabWasSubmitted: bool,
    pub TabsAddedNew: bool,
    pub TabsActiveCount: ImS16,
    pub LastTabItemIdx: ImS16,
    pub ItemSpacingY: f32,
    pub FramePadding: ImVec2,
    pub BackupCursorPos: ImVec2,
    pub TabsNames: ImGuiTextBuffer,
}
#[test]
fn bindgen_test_layout_ImGuiTabBar() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiTabBar>(),
        152usize,
        concat!("Size of: ", stringify!(ImGuiTabBar))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiTabBar>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiTabBar))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTabBar>())).Tabs as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabBar),
            "::",
            stringify!(Tabs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTabBar>())).Flags as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabBar),
            "::",
            stringify!(Flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTabBar>())).ID as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabBar),
            "::",
            stringify!(ID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTabBar>())).SelectedTabId as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabBar),
            "::",
            stringify!(SelectedTabId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTabBar>())).NextSelectedTabId as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabBar),
            "::",
            stringify!(NextSelectedTabId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTabBar>())).VisibleTabId as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabBar),
            "::",
            stringify!(VisibleTabId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTabBar>())).CurrFrameVisible as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabBar),
            "::",
            stringify!(CurrFrameVisible)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTabBar>())).PrevFrameVisible as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabBar),
            "::",
            stringify!(PrevFrameVisible)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTabBar>())).BarRect as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabBar),
            "::",
            stringify!(BarRect)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiTabBar>())).CurrTabsContentsHeight as *const _ as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabBar),
            "::",
            stringify!(CurrTabsContentsHeight)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiTabBar>())).PrevTabsContentsHeight as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabBar),
            "::",
            stringify!(PrevTabsContentsHeight)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTabBar>())).WidthAllTabs as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabBar),
            "::",
            stringify!(WidthAllTabs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTabBar>())).WidthAllTabsIdeal as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabBar),
            "::",
            stringify!(WidthAllTabsIdeal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTabBar>())).ScrollingAnim as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabBar),
            "::",
            stringify!(ScrollingAnim)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTabBar>())).ScrollingTarget as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabBar),
            "::",
            stringify!(ScrollingTarget)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiTabBar>())).ScrollingTargetDistToVisibility as *const _
                as usize
        },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabBar),
            "::",
            stringify!(ScrollingTargetDistToVisibility)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTabBar>())).ScrollingSpeed as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabBar),
            "::",
            stringify!(ScrollingSpeed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTabBar>())).ScrollingRectMinX as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabBar),
            "::",
            stringify!(ScrollingRectMinX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTabBar>())).ScrollingRectMaxX as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabBar),
            "::",
            stringify!(ScrollingRectMaxX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTabBar>())).ReorderRequestTabId as *const _ as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabBar),
            "::",
            stringify!(ReorderRequestTabId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTabBar>())).ReorderRequestDir as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabBar),
            "::",
            stringify!(ReorderRequestDir)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTabBar>())).BeginCount as *const _ as usize },
        105usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabBar),
            "::",
            stringify!(BeginCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTabBar>())).WantLayout as *const _ as usize },
        106usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabBar),
            "::",
            stringify!(WantLayout)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiTabBar>())).VisibleTabWasSubmitted as *const _ as usize
        },
        107usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabBar),
            "::",
            stringify!(VisibleTabWasSubmitted)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTabBar>())).TabsAddedNew as *const _ as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabBar),
            "::",
            stringify!(TabsAddedNew)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTabBar>())).TabsActiveCount as *const _ as usize },
        110usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabBar),
            "::",
            stringify!(TabsActiveCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTabBar>())).LastTabItemIdx as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabBar),
            "::",
            stringify!(LastTabItemIdx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTabBar>())).ItemSpacingY as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabBar),
            "::",
            stringify!(ItemSpacingY)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTabBar>())).FramePadding as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabBar),
            "::",
            stringify!(FramePadding)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTabBar>())).BackupCursorPos as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabBar),
            "::",
            stringify!(BackupCursorPos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTabBar>())).TabsNames as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabBar),
            "::",
            stringify!(TabsNames)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}??0ImGuiTabBar@@QEAA@XZ"]
    pub fn ImGuiTabBar_ImGuiTabBar(this: *mut ImGuiTabBar);
}
impl ImGuiTabBar {
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        ImGuiTabBar_ImGuiTabBar(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
}
extern "C" {
    #[link_name = "\u{1}?ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z"]
    pub fn ImFontAtlasBuildWithStbTruetype(atlas: *mut ImFontAtlas) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?ImFontAtlasBuildInit@@YAXPEAUImFontAtlas@@@Z"]
    pub fn ImFontAtlasBuildInit(atlas: *mut ImFontAtlas);
}
extern "C" {
    #[link_name = "\u{1}?ImFontAtlasBuildSetupFont@@YAXPEAUImFontAtlas@@PEAUImFont@@PEAUImFontConfig@@MM@Z"]
    pub fn ImFontAtlasBuildSetupFont(
        atlas: *mut ImFontAtlas,
        font: *mut ImFont,
        font_config: *mut ImFontConfig,
        ascent: f32,
        descent: f32,
    );
}
extern "C" {
    #[link_name = "\u{1}?ImFontAtlasBuildPackCustomRects@@YAXPEAUImFontAtlas@@PEAX@Z"]
    pub fn ImFontAtlasBuildPackCustomRects(
        atlas: *mut ImFontAtlas,
        stbrp_context_opaque: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    #[link_name = "\u{1}?ImFontAtlasBuildFinish@@YAXPEAUImFontAtlas@@@Z"]
    pub fn ImFontAtlasBuildFinish(atlas: *mut ImFontAtlas);
}
extern "C" {
    #[link_name = "\u{1}?ImFontAtlasBuildRender1bppRectFromString@@YAXPEAUImFontAtlas@@HHHHPEBDDE@Z"]
    pub fn ImFontAtlasBuildRender1bppRectFromString(
        atlas: *mut ImFontAtlas,
        atlas_x: ::std::os::raw::c_int,
        atlas_y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        in_str: *const ::std::os::raw::c_char,
        in_marker_char: ::std::os::raw::c_char,
        in_marker_pixel_value: ::std::os::raw::c_uchar,
    );
}
extern "C" {
    #[link_name = "\u{1}?ImFontAtlasBuildMultiplyCalcLookupTable@@YAXQEAEM@Z"]
    pub fn ImFontAtlasBuildMultiplyCalcLookupTable(
        out_table: *mut ::std::os::raw::c_uchar,
        in_multiply_factor: f32,
    );
}
extern "C" {
    #[link_name = "\u{1}?ImFontAtlasBuildMultiplyRectAlpha8@@YAXQEBEPEAEHHHHH@Z"]
    pub fn ImFontAtlasBuildMultiplyRectAlpha8(
        table: *const ::std::os::raw::c_uchar,
        pixels: *mut ::std::os::raw::c_uchar,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_data {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_multibyte_data {
    pub _address: u8,
}
#[test]
fn __bindgen_test_layout_ImVector_open0_ImWchar_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<ImVector<ImWchar>>(),
        16usize,
        concat!(
            "Size of template specialization: ",
            stringify!(ImVector<ImWchar>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector<ImWchar>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(ImVector<ImWchar>)
        )
    );
}
#[test]
fn __bindgen_test_layout_ImVector_open0_ImGuiTextFilter_ImGuiTextRange_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<ImVector<ImGuiTextFilter_ImGuiTextRange>>(),
        16usize,
        concat!(
            "Size of template specialization: ",
            stringify!(ImVector<ImGuiTextFilter_ImGuiTextRange>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector<ImGuiTextFilter_ImGuiTextRange>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(ImVector<ImGuiTextFilter_ImGuiTextRange>)
        )
    );
}
#[test]
fn __bindgen_test_layout_ImVector_open0_ImGuiTextFilter_ImGuiTextRange_close0_instantiation_1() {
    assert_eq!(
        ::std::mem::size_of::<ImVector<ImGuiTextFilter_ImGuiTextRange>>(),
        16usize,
        concat!(
            "Size of template specialization: ",
            stringify!(ImVector<ImGuiTextFilter_ImGuiTextRange>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector<ImGuiTextFilter_ImGuiTextRange>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(ImVector<ImGuiTextFilter_ImGuiTextRange>)
        )
    );
}
#[test]
fn __bindgen_test_layout_ImVector_open0_char_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<ImVector<::std::os::raw::c_char>>(),
        16usize,
        concat!(
            "Size of template specialization: ",
            stringify!(ImVector<::std::os::raw::c_char>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector<::std::os::raw::c_char>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(ImVector<::std::os::raw::c_char>)
        )
    );
}
#[test]
fn __bindgen_test_layout_ImVector_open0_ImGuiStorage_ImGuiStoragePair_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<ImVector<ImGuiStorage_ImGuiStoragePair>>(),
        16usize,
        concat!(
            "Size of template specialization: ",
            stringify!(ImVector<ImGuiStorage_ImGuiStoragePair>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector<ImGuiStorage_ImGuiStoragePair>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(ImVector<ImGuiStorage_ImGuiStoragePair>)
        )
    );
}
#[test]
fn __bindgen_test_layout_ImVector_open0_ImDrawCmd_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<ImVector<ImDrawCmd>>(),
        16usize,
        concat!(
            "Size of template specialization: ",
            stringify!(ImVector<ImDrawCmd>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector<ImDrawCmd>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(ImVector<ImDrawCmd>)
        )
    );
}
#[test]
fn __bindgen_test_layout_ImVector_open0_ImDrawIdx_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<ImVector<ImDrawIdx>>(),
        16usize,
        concat!(
            "Size of template specialization: ",
            stringify!(ImVector<ImDrawIdx>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector<ImDrawIdx>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(ImVector<ImDrawIdx>)
        )
    );
}
#[test]
fn __bindgen_test_layout_ImVector_open0_ImDrawChannel_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<ImVector<ImDrawChannel>>(),
        16usize,
        concat!(
            "Size of template specialization: ",
            stringify!(ImVector<ImDrawChannel>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector<ImDrawChannel>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(ImVector<ImDrawChannel>)
        )
    );
}
#[test]
fn __bindgen_test_layout_ImVector_open0_ImDrawCmd_close0_instantiation_1() {
    assert_eq!(
        ::std::mem::size_of::<ImVector<ImDrawCmd>>(),
        16usize,
        concat!(
            "Size of template specialization: ",
            stringify!(ImVector<ImDrawCmd>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector<ImDrawCmd>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(ImVector<ImDrawCmd>)
        )
    );
}
#[test]
fn __bindgen_test_layout_ImVector_open0_ImDrawIdx_close0_instantiation_1() {
    assert_eq!(
        ::std::mem::size_of::<ImVector<ImDrawIdx>>(),
        16usize,
        concat!(
            "Size of template specialization: ",
            stringify!(ImVector<ImDrawIdx>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector<ImDrawIdx>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(ImVector<ImDrawIdx>)
        )
    );
}
#[test]
fn __bindgen_test_layout_ImVector_open0_ImDrawVert_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<ImVector<ImDrawVert>>(),
        16usize,
        concat!(
            "Size of template specialization: ",
            stringify!(ImVector<ImDrawVert>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector<ImDrawVert>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(ImVector<ImDrawVert>)
        )
    );
}
#[test]
fn __bindgen_test_layout_ImVector_open0_ImVec4_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<ImVector<ImVec4>>(),
        16usize,
        concat!(
            "Size of template specialization: ",
            stringify!(ImVector<ImVec4>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector<ImVec4>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(ImVector<ImVec4>)
        )
    );
}
#[test]
fn __bindgen_test_layout_ImVector_open0_ImTextureID_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<ImVector<ImTextureID>>(),
        16usize,
        concat!(
            "Size of template specialization: ",
            stringify!(ImVector<ImTextureID>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector<ImTextureID>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(ImVector<ImTextureID>)
        )
    );
}
#[test]
fn __bindgen_test_layout_ImVector_open0_ImVec2_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<ImVector<ImVec2>>(),
        16usize,
        concat!(
            "Size of template specialization: ",
            stringify!(ImVector<ImVec2>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector<ImVec2>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(ImVector<ImVec2>)
        )
    );
}
#[test]
fn __bindgen_test_layout_ImVector_open0_ImU32_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<ImVector<ImU32>>(),
        16usize,
        concat!(
            "Size of template specialization: ",
            stringify!(ImVector<ImU32>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector<ImU32>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(ImVector<ImU32>)
        )
    );
}
#[test]
fn __bindgen_test_layout_ImVector_open0_ImWchar_close0_instantiation_1() {
    assert_eq!(
        ::std::mem::size_of::<ImVector<ImWchar>>(),
        16usize,
        concat!(
            "Size of template specialization: ",
            stringify!(ImVector<ImWchar>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector<ImWchar>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(ImVector<ImWchar>)
        )
    );
}
#[test]
fn __bindgen_test_layout_ImVector_open0_ptr_ImFont_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<ImVector<*mut ImFont>>(),
        16usize,
        concat!(
            "Size of template specialization: ",
            stringify!(ImVector<*mut ImFont>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector<*mut ImFont>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(ImVector<*mut ImFont>)
        )
    );
}
#[test]
fn __bindgen_test_layout_ImVector_open0_ImFontAtlasCustomRect_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<ImVector<ImFontAtlasCustomRect>>(),
        16usize,
        concat!(
            "Size of template specialization: ",
            stringify!(ImVector<ImFontAtlasCustomRect>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector<ImFontAtlasCustomRect>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(ImVector<ImFontAtlasCustomRect>)
        )
    );
}
#[test]
fn __bindgen_test_layout_ImVector_open0_ImFontConfig_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<ImVector<ImFontConfig>>(),
        16usize,
        concat!(
            "Size of template specialization: ",
            stringify!(ImVector<ImFontConfig>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector<ImFontConfig>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(ImVector<ImFontConfig>)
        )
    );
}
#[test]
fn __bindgen_test_layout_ImVector_open0_float_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<ImVector<f32>>(),
        16usize,
        concat!(
            "Size of template specialization: ",
            stringify!(ImVector<f32>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector<f32>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(ImVector<f32>)
        )
    );
}
#[test]
fn __bindgen_test_layout_ImVector_open0_ImWchar_close0_instantiation_2() {
    assert_eq!(
        ::std::mem::size_of::<ImVector<ImWchar>>(),
        16usize,
        concat!(
            "Size of template specialization: ",
            stringify!(ImVector<ImWchar>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector<ImWchar>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(ImVector<ImWchar>)
        )
    );
}
#[test]
fn __bindgen_test_layout_ImVector_open0_ImFontGlyph_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<ImVector<ImFontGlyph>>(),
        16usize,
        concat!(
            "Size of template specialization: ",
            stringify!(ImVector<ImFontGlyph>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector<ImFontGlyph>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(ImVector<ImFontGlyph>)
        )
    );
}
#[test]
fn __bindgen_test_layout_ImVector_open0_ImU32_close0_instantiation_1() {
    assert_eq!(
        ::std::mem::size_of::<ImVector<ImU32>>(),
        16usize,
        concat!(
            "Size of template specialization: ",
            stringify!(ImVector<ImU32>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector<ImU32>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(ImVector<ImU32>)
        )
    );
}
#[test]
fn __bindgen_test_layout_ImVector_open0_char_close0_instantiation_1() {
    assert_eq!(
        ::std::mem::size_of::<ImVector<::std::os::raw::c_char>>(),
        16usize,
        concat!(
            "Size of template specialization: ",
            stringify!(ImVector<::std::os::raw::c_char>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector<::std::os::raw::c_char>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(ImVector<::std::os::raw::c_char>)
        )
    );
}
#[test]
fn __bindgen_test_layout_ImVector_open0_ptr_ImDrawList_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<ImVector<*mut ImDrawList>>(),
        16usize,
        concat!(
            "Size of template specialization: ",
            stringify!(ImVector<*mut ImDrawList>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector<*mut ImDrawList>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(ImVector<*mut ImDrawList>)
        )
    );
}
#[test]
fn __bindgen_test_layout_ImVector_open0_ImWchar_close0_instantiation_3() {
    assert_eq!(
        ::std::mem::size_of::<ImVector<ImWchar>>(),
        16usize,
        concat!(
            "Size of template specialization: ",
            stringify!(ImVector<ImWchar>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector<ImWchar>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(ImVector<ImWchar>)
        )
    );
}
#[test]
fn __bindgen_test_layout_ImVector_open0_char_close0_instantiation_2() {
    assert_eq!(
        ::std::mem::size_of::<ImVector<::std::os::raw::c_char>>(),
        16usize,
        concat!(
            "Size of template specialization: ",
            stringify!(ImVector<::std::os::raw::c_char>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector<::std::os::raw::c_char>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(ImVector<::std::os::raw::c_char>)
        )
    );
}
#[test]
fn __bindgen_test_layout_ImVector_open0_char_close0_instantiation_3() {
    assert_eq!(
        ::std::mem::size_of::<ImVector<::std::os::raw::c_char>>(),
        16usize,
        concat!(
            "Size of template specialization: ",
            stringify!(ImVector<::std::os::raw::c_char>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector<::std::os::raw::c_char>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(ImVector<::std::os::raw::c_char>)
        )
    );
}
#[test]
fn __bindgen_test_layout_ImVector_open0_ImGuiOldColumnData_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<ImVector<ImGuiOldColumnData>>(),
        16usize,
        concat!(
            "Size of template specialization: ",
            stringify!(ImVector<ImGuiOldColumnData>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector<ImGuiOldColumnData>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(ImVector<ImGuiOldColumnData>)
        )
    );
}
#[test]
fn __bindgen_test_layout_ImVector_open0_ptr_ImGuiWindow_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<ImVector<*mut ImGuiWindow>>(),
        16usize,
        concat!(
            "Size of template specialization: ",
            stringify!(ImVector<*mut ImGuiWindow>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector<*mut ImGuiWindow>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(ImVector<*mut ImGuiWindow>)
        )
    );
}
#[test]
fn __bindgen_test_layout_ImVector_open0_ptr_ImGuiWindow_close0_instantiation_1() {
    assert_eq!(
        ::std::mem::size_of::<ImVector<*mut ImGuiWindow>>(),
        16usize,
        concat!(
            "Size of template specialization: ",
            stringify!(ImVector<*mut ImGuiWindow>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector<*mut ImGuiWindow>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(ImVector<*mut ImGuiWindow>)
        )
    );
}
#[test]
fn __bindgen_test_layout_ImVector_open0_ptr_ImGuiWindow_close0_instantiation_2() {
    assert_eq!(
        ::std::mem::size_of::<ImVector<*mut ImGuiWindow>>(),
        16usize,
        concat!(
            "Size of template specialization: ",
            stringify!(ImVector<*mut ImGuiWindow>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector<*mut ImGuiWindow>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(ImVector<*mut ImGuiWindow>)
        )
    );
}
#[test]
fn __bindgen_test_layout_ImVector_open0_ptr_ImGuiWindow_close0_instantiation_3() {
    assert_eq!(
        ::std::mem::size_of::<ImVector<*mut ImGuiWindow>>(),
        16usize,
        concat!(
            "Size of template specialization: ",
            stringify!(ImVector<*mut ImGuiWindow>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector<*mut ImGuiWindow>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(ImVector<*mut ImGuiWindow>)
        )
    );
}
#[test]
fn __bindgen_test_layout_ImVector_open0_ImGuiColorMod_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<ImVector<ImGuiColorMod>>(),
        16usize,
        concat!(
            "Size of template specialization: ",
            stringify!(ImVector<ImGuiColorMod>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector<ImGuiColorMod>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(ImVector<ImGuiColorMod>)
        )
    );
}
#[test]
fn __bindgen_test_layout_ImVector_open0_ImGuiStyleMod_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<ImVector<ImGuiStyleMod>>(),
        16usize,
        concat!(
            "Size of template specialization: ",
            stringify!(ImVector<ImGuiStyleMod>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector<ImGuiStyleMod>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(ImVector<ImGuiStyleMod>)
        )
    );
}
#[test]
fn __bindgen_test_layout_ImVector_open0_ptr_ImFont_close0_instantiation_1() {
    assert_eq!(
        ::std::mem::size_of::<ImVector<*mut ImFont>>(),
        16usize,
        concat!(
            "Size of template specialization: ",
            stringify!(ImVector<*mut ImFont>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector<*mut ImFont>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(ImVector<*mut ImFont>)
        )
    );
}
#[test]
fn __bindgen_test_layout_ImVector_open0_ImGuiID_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<ImVector<ImGuiID>>(),
        16usize,
        concat!(
            "Size of template specialization: ",
            stringify!(ImVector<ImGuiID>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector<ImGuiID>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(ImVector<ImGuiID>)
        )
    );
}
#[test]
fn __bindgen_test_layout_ImVector_open0_ImGuiItemFlags_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<ImVector<ImGuiItemFlags>>(),
        16usize,
        concat!(
            "Size of template specialization: ",
            stringify!(ImVector<ImGuiItemFlags>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector<ImGuiItemFlags>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(ImVector<ImGuiItemFlags>)
        )
    );
}
#[test]
fn __bindgen_test_layout_ImVector_open0_ImGuiGroupData_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<ImVector<ImGuiGroupData>>(),
        16usize,
        concat!(
            "Size of template specialization: ",
            stringify!(ImVector<ImGuiGroupData>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector<ImGuiGroupData>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(ImVector<ImGuiGroupData>)
        )
    );
}
#[test]
fn __bindgen_test_layout_ImVector_open0_ImGuiPopupData_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<ImVector<ImGuiPopupData>>(),
        16usize,
        concat!(
            "Size of template specialization: ",
            stringify!(ImVector<ImGuiPopupData>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector<ImGuiPopupData>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(ImVector<ImGuiPopupData>)
        )
    );
}
#[test]
fn __bindgen_test_layout_ImVector_open0_ImGuiPopupData_close0_instantiation_1() {
    assert_eq!(
        ::std::mem::size_of::<ImVector<ImGuiPopupData>>(),
        16usize,
        concat!(
            "Size of template specialization: ",
            stringify!(ImVector<ImGuiPopupData>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector<ImGuiPopupData>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(ImVector<ImGuiPopupData>)
        )
    );
}
#[test]
fn __bindgen_test_layout_ImVector_open0_unsigned_char_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<ImVector<::std::os::raw::c_uchar>>(),
        16usize,
        concat!(
            "Size of template specialization: ",
            stringify!(ImVector<::std::os::raw::c_uchar>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector<::std::os::raw::c_uchar>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(ImVector<::std::os::raw::c_uchar>)
        )
    );
}
#[test]
fn __bindgen_test_layout_ImPool_open0_ImGuiTabBar_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<ImPool<ImGuiTabBar>>(),
        40usize,
        concat!(
            "Size of template specialization: ",
            stringify!(ImPool<ImGuiTabBar>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ImPool<ImGuiTabBar>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(ImPool<ImGuiTabBar>)
        )
    );
}
#[test]
fn __bindgen_test_layout_ImVector_open0_ImGuiPtrOrIndex_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<ImVector<ImGuiPtrOrIndex>>(),
        16usize,
        concat!(
            "Size of template specialization: ",
            stringify!(ImVector<ImGuiPtrOrIndex>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector<ImGuiPtrOrIndex>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(ImVector<ImGuiPtrOrIndex>)
        )
    );
}
#[test]
fn __bindgen_test_layout_ImVector_open0_ImGuiShrinkWidthItem_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<ImVector<ImGuiShrinkWidthItem>>(),
        16usize,
        concat!(
            "Size of template specialization: ",
            stringify!(ImVector<ImGuiShrinkWidthItem>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector<ImGuiShrinkWidthItem>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(ImVector<ImGuiShrinkWidthItem>)
        )
    );
}
#[test]
fn __bindgen_test_layout_ImVector_open0_char_close0_instantiation_4() {
    assert_eq!(
        ::std::mem::size_of::<ImVector<::std::os::raw::c_char>>(),
        16usize,
        concat!(
            "Size of template specialization: ",
            stringify!(ImVector<::std::os::raw::c_char>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector<::std::os::raw::c_char>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(ImVector<::std::os::raw::c_char>)
        )
    );
}
#[test]
fn __bindgen_test_layout_ImVector_open0_ImGuiID_close0_instantiation_1() {
    assert_eq!(
        ::std::mem::size_of::<ImVector<ImGuiID>>(),
        16usize,
        concat!(
            "Size of template specialization: ",
            stringify!(ImVector<ImGuiID>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector<ImGuiID>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(ImVector<ImGuiID>)
        )
    );
}
#[test]
fn __bindgen_test_layout_ImVector_open0_ImGuiSettingsHandler_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<ImVector<ImGuiSettingsHandler>>(),
        16usize,
        concat!(
            "Size of template specialization: ",
            stringify!(ImVector<ImGuiSettingsHandler>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector<ImGuiSettingsHandler>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(ImVector<ImGuiSettingsHandler>)
        )
    );
}
#[test]
fn __bindgen_test_layout_ImChunkStream_open0_ImGuiWindowSettings_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<ImChunkStream>(),
        16usize,
        concat!(
            "Size of template specialization: ",
            stringify!(ImChunkStream)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ImChunkStream>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(ImChunkStream)
        )
    );
}
#[test]
fn __bindgen_test_layout_ImVector_open0_ImGuiContextHook_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<ImVector<ImGuiContextHook>>(),
        16usize,
        concat!(
            "Size of template specialization: ",
            stringify!(ImVector<ImGuiContextHook>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector<ImGuiContextHook>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(ImVector<ImGuiContextHook>)
        )
    );
}
#[test]
fn __bindgen_test_layout_ImVector_open0_ptr_ImGuiWindow_close0_instantiation_4() {
    assert_eq!(
        ::std::mem::size_of::<ImVector<*mut ImGuiWindow>>(),
        16usize,
        concat!(
            "Size of template specialization: ",
            stringify!(ImVector<*mut ImGuiWindow>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector<*mut ImGuiWindow>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(ImVector<*mut ImGuiWindow>)
        )
    );
}
#[test]
fn __bindgen_test_layout_ImVector_open0_float_close0_instantiation_1() {
    assert_eq!(
        ::std::mem::size_of::<ImVector<f32>>(),
        16usize,
        concat!(
            "Size of template specialization: ",
            stringify!(ImVector<f32>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector<f32>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(ImVector<f32>)
        )
    );
}
#[test]
fn __bindgen_test_layout_ImVector_open0_float_close0_instantiation_2() {
    assert_eq!(
        ::std::mem::size_of::<ImVector<f32>>(),
        16usize,
        concat!(
            "Size of template specialization: ",
            stringify!(ImVector<f32>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector<f32>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(ImVector<f32>)
        )
    );
}
#[test]
fn __bindgen_test_layout_ImVector_open0_ImGuiID_close0_instantiation_2() {
    assert_eq!(
        ::std::mem::size_of::<ImVector<ImGuiID>>(),
        16usize,
        concat!(
            "Size of template specialization: ",
            stringify!(ImVector<ImGuiID>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector<ImGuiID>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(ImVector<ImGuiID>)
        )
    );
}
#[test]
fn __bindgen_test_layout_ImVector_open0_ImGuiOldColumns_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<ImVector<ImGuiOldColumns>>(),
        16usize,
        concat!(
            "Size of template specialization: ",
            stringify!(ImVector<ImGuiOldColumns>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector<ImGuiOldColumns>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(ImVector<ImGuiOldColumns>)
        )
    );
}
#[test]
fn __bindgen_test_layout_ImVector_open0_ImGuiTabItem_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<ImVector<ImGuiTabItem>>(),
        16usize,
        concat!(
            "Size of template specialization: ",
            stringify!(ImVector<ImGuiTabItem>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector<ImGuiTabItem>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(ImVector<ImGuiTabItem>)
        )
    );
}
#[test]
fn __bindgen_test_layout_ImVector_open0_ptr_ImGuiWindow_close0_instantiation_5() {
    assert_eq!(
        ::std::mem::size_of::<ImVector<*mut ImGuiWindow>>(),
        16usize,
        concat!(
            "Size of template specialization: ",
            stringify!(ImVector<*mut ImGuiWindow>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector<*mut ImGuiWindow>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(ImVector<*mut ImGuiWindow>)
        )
    );
}
